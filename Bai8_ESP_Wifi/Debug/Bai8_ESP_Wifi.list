
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9d0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000443c  0800cb58  0800cb58  0000db58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f94  08010f94  000120b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010f94  08010f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f9c  08010f9c  000120b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f9c  08010f9c  00011f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010fa0  08010fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08010fa4  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000120b8  2**0
                  CONTENTS
 10 .bss          00000588  200000b8  200000b8  000120b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000640  20000640  000120b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd46  00000000  00000000  000120e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e4b  00000000  00000000  0002de2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  00032c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ef  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027eed  00000000  00000000  00035a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000262bd  00000000  00000000  0005d944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0617  00000000  00000000  00083c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00164218  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b90  00000000  00000000  0016425c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0016adec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cb40 	.word	0x0800cb40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	0800cb40 	.word	0x0800cb40

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96a 	b.w	8000dcc <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	460c      	mov	r4, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14e      	bne.n	8000bba <__udivmoddi4+0xaa>
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	458c      	cmp	ip, r1
 8000b20:	4686      	mov	lr, r0
 8000b22:	fab2 f282 	clz	r2, r2
 8000b26:	d962      	bls.n	8000bee <__udivmoddi4+0xde>
 8000b28:	b14a      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2a:	f1c2 0320 	rsb	r3, r2, #32
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	fa20 f303 	lsr.w	r3, r0, r3
 8000b34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b38:	4319      	orrs	r1, r3
 8000b3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f f68c 	uxth.w	r6, ip
 8000b46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b56:	fb04 f106 	mul.w	r1, r4, r6
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x64>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b66:	f080 8112 	bcs.w	8000d8e <__udivmoddi4+0x27e>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 810f 	bls.w	8000d8e <__udivmoddi4+0x27e>
 8000b70:	3c02      	subs	r4, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	1a59      	subs	r1, r3, r1
 8000b76:	fa1f f38e 	uxth.w	r3, lr
 8000b7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b86:	fb00 f606 	mul.w	r6, r0, r6
 8000b8a:	429e      	cmp	r6, r3
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x94>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b96:	f080 80fc 	bcs.w	8000d92 <__udivmoddi4+0x282>
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	f240 80f9 	bls.w	8000d92 <__udivmoddi4+0x282>
 8000ba0:	4463      	add	r3, ip
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	1b9b      	subs	r3, r3, r6
 8000ba6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000baa:	2100      	movs	r1, #0
 8000bac:	b11d      	cbz	r5, 8000bb6 <__udivmoddi4+0xa6>
 8000bae:	40d3      	lsrs	r3, r2
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d905      	bls.n	8000bca <__udivmoddi4+0xba>
 8000bbe:	b10d      	cbz	r5, 8000bc4 <__udivmoddi4+0xb4>
 8000bc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	e7f5      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bca:	fab3 f183 	clz	r1, r3
 8000bce:	2900      	cmp	r1, #0
 8000bd0:	d146      	bne.n	8000c60 <__udivmoddi4+0x150>
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xcc>
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	f0c0 80f0 	bcc.w	8000dbc <__udivmoddi4+0x2ac>
 8000bdc:	1a86      	subs	r6, r0, r2
 8000bde:	eb64 0303 	sbc.w	r3, r4, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d0e6      	beq.n	8000bb6 <__udivmoddi4+0xa6>
 8000be8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bec:	e7e3      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	f040 8090 	bne.w	8000d14 <__udivmoddi4+0x204>
 8000bf4:	eba1 040c 	sub.w	r4, r1, ip
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	fa1f f78c 	uxth.w	r7, ip
 8000c00:	2101      	movs	r1, #1
 8000c02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c12:	fb07 f006 	mul.w	r0, r7, r6
 8000c16:	4298      	cmp	r0, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x11c>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c22:	d202      	bcs.n	8000c2a <__udivmoddi4+0x11a>
 8000c24:	4298      	cmp	r0, r3
 8000c26:	f200 80cd 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000c2a:	4626      	mov	r6, r4
 8000c2c:	1a1c      	subs	r4, r3, r0
 8000c2e:	fa1f f38e 	uxth.w	r3, lr
 8000c32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c36:	fb08 4410 	mls	r4, r8, r0, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb00 f707 	mul.w	r7, r0, r7
 8000c42:	429f      	cmp	r7, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x148>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x146>
 8000c50:	429f      	cmp	r7, r3
 8000c52:	f200 80b0 	bhi.w	8000db6 <__udivmoddi4+0x2a6>
 8000c56:	4620      	mov	r0, r4
 8000c58:	1bdb      	subs	r3, r3, r7
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	e7a5      	b.n	8000bac <__udivmoddi4+0x9c>
 8000c60:	f1c1 0620 	rsb	r6, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f706 	lsr.w	r7, r2, r6
 8000c6a:	431f      	orrs	r7, r3
 8000c6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c70:	fa04 f301 	lsl.w	r3, r4, r1
 8000c74:	ea43 030c 	orr.w	r3, r3, ip
 8000c78:	40f4      	lsrs	r4, r6
 8000c7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c7e:	0c38      	lsrs	r0, r7, #16
 8000c80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c84:	fbb4 fef0 	udiv	lr, r4, r0
 8000c88:	fa1f fc87 	uxth.w	ip, r7
 8000c8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000c90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c94:	fb0e f90c 	mul.w	r9, lr, ip
 8000c98:	45a1      	cmp	r9, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	d90a      	bls.n	8000cb6 <__udivmoddi4+0x1a6>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ca6:	f080 8084 	bcs.w	8000db2 <__udivmoddi4+0x2a2>
 8000caa:	45a1      	cmp	r9, r4
 8000cac:	f240 8081 	bls.w	8000db2 <__udivmoddi4+0x2a2>
 8000cb0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cb4:	443c      	add	r4, r7
 8000cb6:	eba4 0409 	sub.w	r4, r4, r9
 8000cba:	fa1f f983 	uxth.w	r9, r3
 8000cbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x1d2>
 8000cd2:	193c      	adds	r4, r7, r4
 8000cd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cd8:	d267      	bcs.n	8000daa <__udivmoddi4+0x29a>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0x29a>
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ce6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cea:	eba4 040c 	sub.w	r4, r4, ip
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	46ce      	mov	lr, r9
 8000cf2:	469c      	mov	ip, r3
 8000cf4:	d351      	bcc.n	8000d9a <__udivmoddi4+0x28a>
 8000cf6:	d04e      	beq.n	8000d96 <__udivmoddi4+0x286>
 8000cf8:	b155      	cbz	r5, 8000d10 <__udivmoddi4+0x200>
 8000cfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000cfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000d02:	fa04 f606 	lsl.w	r6, r4, r6
 8000d06:	40cb      	lsrs	r3, r1
 8000d08:	431e      	orrs	r6, r3
 8000d0a:	40cc      	lsrs	r4, r1
 8000d0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d10:	2100      	movs	r1, #0
 8000d12:	e750      	b.n	8000bb6 <__udivmoddi4+0xa6>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f103 	lsr.w	r1, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa24 f303 	lsr.w	r3, r4, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	430c      	orrs	r4, r1
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d30:	fa1f f78c 	uxth.w	r7, ip
 8000d34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d38:	fb08 3110 	mls	r1, r8, r0, r3
 8000d3c:	0c23      	lsrs	r3, r4, #16
 8000d3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d42:	fb00 f107 	mul.w	r1, r0, r7
 8000d46:	4299      	cmp	r1, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x24c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d52:	d22c      	bcs.n	8000dae <__udivmoddi4+0x29e>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d92a      	bls.n	8000dae <__udivmoddi4+0x29e>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d64:	fb08 3311 	mls	r3, r8, r1, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb01 f307 	mul.w	r3, r1, r7
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x276>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d7c:	d213      	bcs.n	8000da6 <__udivmoddi4+0x296>
 8000d7e:	42a3      	cmp	r3, r4
 8000d80:	d911      	bls.n	8000da6 <__udivmoddi4+0x296>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	1ae4      	subs	r4, r4, r3
 8000d88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d8c:	e739      	b.n	8000c02 <__udivmoddi4+0xf2>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	e6f0      	b.n	8000b74 <__udivmoddi4+0x64>
 8000d92:	4608      	mov	r0, r1
 8000d94:	e706      	b.n	8000ba4 <__udivmoddi4+0x94>
 8000d96:	45c8      	cmp	r8, r9
 8000d98:	d2ae      	bcs.n	8000cf8 <__udivmoddi4+0x1e8>
 8000d9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000da2:	3801      	subs	r0, #1
 8000da4:	e7a8      	b.n	8000cf8 <__udivmoddi4+0x1e8>
 8000da6:	4631      	mov	r1, r6
 8000da8:	e7ed      	b.n	8000d86 <__udivmoddi4+0x276>
 8000daa:	4603      	mov	r3, r0
 8000dac:	e799      	b.n	8000ce2 <__udivmoddi4+0x1d2>
 8000dae:	4630      	mov	r0, r6
 8000db0:	e7d4      	b.n	8000d5c <__udivmoddi4+0x24c>
 8000db2:	46d6      	mov	lr, sl
 8000db4:	e77f      	b.n	8000cb6 <__udivmoddi4+0x1a6>
 8000db6:	4463      	add	r3, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e74d      	b.n	8000c58 <__udivmoddi4+0x148>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	e70f      	b.n	8000be4 <__udivmoddi4+0xd4>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	e730      	b.n	8000c2c <__udivmoddi4+0x11c>
 8000dca:	bf00      	nop

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000de2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000de4:	4a3d      	ldr	r2, [pc, #244]	@ (8000edc <MX_ADC1_Init+0x10c>)
 8000de6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000de8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dee:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000df4:	4b38      	ldr	r3, [pc, #224]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dfa:	4b37      	ldr	r3, [pc, #220]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b35      	ldr	r3, [pc, #212]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e08:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e10:	4a33      	ldr	r2, [pc, #204]	@ (8000ee0 <MX_ADC1_Init+0x110>)
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e28:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e2e:	482a      	ldr	r0, [pc, #168]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e30:	f006 f84a 	bl	8006ec8 <HAL_ADC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f003 fdc7 	bl	80049cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4822      	ldr	r0, [pc, #136]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e50:	f006 f87e 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e5a:	f003 fdb7 	bl	80049cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e5e:	2309      	movs	r3, #9
 8000e60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481b      	ldr	r0, [pc, #108]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e6c:	f006 f870 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e76:	f003 fda9 	bl	80049cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e82:	463b      	mov	r3, r7
 8000e84:	4619      	mov	r1, r3
 8000e86:	4814      	ldr	r0, [pc, #80]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000e88:	f006 f862 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e92:	f003 fd9b 	bl	80049cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e96:	230b      	movs	r3, #11
 8000e98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000ea4:	f006 f854 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000eae:	f003 fd8d 	bl	80049cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	@ (8000ed8 <MX_ADC1_Init+0x108>)
 8000ec0:	f006 f846 	bl	8006f50 <HAL_ADC_ConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000eca:	f003 fd7f 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000d4 	.word	0x200000d4
 8000edc:	40012000 	.word	0x40012000
 8000ee0:	0f000001 	.word	0x0f000001

08000ee4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a3c      	ldr	r2, [pc, #240]	@ (8000ff4 <HAL_ADC_MspInit+0x110>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d171      	bne.n	8000fea <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b34      	ldr	r3, [pc, #208]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a33      	ldr	r2, [pc, #204]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_ADC_MspInit+0x114>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4823      	ldr	r0, [pc, #140]	@ (8000ffc <HAL_ADC_MspInit+0x118>)
 8000f6e:	f006 fe9b 	bl	8007ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f72:	2303      	movs	r3, #3
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f76:	2303      	movs	r3, #3
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	481e      	ldr	r0, [pc, #120]	@ (8001000 <HAL_ADC_MspInit+0x11c>)
 8000f86:	f006 fe8f 	bl	8007ca8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <HAL_ADC_MspInit+0x124>)
 8000f8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fba:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fce:	480d      	ldr	r0, [pc, #52]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fd0:	f006 faee 	bl	80075b0 <HAL_DMA_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fda:	f003 fcf7 	bl	80049cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_ADC_MspInit+0x120>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020400 	.word	0x40020400
 8001004:	2000011c 	.word	0x2000011c
 8001008:	40026410 	.word	0x40026410

0800100c <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	at24c_Check();
 8001010:	f000 f83c 	bl	800108c <at24c_Check>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af04      	add	r7, sp, #16
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 8001026:	88fa      	ldrh	r2, [r7, #6]
 8001028:	230a      	movs	r3, #10
 800102a:	9302      	str	r3, [sp, #8]
 800102c:	2301      	movs	r3, #1
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	f107 030f 	add.w	r3, r7, #15
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2310      	movs	r3, #16
 8001038:	21a0      	movs	r1, #160	@ 0xa0
 800103a:	4804      	ldr	r0, [pc, #16]	@ (800104c <at24c_ReadOneByte+0x34>)
 800103c:	f007 fa5a 	bl	80084f4 <HAL_I2C_Mem_Read>
	return temp;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000260 	.word	0x20000260

08001050 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af04      	add	r7, sp, #16
 8001056:	4603      	mov	r3, r0
 8001058:	460a      	mov	r2, r1
 800105a:	80fb      	strh	r3, [r7, #6]
 800105c:	4613      	mov	r3, r2
 800105e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001060:	88fa      	ldrh	r2, [r7, #6]
 8001062:	230a      	movs	r3, #10
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1d7b      	adds	r3, r7, #5
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2310      	movs	r3, #16
 8001070:	21a0      	movs	r1, #160	@ 0xa0
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <at24c_WriteOneByte+0x38>)
 8001074:	f007 f944 	bl	8008300 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001078:	2005      	movs	r0, #5
 800107a:	f005 ff01 	bl	8006e80 <HAL_Delay>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000260 	.word	0x20000260

0800108c <at24c_Check>:

uint8_t at24c_Check(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 8001092:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001096:	f7ff ffbf 	bl	8001018 <at24c_ReadOneByte>
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b55      	cmp	r3, #85	@ 0x55
 80010a2:	d101      	bne.n	80010a8 <at24c_Check+0x1c>
 80010a4:	2300      	movs	r3, #0
 80010a6:	e010      	b.n	80010ca <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 80010a8:	2155      	movs	r1, #85	@ 0x55
 80010aa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010ae:	f7ff ffcf 	bl	8001050 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 80010b2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80010b6:	f7ff ffaf 	bl	8001018 <at24c_ReadOneByte>
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b55      	cmp	r3, #85	@ 0x55
 80010c2:	d101      	bne.n	80010c8 <at24c_Check+0x3c>
 80010c4:	2300      	movs	r3, #0
 80010c6:	e000      	b.n	80010ca <at24c_Check+0x3e>
	}
	return 1;
 80010c8:	2301      	movs	r3, #1
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	6039      	str	r1, [r7, #0]
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4613      	mov	r3, r2
 80010e0:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80010e2:	e00d      	b.n	8001100 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	80fa      	strh	r2, [r7, #6]
 80010ea:	683c      	ldr	r4, [r7, #0]
 80010ec:	1c62      	adds	r2, r4, #1
 80010ee:	603a      	str	r2, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff91 	bl	8001018 <at24c_ReadOneByte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1ee      	bne.n	80010e4 <at24c_Read+0x12>
	}
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}

08001110 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	80fb      	strh	r3, [r7, #6]
 800111c:	4613      	mov	r3, r2
 800111e:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001120:	e00c      	b.n	800113c <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff90 	bl	8001050 <at24c_WriteOneByte>
		WriteAddr++;
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	3301      	adds	r3, #1
 8001134:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	80ba      	strh	r2, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ed      	bne.n	8001122 <at24c_Write+0x12>
	}
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	2108      	movs	r1, #8
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <button_init+0x14>)
 800115a:	f006 ff59 	bl	8008010 <HAL_GPIO_WritePin>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020c00 	.word	0x40020c00

08001168 <button_Scan>:

void button_Scan(){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2108      	movs	r1, #8
 8001172:	482f      	ldr	r0, [pc, #188]	@ (8001230 <button_Scan+0xc8>)
 8001174:	f006 ff4c 	bl	8008010 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001178:	2201      	movs	r2, #1
 800117a:	2108      	movs	r1, #8
 800117c:	482c      	ldr	r0, [pc, #176]	@ (8001230 <button_Scan+0xc8>)
 800117e:	f006 ff47 	bl	8008010 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001182:	230a      	movs	r3, #10
 8001184:	2202      	movs	r2, #2
 8001186:	492b      	ldr	r1, [pc, #172]	@ (8001234 <button_Scan+0xcc>)
 8001188:	482b      	ldr	r0, [pc, #172]	@ (8001238 <button_Scan+0xd0>)
 800118a:	f008 fd92 	bl	8009cb2 <HAL_SPI_Receive>
	  int button_index = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001196:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	e03f      	b.n	800121e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db06      	blt.n	80011b2 <button_Scan+0x4a>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	dc03      	bgt.n	80011b2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3304      	adds	r3, #4
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e018      	b.n	80011e4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	dd07      	ble.n	80011c8 <button_Scan+0x60>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b07      	cmp	r3, #7
 80011bc:	dc04      	bgt.n	80011c8 <button_Scan+0x60>
			  button_index = 7 - i;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f1c3 0307 	rsb	r3, r3, #7
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e00d      	b.n	80011e4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b07      	cmp	r3, #7
 80011cc:	dd06      	ble.n	80011dc <button_Scan+0x74>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0b      	cmp	r3, #11
 80011d2:	dc03      	bgt.n	80011dc <button_Scan+0x74>
			  button_index = i + 4;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3304      	adds	r3, #4
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	e003      	b.n	80011e4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f1c3 0317 	rsb	r3, r3, #23
 80011e2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <button_Scan+0xcc>)
 80011e6:	881a      	ldrh	r2, [r3, #0]
 80011e8:	897b      	ldrh	r3, [r7, #10]
 80011ea:	4013      	ands	r3, r2
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <button_Scan+0x96>
 80011f2:	4a12      	ldr	r2, [pc, #72]	@ (800123c <button_Scan+0xd4>)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2100      	movs	r1, #0
 80011f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80011fc:	e009      	b.n	8001212 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80011fe:	4a0f      	ldr	r2, [pc, #60]	@ (800123c <button_Scan+0xd4>)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001206:	3301      	adds	r3, #1
 8001208:	b299      	uxth	r1, r3
 800120a:	4a0c      	ldr	r2, [pc, #48]	@ (800123c <button_Scan+0xd4>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8001212:	897b      	ldrh	r3, [r7, #10]
 8001214:	085b      	lsrs	r3, r3, #1
 8001216:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3301      	adds	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	ddbc      	ble.n	800119e <button_Scan+0x36>
	  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40020c00 	.word	0x40020c00
 8001234:	2000019c 	.word	0x2000019c
 8001238:	200002dc 	.word	0x200002dc
 800123c:	2000017c 	.word	0x2000017c

08001240 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001244:	2100      	movs	r1, #0
 8001246:	4802      	ldr	r0, [pc, #8]	@ (8001250 <buzzer_init+0x10>)
 8001248:	f009 fadc 	bl	800a804 <HAL_TIM_PWM_Start>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200003c4 	.word	0x200003c4

08001254 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 800125e:	4a07      	ldr	r2, [pc, #28]	@ (800127c <buzzer_SetVolume+0x28>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <buzzer_SetVolume+0x28>)
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <buzzer_SetVolume+0x2c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000019e 	.word	0x2000019e
 8001280:	200003c4 	.word	0x200003c4

08001284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_DMA_Init+0x3c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <MX_DMA_Init+0x3c>)
 8001294:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_DMA_Init+0x3c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2038      	movs	r0, #56	@ 0x38
 80012ac:	f006 f949 	bl	8007542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012b0:	2038      	movs	r0, #56	@ 0x38
 80012b2:	f006 f962 	bl	800757a <HAL_NVIC_EnableIRQ>

}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <ds3231_init>:
uint8_t ds3231_date_alarm;
uint8_t ds3231_day_alarm;
uint8_t ds3231_month_alarm;
uint8_t ds3231_year_alarm;

void ds3231_init(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80012c8:	201e      	movs	r0, #30
 80012ca:	f005 fd19 	bl	8006d00 <DEC2BCD>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <ds3231_init+0xcc>)
 80012d4:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80012d6:	2016      	movs	r0, #22
 80012d8:	f005 fd12 	bl	8006d00 <DEC2BCD>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <ds3231_init+0xcc>)
 80012e2:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80012e4:	2015      	movs	r0, #21
 80012e6:	f005 fd0b 	bl	8006d00 <DEC2BCD>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <ds3231_init+0xcc>)
 80012f0:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80012f2:	2006      	movs	r0, #6
 80012f4:	f005 fd04 	bl	8006d00 <DEC2BCD>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <ds3231_init+0xcc>)
 80012fe:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8001300:	200f      	movs	r0, #15
 8001302:	f005 fcfd 	bl	8006d00 <DEC2BCD>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <ds3231_init+0xcc>)
 800130c:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800130e:	2009      	movs	r0, #9
 8001310:	f005 fcf6 	bl	8006d00 <DEC2BCD>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <ds3231_init+0xcc>)
 800131a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 800131c:	2017      	movs	r0, #23
 800131e:	f005 fcef 	bl	8006d00 <DEC2BCD>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <ds3231_init+0xcc>)
 8001328:	719a      	strb	r2, [r3, #6]

	ds3231_buffer_alarm[0] = DEC2BCD(30); //second
 800132a:	201e      	movs	r0, #30
 800132c:	f005 fce8 	bl	8006d00 <DEC2BCD>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <ds3231_init+0xd0>)
 8001336:	701a      	strb	r2, [r3, #0]
	ds3231_buffer_alarm[1] = DEC2BCD(22); //minute
 8001338:	2016      	movs	r0, #22
 800133a:	f005 fce1 	bl	8006d00 <DEC2BCD>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <ds3231_init+0xd0>)
 8001344:	705a      	strb	r2, [r3, #1]
	ds3231_buffer_alarm[2] = DEC2BCD(21); //hour
 8001346:	2015      	movs	r0, #21
 8001348:	f005 fcda 	bl	8006d00 <DEC2BCD>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <ds3231_init+0xd0>)
 8001352:	709a      	strb	r2, [r3, #2]
	ds3231_buffer_alarm[3] = DEC2BCD(6);  //day
 8001354:	2006      	movs	r0, #6
 8001356:	f005 fcd3 	bl	8006d00 <DEC2BCD>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <ds3231_init+0xd0>)
 8001360:	70da      	strb	r2, [r3, #3]
	ds3231_buffer_alarm[4] = DEC2BCD(15); //date
 8001362:	200f      	movs	r0, #15
 8001364:	f005 fccc 	bl	8006d00 <DEC2BCD>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <ds3231_init+0xd0>)
 800136e:	711a      	strb	r2, [r3, #4]
	ds3231_buffer_alarm[5] = DEC2BCD(9);  //month
 8001370:	2009      	movs	r0, #9
 8001372:	f005 fcc5 	bl	8006d00 <DEC2BCD>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <ds3231_init+0xd0>)
 800137c:	715a      	strb	r2, [r3, #5]
	ds3231_buffer_alarm[6] = DEC2BCD(23); //year
 800137e:	2017      	movs	r0, #23
 8001380:	f005 fcbe 	bl	8006d00 <DEC2BCD>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b02      	ldr	r3, [pc, #8]	@ (8001394 <ds3231_init+0xd0>)
 800138a:	719a      	strb	r2, [r3, #6]
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200001a0 	.word	0x200001a0
 8001394:	200001a8 	.word	0x200001a8

08001398 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af04      	add	r7, sp, #16
 800139e:	4603      	mov	r3, r0
 80013a0:	460a      	mov	r2, r1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 fca8 	bl	8006d00 <DEC2BCD>
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	230a      	movs	r3, #10
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	2301      	movs	r3, #1
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f107 030f 	add.w	r3, r7, #15
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2301      	movs	r3, #1
 80013c8:	21d0      	movs	r1, #208	@ 0xd0
 80013ca:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <ds3231_Write+0x40>)
 80013cc:	f006 ff98 	bl	8008300 <HAL_I2C_Mem_Write>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000260 	.word	0x20000260

080013dc <ds3231_ReadTime>:

void ds3231_ReadTime(){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80013e2:	230a      	movs	r3, #10
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2307      	movs	r3, #7
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <ds3231_ReadTime+0xa4>)
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	2200      	movs	r2, #0
 80013f2:	21d0      	movs	r1, #208	@ 0xd0
 80013f4:	4823      	ldr	r0, [pc, #140]	@ (8001484 <ds3231_ReadTime+0xa8>)
 80013f6:	f007 f87d 	bl	80084f4 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80013fa:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <ds3231_ReadTime+0xa4>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fc64 	bl	8006ccc <BCD2DEC>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <ds3231_ReadTime+0xac>)
 800140a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <ds3231_ReadTime+0xa4>)
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	4618      	mov	r0, r3
 8001412:	f005 fc5b 	bl	8006ccc <BCD2DEC>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <ds3231_ReadTime+0xb0>)
 800141c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <ds3231_ReadTime+0xa4>)
 8001420:	789b      	ldrb	r3, [r3, #2]
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fc52 	bl	8006ccc <BCD2DEC>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <ds3231_ReadTime+0xb4>)
 800142e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <ds3231_ReadTime+0xa4>)
 8001432:	78db      	ldrb	r3, [r3, #3]
 8001434:	4618      	mov	r0, r3
 8001436:	f005 fc49 	bl	8006ccc <BCD2DEC>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <ds3231_ReadTime+0xb8>)
 8001440:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <ds3231_ReadTime+0xa4>)
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	4618      	mov	r0, r3
 8001448:	f005 fc40 	bl	8006ccc <BCD2DEC>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <ds3231_ReadTime+0xbc>)
 8001452:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <ds3231_ReadTime+0xa4>)
 8001456:	795b      	ldrb	r3, [r3, #5]
 8001458:	4618      	mov	r0, r3
 800145a:	f005 fc37 	bl	8006ccc <BCD2DEC>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <ds3231_ReadTime+0xc0>)
 8001464:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <ds3231_ReadTime+0xa4>)
 8001468:	799b      	ldrb	r3, [r3, #6]
 800146a:	4618      	mov	r0, r3
 800146c:	f005 fc2e 	bl	8006ccc <BCD2DEC>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <ds3231_ReadTime+0xc4>)
 8001476:	701a      	strb	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200001a0 	.word	0x200001a0
 8001484:	20000260 	.word	0x20000260
 8001488:	200001b1 	.word	0x200001b1
 800148c:	200001b0 	.word	0x200001b0
 8001490:	200001af 	.word	0x200001af
 8001494:	200001b3 	.word	0x200001b3
 8001498:	200001b2 	.word	0x200001b2
 800149c:	200001b4 	.word	0x200001b4
 80014a0:	200001b5 	.word	0x200001b5

080014a4 <ds3231_ReadTime_Alarm>:

void ds3231_ReadTime_Alarm(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x07, I2C_MEMADD_SIZE_8BIT, ds3231_buffer_alarm, 7, 10);
 80014aa:	230a      	movs	r3, #10
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	2307      	movs	r3, #7
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <ds3231_ReadTime_Alarm+0xa4>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2301      	movs	r3, #1
 80014b8:	2207      	movs	r2, #7
 80014ba:	21d0      	movs	r1, #208	@ 0xd0
 80014bc:	4823      	ldr	r0, [pc, #140]	@ (800154c <ds3231_ReadTime_Alarm+0xa8>)
 80014be:	f007 f819 	bl	80084f4 <HAL_I2C_Mem_Read>
	ds3231_sec_alarm = BCD2DEC(ds3231_buffer_alarm[0]);
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <ds3231_ReadTime_Alarm+0xa4>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fc00 	bl	8006ccc <BCD2DEC>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <ds3231_ReadTime_Alarm+0xac>)
 80014d2:	701a      	strb	r2, [r3, #0]
	ds3231_min_alarm = BCD2DEC(ds3231_buffer_alarm[1]);
 80014d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <ds3231_ReadTime_Alarm+0xa4>)
 80014d6:	785b      	ldrb	r3, [r3, #1]
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 fbf7 	bl	8006ccc <BCD2DEC>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <ds3231_ReadTime_Alarm+0xb0>)
 80014e4:	701a      	strb	r2, [r3, #0]
	ds3231_hours_alarm = BCD2DEC(ds3231_buffer_alarm[2]);
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <ds3231_ReadTime_Alarm+0xa4>)
 80014e8:	789b      	ldrb	r3, [r3, #2]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f005 fbee 	bl	8006ccc <BCD2DEC>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <ds3231_ReadTime_Alarm+0xb4>)
 80014f6:	701a      	strb	r2, [r3, #0]
	ds3231_day_alarm = BCD2DEC(ds3231_buffer_alarm[3]);
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <ds3231_ReadTime_Alarm+0xa4>)
 80014fa:	78db      	ldrb	r3, [r3, #3]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f005 fbe5 	bl	8006ccc <BCD2DEC>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <ds3231_ReadTime_Alarm+0xb8>)
 8001508:	701a      	strb	r2, [r3, #0]
	ds3231_date_alarm = BCD2DEC(ds3231_buffer_alarm[4]);
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <ds3231_ReadTime_Alarm+0xa4>)
 800150c:	791b      	ldrb	r3, [r3, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	f005 fbdc 	bl	8006ccc <BCD2DEC>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <ds3231_ReadTime_Alarm+0xbc>)
 800151a:	701a      	strb	r2, [r3, #0]
	ds3231_month_alarm = BCD2DEC(ds3231_buffer_alarm[5]);
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <ds3231_ReadTime_Alarm+0xa4>)
 800151e:	795b      	ldrb	r3, [r3, #5]
 8001520:	4618      	mov	r0, r3
 8001522:	f005 fbd3 	bl	8006ccc <BCD2DEC>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <ds3231_ReadTime_Alarm+0xc0>)
 800152c:	701a      	strb	r2, [r3, #0]
	ds3231_year_alarm = BCD2DEC(ds3231_buffer_alarm[6]);
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <ds3231_ReadTime_Alarm+0xa4>)
 8001530:	799b      	ldrb	r3, [r3, #6]
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fbca 	bl	8006ccc <BCD2DEC>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <ds3231_ReadTime_Alarm+0xc4>)
 800153e:	701a      	strb	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200001a8 	.word	0x200001a8
 800154c:	20000260 	.word	0x20000260
 8001550:	200001b8 	.word	0x200001b8
 8001554:	200001b7 	.word	0x200001b7
 8001558:	200001b6 	.word	0x200001b6
 800155c:	200001ba 	.word	0x200001ba
 8001560:	200001b9 	.word	0x200001b9
 8001564:	200001bb 	.word	0x200001bb
 8001568:	200001bc 	.word	0x200001bc

0800156c <updateTime>:
 *  Created on: May 27, 2024
 *      Author: ADMIN
 */
#include "extra_function.h"

void updateTime(int hour, int min, int sec, int date, int month, int year){
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
	ds3231_Write(ADDRESS_YEAR, year);
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4619      	mov	r1, r3
 8001580:	2006      	movs	r0, #6
 8001582:	f7ff ff09 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, month);
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	2005      	movs	r0, #5
 800158e:	f7ff ff03 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, date);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	2004      	movs	r0, #4
 800159a:	f7ff fefd 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, hour);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff fef7 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, min);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fef1 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, sec);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4619      	mov	r1, r3
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff feeb 	bl	8001398 <ds3231_Write>
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <updateTime_Alarm>:

void updateTime_Alarm(int hour, int min, int sec, int date, int month, int year){
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	603b      	str	r3, [r7, #0]
	ds3231_Write(ADDRESS_YEAR_ALARM, year);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4619      	mov	r1, r3
 80015de:	200d      	movs	r0, #13
 80015e0:	f7ff feda 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH_ALARM, month);
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4619      	mov	r1, r3
 80015ea:	200c      	movs	r0, #12
 80015ec:	f7ff fed4 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE_ALARM, date);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	4619      	mov	r1, r3
 80015f6:	200b      	movs	r0, #11
 80015f8:	f7ff fece 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR_ALARM, hour);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	2009      	movs	r0, #9
 8001604:	f7ff fec8 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN_ALARM, min);
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4619      	mov	r1, r3
 800160e:	2008      	movs	r0, #8
 8001610:	f7ff fec2 	bl	8001398 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC_ALARM, sec);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4619      	mov	r1, r3
 800161a:	2007      	movs	r0, #7
 800161c:	f7ff febc 	bl	8001398 <ds3231_Write>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <check_alarm>:

uint8_t check_alarm(){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	ds3231_ReadTime_Alarm();
 800162c:	f7ff ff3a 	bl	80014a4 <ds3231_ReadTime_Alarm>
	if (ds3231_year == ds3231_year_alarm && ds3231_month == ds3231_month_alarm && ds3231_date == ds3231_date_alarm &&
 8001630:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <check_alarm+0x5c>)
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <check_alarm+0x60>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d11f      	bne.n	800167c <check_alarm+0x54>
 800163c:	4b13      	ldr	r3, [pc, #76]	@ (800168c <check_alarm+0x64>)
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <check_alarm+0x68>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d119      	bne.n	800167c <check_alarm+0x54>
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <check_alarm+0x6c>)
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <check_alarm+0x70>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d113      	bne.n	800167c <check_alarm+0x54>
		ds3231_hours == ds3231_hours_alarm && ds3231_min == ds3231_min_alarm && ds3231_sec == ds3231_sec_alarm) {
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <check_alarm+0x74>)
 8001656:	781a      	ldrb	r2, [r3, #0]
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <check_alarm+0x78>)
 800165a:	781b      	ldrb	r3, [r3, #0]
	if (ds3231_year == ds3231_year_alarm && ds3231_month == ds3231_month_alarm && ds3231_date == ds3231_date_alarm &&
 800165c:	429a      	cmp	r2, r3
 800165e:	d10d      	bne.n	800167c <check_alarm+0x54>
		ds3231_hours == ds3231_hours_alarm && ds3231_min == ds3231_min_alarm && ds3231_sec == ds3231_sec_alarm) {
 8001660:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <check_alarm+0x7c>)
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <check_alarm+0x80>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d107      	bne.n	800167c <check_alarm+0x54>
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <check_alarm+0x84>)
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <check_alarm+0x88>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d101      	bne.n	800167c <check_alarm+0x54>
		return 1;
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <check_alarm+0x56>
	}
	return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200001b5 	.word	0x200001b5
 8001688:	200001bc 	.word	0x200001bc
 800168c:	200001b4 	.word	0x200001b4
 8001690:	200001bb 	.word	0x200001bb
 8001694:	200001b2 	.word	0x200001b2
 8001698:	200001b9 	.word	0x200001b9
 800169c:	200001af 	.word	0x200001af
 80016a0:	200001b6 	.word	0x200001b6
 80016a4:	200001b0 	.word	0x200001b0
 80016a8:	200001b7 	.word	0x200001b7
 80016ac:	200001b1 	.word	0x200001b1
 80016b0:	200001b8 	.word	0x200001b8

080016b4 <clr_confirm>:
int tempMonth = 0;
int tempYear = 0;

int confirm[3] = {0, 0, 0};

void clr_confirm(){
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	e007      	b.n	80016d0 <clr_confirm+0x1c>
		confirm[i] = 0;
 80016c0:	4a08      	ldr	r2, [pc, #32]	@ (80016e4 <clr_confirm+0x30>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2100      	movs	r1, #0
 80016c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++){
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	ddf4      	ble.n	80016c0 <clr_confirm+0xc>
	}
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	20000200 	.word	0x20000200

080016e8 <update_change_time_state>:

void update_change_time_state(){
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
	tempHour = ds3231_hours;
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <update_change_time_state+0x4c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <update_change_time_state+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
	tempMin = ds3231_min;
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <update_change_time_state+0x54>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <update_change_time_state+0x58>)
 80016fe:	601a      	str	r2, [r3, #0]
	tempSec = ds3231_sec;
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <update_change_time_state+0x5c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <update_change_time_state+0x60>)
 8001708:	601a      	str	r2, [r3, #0]
	tempDate = ds3231_date;
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <update_change_time_state+0x64>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <update_change_time_state+0x68>)
 8001712:	601a      	str	r2, [r3, #0]
	tempMonth = ds3231_month;
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <update_change_time_state+0x6c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <update_change_time_state+0x70>)
 800171c:	601a      	str	r2, [r3, #0]
	tempYear = ds3231_year;
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <update_change_time_state+0x74>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <update_change_time_state+0x78>)
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	200001af 	.word	0x200001af
 8001738:	200001e8 	.word	0x200001e8
 800173c:	200001b0 	.word	0x200001b0
 8001740:	200001ec 	.word	0x200001ec
 8001744:	200001b1 	.word	0x200001b1
 8001748:	200001f0 	.word	0x200001f0
 800174c:	200001b2 	.word	0x200001b2
 8001750:	200001f4 	.word	0x200001f4
 8001754:	200001b4 	.word	0x200001b4
 8001758:	200001f8 	.word	0x200001f8
 800175c:	200001b5 	.word	0x200001b5
 8001760:	200001fc 	.word	0x200001fc

08001764 <input_pass_num>:

void input_pass_num(int i){
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	if (button_count[0] == 1){
 800176c:	4b57      	ldr	r3, [pc, #348]	@ (80018cc <input_pass_num+0x168>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d10c      	bne.n	800178e <input_pass_num+0x2a>
		pass[i] = 1;
 8001774:	4a56      	ldr	r2, [pc, #344]	@ (80018d0 <input_pass_num+0x16c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2101      	movs	r1, #1
 800177a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b01      	cmp	r3, #1
 8001782:	dc04      	bgt.n	800178e <input_pass_num+0x2a>
			pos = pos + 1;
 8001784:	4b53      	ldr	r3, [pc, #332]	@ (80018d4 <input_pass_num+0x170>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a52      	ldr	r2, [pc, #328]	@ (80018d4 <input_pass_num+0x170>)
 800178c:	6013      	str	r3, [r2, #0]
		}
	}
	if (button_count[1] == 1){
 800178e:	4b4f      	ldr	r3, [pc, #316]	@ (80018cc <input_pass_num+0x168>)
 8001790:	885b      	ldrh	r3, [r3, #2]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d10c      	bne.n	80017b0 <input_pass_num+0x4c>
		pass[i] = 2;
 8001796:	4a4e      	ldr	r2, [pc, #312]	@ (80018d0 <input_pass_num+0x16c>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2102      	movs	r1, #2
 800179c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	dc04      	bgt.n	80017b0 <input_pass_num+0x4c>
			pos = pos + 1;
 80017a6:	4b4b      	ldr	r3, [pc, #300]	@ (80018d4 <input_pass_num+0x170>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	4a49      	ldr	r2, [pc, #292]	@ (80018d4 <input_pass_num+0x170>)
 80017ae:	6013      	str	r3, [r2, #0]
		}
	}
	if (button_count[2] == 1){
 80017b0:	4b46      	ldr	r3, [pc, #280]	@ (80018cc <input_pass_num+0x168>)
 80017b2:	889b      	ldrh	r3, [r3, #4]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10c      	bne.n	80017d2 <input_pass_num+0x6e>
		pass[i] = 3;
 80017b8:	4a45      	ldr	r2, [pc, #276]	@ (80018d0 <input_pass_num+0x16c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2103      	movs	r1, #3
 80017be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	dc04      	bgt.n	80017d2 <input_pass_num+0x6e>
			pos = pos + 1;
 80017c8:	4b42      	ldr	r3, [pc, #264]	@ (80018d4 <input_pass_num+0x170>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	4a41      	ldr	r2, [pc, #260]	@ (80018d4 <input_pass_num+0x170>)
 80017d0:	6013      	str	r3, [r2, #0]
		}
	}
	if (button_count[4] == 1){
 80017d2:	4b3e      	ldr	r3, [pc, #248]	@ (80018cc <input_pass_num+0x168>)
 80017d4:	891b      	ldrh	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10c      	bne.n	80017f4 <input_pass_num+0x90>
		pass[i] = 4;
 80017da:	4a3d      	ldr	r2, [pc, #244]	@ (80018d0 <input_pass_num+0x16c>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2104      	movs	r1, #4
 80017e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	dc04      	bgt.n	80017f4 <input_pass_num+0x90>
			pos = pos + 1;
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <input_pass_num+0x170>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a38      	ldr	r2, [pc, #224]	@ (80018d4 <input_pass_num+0x170>)
 80017f2:	6013      	str	r3, [r2, #0]
		}
	}
	if (button_count[5] == 1){
 80017f4:	4b35      	ldr	r3, [pc, #212]	@ (80018cc <input_pass_num+0x168>)
 80017f6:	895b      	ldrh	r3, [r3, #10]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d10c      	bne.n	8001816 <input_pass_num+0xb2>
		pass[i] = 5;
 80017fc:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <input_pass_num+0x16c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2105      	movs	r1, #5
 8001802:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	dc04      	bgt.n	8001816 <input_pass_num+0xb2>
			pos = pos + 1;
 800180c:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <input_pass_num+0x170>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	4a30      	ldr	r2, [pc, #192]	@ (80018d4 <input_pass_num+0x170>)
 8001814:	6013      	str	r3, [r2, #0]
		}
	}
	if (button_count[6] == 1){
 8001816:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <input_pass_num+0x168>)
 8001818:	899b      	ldrh	r3, [r3, #12]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10c      	bne.n	8001838 <input_pass_num+0xd4>
		pass[i] = 6;
 800181e:	4a2c      	ldr	r2, [pc, #176]	@ (80018d0 <input_pass_num+0x16c>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2106      	movs	r1, #6
 8001824:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	dc04      	bgt.n	8001838 <input_pass_num+0xd4>
			pos = pos + 1;
 800182e:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <input_pass_num+0x170>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a27      	ldr	r2, [pc, #156]	@ (80018d4 <input_pass_num+0x170>)
 8001836:	6013      	str	r3, [r2, #0]
		}
	}
	if (button_count[8] == 1){
 8001838:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <input_pass_num+0x168>)
 800183a:	8a1b      	ldrh	r3, [r3, #16]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10c      	bne.n	800185a <input_pass_num+0xf6>
		pass[i] = 7;
 8001840:	4a23      	ldr	r2, [pc, #140]	@ (80018d0 <input_pass_num+0x16c>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2107      	movs	r1, #7
 8001846:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b01      	cmp	r3, #1
 800184e:	dc04      	bgt.n	800185a <input_pass_num+0xf6>
			pos = pos + 1;
 8001850:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <input_pass_num+0x170>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <input_pass_num+0x170>)
 8001858:	6013      	str	r3, [r2, #0]
		}
	}
	if (button_count[9] == 1){
 800185a:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <input_pass_num+0x168>)
 800185c:	8a5b      	ldrh	r3, [r3, #18]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10c      	bne.n	800187c <input_pass_num+0x118>
		pass[i] = 8;
 8001862:	4a1b      	ldr	r2, [pc, #108]	@ (80018d0 <input_pass_num+0x16c>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2108      	movs	r1, #8
 8001868:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	dc04      	bgt.n	800187c <input_pass_num+0x118>
			pos = pos + 1;
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <input_pass_num+0x170>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	4a16      	ldr	r2, [pc, #88]	@ (80018d4 <input_pass_num+0x170>)
 800187a:	6013      	str	r3, [r2, #0]
		}
	}
	if (button_count[10] == 1){
 800187c:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <input_pass_num+0x168>)
 800187e:	8a9b      	ldrh	r3, [r3, #20]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d10c      	bne.n	800189e <input_pass_num+0x13a>
		pass[i] = 9;
 8001884:	4a12      	ldr	r2, [pc, #72]	@ (80018d0 <input_pass_num+0x16c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2109      	movs	r1, #9
 800188a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b01      	cmp	r3, #1
 8001892:	dc04      	bgt.n	800189e <input_pass_num+0x13a>
			pos = pos + 1;
 8001894:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <input_pass_num+0x170>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <input_pass_num+0x170>)
 800189c:	6013      	str	r3, [r2, #0]
		}
	}
	if (button_count[13] == 1){
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <input_pass_num+0x168>)
 80018a0:	8b5b      	ldrh	r3, [r3, #26]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d10c      	bne.n	80018c0 <input_pass_num+0x15c>
		pass[i] = 0;
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <input_pass_num+0x16c>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2100      	movs	r1, #0
 80018ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (i < 2){
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	dc04      	bgt.n	80018c0 <input_pass_num+0x15c>
			pos = pos + 1;
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <input_pass_num+0x170>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <input_pass_num+0x170>)
 80018be:	6013      	str	r3, [r2, #0]
		}
	}
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	2000017c 	.word	0x2000017c
 80018d0:	200001d4 	.word	0x200001d4
 80018d4:	200001c4 	.word	0x200001c4

080018d8 <input_pass>:

void input_pass(){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	switch (pos) {
 80018dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <input_pass+0xbc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d036      	beq.n	8001952 <input_pass+0x7a>
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	dc4c      	bgt.n	8001982 <input_pass+0xaa>
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <input_pass+0x1a>
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d018      	beq.n	8001922 <input_pass+0x4a>
			if (button_count[7] == 1){
				pos = 1;
			}
			break;
		default:
			break;
 80018f0:	e047      	b.n	8001982 <input_pass+0xaa>
			blinky_displayTime(1, 0);
 80018f2:	2100      	movs	r1, #0
 80018f4:	2001      	movs	r0, #1
 80018f6:	f001 fb0f 	bl	8002f18 <blinky_displayTime>
			input_pass_num(pos);
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <input_pass+0xbc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff30 	bl	8001764 <input_pass_num>
			if (button_count[3] == 1){
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <input_pass+0xc0>)
 8001906:	88db      	ldrh	r3, [r3, #6]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d102      	bne.n	8001912 <input_pass+0x3a>
				pos = 1;
 800190c:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <input_pass+0xbc>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]
			if (button_count[7] == 1){
 8001912:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <input_pass+0xc0>)
 8001914:	89db      	ldrh	r3, [r3, #14]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d135      	bne.n	8001986 <input_pass+0xae>
				pos = 2;
 800191a:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <input_pass+0xbc>)
 800191c:	2202      	movs	r2, #2
 800191e:	601a      	str	r2, [r3, #0]
			break;
 8001920:	e031      	b.n	8001986 <input_pass+0xae>
			blinky_displayTime(2, 0);
 8001922:	2100      	movs	r1, #0
 8001924:	2002      	movs	r0, #2
 8001926:	f001 faf7 	bl	8002f18 <blinky_displayTime>
			input_pass_num(pos);
 800192a:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <input_pass+0xbc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff18 	bl	8001764 <input_pass_num>
			if (button_count[3] == 1){
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <input_pass+0xc0>)
 8001936:	88db      	ldrh	r3, [r3, #6]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d102      	bne.n	8001942 <input_pass+0x6a>
				pos = 2;
 800193c:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <input_pass+0xbc>)
 800193e:	2202      	movs	r2, #2
 8001940:	601a      	str	r2, [r3, #0]
			if (button_count[7] == 1){
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <input_pass+0xc0>)
 8001944:	89db      	ldrh	r3, [r3, #14]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d11f      	bne.n	800198a <input_pass+0xb2>
				pos = 0;
 800194a:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <input_pass+0xbc>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
			break;
 8001950:	e01b      	b.n	800198a <input_pass+0xb2>
			blinky_displayTime(3, 0);
 8001952:	2100      	movs	r1, #0
 8001954:	2003      	movs	r0, #3
 8001956:	f001 fadf 	bl	8002f18 <blinky_displayTime>
			input_pass_num(pos);
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <input_pass+0xbc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff00 	bl	8001764 <input_pass_num>
			if (button_count[3] == 1){
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <input_pass+0xc0>)
 8001966:	88db      	ldrh	r3, [r3, #6]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d102      	bne.n	8001972 <input_pass+0x9a>
				pos = 0;
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <input_pass+0xbc>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
			if (button_count[7] == 1){
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <input_pass+0xc0>)
 8001974:	89db      	ldrh	r3, [r3, #14]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d109      	bne.n	800198e <input_pass+0xb6>
				pos = 1;
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <input_pass+0xbc>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
			break;
 8001980:	e005      	b.n	800198e <input_pass+0xb6>
			break;
 8001982:	bf00      	nop
 8001984:	e004      	b.n	8001990 <input_pass+0xb8>
			break;
 8001986:	bf00      	nop
 8001988:	e002      	b.n	8001990 <input_pass+0xb8>
			break;
 800198a:	bf00      	nop
 800198c:	e000      	b.n	8001990 <input_pass+0xb8>
			break;
 800198e:	bf00      	nop
	}
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200001c4 	.word	0x200001c4
 8001998:	2000017c 	.word	0x2000017c

0800199c <check_time>:

void check_time(){
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
	if (tempHour > 24){
 80019a0:	4b48      	ldr	r3, [pc, #288]	@ (8001ac4 <check_time+0x128>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b18      	cmp	r3, #24
 80019a6:	dd02      	ble.n	80019ae <check_time+0x12>
		tempHour = 0;
 80019a8:	4b46      	ldr	r3, [pc, #280]	@ (8001ac4 <check_time+0x128>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
	}
	if (tempMin > 60){
 80019ae:	4b46      	ldr	r3, [pc, #280]	@ (8001ac8 <check_time+0x12c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80019b4:	dd02      	ble.n	80019bc <check_time+0x20>
		tempMin = 0;
 80019b6:	4b44      	ldr	r3, [pc, #272]	@ (8001ac8 <check_time+0x12c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
	}
	if (tempSec > 60){
 80019bc:	4b43      	ldr	r3, [pc, #268]	@ (8001acc <check_time+0x130>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b3c      	cmp	r3, #60	@ 0x3c
 80019c2:	dd02      	ble.n	80019ca <check_time+0x2e>
		tempSec = 0;
 80019c4:	4b41      	ldr	r3, [pc, #260]	@ (8001acc <check_time+0x130>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
	}
	if (tempDate > 31){
 80019ca:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <check_time+0x134>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b1f      	cmp	r3, #31
 80019d0:	dd02      	ble.n	80019d8 <check_time+0x3c>
		tempDate = 1;
 80019d2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad0 <check_time+0x134>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
	}
	if (tempMonth > 12){
 80019d8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad4 <check_time+0x138>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b0c      	cmp	r3, #12
 80019de:	dd02      	ble.n	80019e6 <check_time+0x4a>
		tempMonth = 1;
 80019e0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <check_time+0x138>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
	}
	if (tempDate == 31 && (tempMonth == 2 || tempMonth == 4 || tempMonth == 6 || tempMonth == 9 || tempMonth == 11)){
 80019e6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <check_time+0x134>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b1f      	cmp	r3, #31
 80019ec:	d11b      	bne.n	8001a26 <check_time+0x8a>
 80019ee:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <check_time+0x138>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d00f      	beq.n	8001a16 <check_time+0x7a>
 80019f6:	4b37      	ldr	r3, [pc, #220]	@ (8001ad4 <check_time+0x138>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d00b      	beq.n	8001a16 <check_time+0x7a>
 80019fe:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <check_time+0x138>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d007      	beq.n	8001a16 <check_time+0x7a>
 8001a06:	4b33      	ldr	r3, [pc, #204]	@ (8001ad4 <check_time+0x138>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b09      	cmp	r3, #9
 8001a0c:	d003      	beq.n	8001a16 <check_time+0x7a>
 8001a0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <check_time+0x138>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b0b      	cmp	r3, #11
 8001a14:	d107      	bne.n	8001a26 <check_time+0x8a>
		tempDate = 1;
 8001a16:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad0 <check_time+0x134>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
		tempMonth = tempMonth + 1;
 8001a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad4 <check_time+0x138>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad4 <check_time+0x138>)
 8001a24:	6013      	str	r3, [r2, #0]
	}
	if (tempDate == 30 && tempMonth == 2){
 8001a26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <check_time+0x134>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b1e      	cmp	r3, #30
 8001a2c:	d109      	bne.n	8001a42 <check_time+0xa6>
 8001a2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <check_time+0x138>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d105      	bne.n	8001a42 <check_time+0xa6>
		tempDate = 1;
 8001a36:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <check_time+0x134>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
		tempMonth = 3;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <check_time+0x138>)
 8001a3e:	2203      	movs	r2, #3
 8001a40:	601a      	str	r2, [r3, #0]
	}
	if (tempDate == 29 && tempMonth == 2 && ((tempYear % 4) != 0)){
 8001a42:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <check_time+0x134>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b1d      	cmp	r3, #29
 8001a48:	d10f      	bne.n	8001a6a <check_time+0xce>
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <check_time+0x138>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d10b      	bne.n	8001a6a <check_time+0xce>
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <check_time+0x13c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <check_time+0xce>
		tempDate = 1;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <check_time+0x134>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
		tempMonth = 3;
 8001a64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <check_time+0x138>)
 8001a66:	2203      	movs	r2, #3
 8001a68:	601a      	str	r2, [r3, #0]
	}
	if (tempDate > 31){
 8001a6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <check_time+0x134>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b1f      	cmp	r3, #31
 8001a70:	dd14      	ble.n	8001a9c <check_time+0x100>
		tempDate = 1;
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <check_time+0x134>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
		if (tempMonth == 12){
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <check_time+0x138>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	d108      	bne.n	8001a92 <check_time+0xf6>
			tempMonth = 1;
 8001a80:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <check_time+0x138>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
			tempYear = tempYear + 1;
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <check_time+0x13c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <check_time+0x13c>)
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e004      	b.n	8001a9c <check_time+0x100>
		}
		else {
			tempMonth = tempMonth + 1;
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <check_time+0x138>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad4 <check_time+0x138>)
 8001a9a:	6013      	str	r3, [r2, #0]
		}
	}
	tempYear = tempYear % 100;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <check_time+0x13c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <check_time+0x140>)
 8001aa2:	fb83 1302 	smull	r1, r3, r3, r2
 8001aa6:	1159      	asrs	r1, r3, #5
 8001aa8:	17d3      	asrs	r3, r2, #31
 8001aaa:	1acb      	subs	r3, r1, r3
 8001aac:	2164      	movs	r1, #100	@ 0x64
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	4a08      	ldr	r2, [pc, #32]	@ (8001ad8 <check_time+0x13c>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200001e8 	.word	0x200001e8
 8001ac8:	200001ec 	.word	0x200001ec
 8001acc:	200001f0 	.word	0x200001f0
 8001ad0:	200001f4 	.word	0x200001f4
 8001ad4:	200001f8 	.word	0x200001f8
 8001ad8:	200001fc 	.word	0x200001fc
 8001adc:	51eb851f 	.word	0x51eb851f

08001ae0 <update_pass>:

void update_pass(){
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++){
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	e00a      	b.n	8001b02 <update_pass+0x22>
		passCheck[i] = pass[i];
 8001aec:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <update_pass+0x38>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001af4:	4909      	ldr	r1, [pc, #36]	@ (8001b1c <update_pass+0x3c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 3; i++){
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	ddf1      	ble.n	8001aec <update_pass+0xc>
	}
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200001d4 	.word	0x200001d4
 8001b1c:	200001c8 	.word	0x200001c8

08001b20 <input_process>:

void input_process(){
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af04      	add	r7, sp, #16
	// quay tro ve trang thai init
	if (button_count[12] >= 20 && button_count[14] >= 20){
 8001b26:	4bb0      	ldr	r3, [pc, #704]	@ (8001de8 <input_process+0x2c8>)
 8001b28:	8b1b      	ldrh	r3, [r3, #24]
 8001b2a:	2b13      	cmp	r3, #19
 8001b2c:	d906      	bls.n	8001b3c <input_process+0x1c>
 8001b2e:	4bae      	ldr	r3, [pc, #696]	@ (8001de8 <input_process+0x2c8>)
 8001b30:	8b9b      	ldrh	r3, [r3, #28]
 8001b32:	2b13      	cmp	r3, #19
 8001b34:	d902      	bls.n	8001b3c <input_process+0x1c>
		status = INIT;
 8001b36:	4bad      	ldr	r3, [pc, #692]	@ (8001dec <input_process+0x2cc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
	}

	// xu ly dau vao trong cac trang thai khac
	switch (status) {
 8001b3c:	4bab      	ldr	r3, [pc, #684]	@ (8001dec <input_process+0x2cc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b42:	f200 8284 	bhi.w	800204e <input_process+0x52e>
 8001b46:	a201      	add	r2, pc, #4	@ (adr r2, 8001b4c <input_process+0x2c>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001bf9 	.word	0x08001bf9
 8001b50:	08001bf9 	.word	0x08001bf9
 8001b54:	08001c99 	.word	0x08001c99
 8001b58:	08001d45 	.word	0x08001d45
 8001b5c:	08001e21 	.word	0x08001e21
 8001b60:	0800204f 	.word	0x0800204f
 8001b64:	0800204f 	.word	0x0800204f
 8001b68:	0800204f 	.word	0x0800204f
 8001b6c:	0800204f 	.word	0x0800204f
 8001b70:	0800204f 	.word	0x0800204f
 8001b74:	0800204f 	.word	0x0800204f
 8001b78:	0800204f 	.word	0x0800204f
 8001b7c:	0800204f 	.word	0x0800204f
 8001b80:	0800204f 	.word	0x0800204f
 8001b84:	0800204f 	.word	0x0800204f
 8001b88:	0800204f 	.word	0x0800204f
 8001b8c:	0800204f 	.word	0x0800204f
 8001b90:	0800204f 	.word	0x0800204f
 8001b94:	0800204f 	.word	0x0800204f
 8001b98:	0800204f 	.word	0x0800204f
 8001b9c:	0800204f 	.word	0x0800204f
 8001ba0:	0800204f 	.word	0x0800204f
 8001ba4:	0800204f 	.word	0x0800204f
 8001ba8:	0800204f 	.word	0x0800204f
 8001bac:	0800204f 	.word	0x0800204f
 8001bb0:	0800204f 	.word	0x0800204f
 8001bb4:	0800204f 	.word	0x0800204f
 8001bb8:	0800204f 	.word	0x0800204f
 8001bbc:	0800204f 	.word	0x0800204f
 8001bc0:	0800204f 	.word	0x0800204f
 8001bc4:	0800204f 	.word	0x0800204f
 8001bc8:	0800204f 	.word	0x0800204f
 8001bcc:	0800204f 	.word	0x0800204f
 8001bd0:	0800204f 	.word	0x0800204f
 8001bd4:	0800204f 	.word	0x0800204f
 8001bd8:	0800204f 	.word	0x0800204f
 8001bdc:	0800204f 	.word	0x0800204f
 8001be0:	0800204f 	.word	0x0800204f
 8001be4:	0800204f 	.word	0x0800204f
 8001be8:	0800204f 	.word	0x0800204f
 8001bec:	0800204f 	.word	0x0800204f
 8001bf0:	08001fb5 	.word	0x08001fb5
 8001bf4:	08001f3f 	.word	0x08001f3f
		case INIT:
		case NORMAL:
			if (button_count[3] == 1 || is_touch_third()){
 8001bf8:	4b7b      	ldr	r3, [pc, #492]	@ (8001de8 <input_process+0x2c8>)
 8001bfa:	88db      	ldrh	r3, [r3, #6]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d004      	beq.n	8001c0a <input_process+0xea>
 8001c00:	f004 f8f0 	bl	8005de4 <is_touch_third>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d017      	beq.n	8001c3a <input_process+0x11a>
				if (confirm[0] == 1){
 8001c0a:	4b79      	ldr	r3, [pc, #484]	@ (8001df0 <input_process+0x2d0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10c      	bne.n	8001c2c <input_process+0x10c>
					status = ALARM;
 8001c12:	4b76      	ldr	r3, [pc, #472]	@ (8001dec <input_process+0x2cc>)
 8001c14:	2202      	movs	r2, #2
 8001c16:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001c18:	f7ff fd4c 	bl	80016b4 <clr_confirm>
					pos = 1;
 8001c1c:	4b75      	ldr	r3, [pc, #468]	@ (8001df4 <input_process+0x2d4>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
					update_change_time_state();
 8001c22:	f7ff fd61 	bl	80016e8 <update_change_time_state>
					alarm_lcd();
 8001c26:	f001 fb6f 	bl	8003308 <alarm_lcd>
 8001c2a:	e006      	b.n	8001c3a <input_process+0x11a>
				}
				else{
					clr_confirm();
 8001c2c:	f7ff fd42 	bl	80016b4 <clr_confirm>
					confirm[0] = 1;
 8001c30:	4b6f      	ldr	r3, [pc, #444]	@ (8001df0 <input_process+0x2d0>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
					home_third_lcd();
 8001c36:	f001 fcd1 	bl	80035dc <home_third_lcd>
				}
			}
			if (button_count[7] == 1 || is_touch_fouth()){
 8001c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8001de8 <input_process+0x2c8>)
 8001c3c:	89db      	ldrh	r3, [r3, #14]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d005      	beq.n	8001c4e <input_process+0x12e>
 8001c42:	f004 f8f1 	bl	8005e28 <is_touch_fouth>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8202 	beq.w	8002052 <input_process+0x532>
				if (confirm[1] == 1){
 8001c4e:	4b68      	ldr	r3, [pc, #416]	@ (8001df0 <input_process+0x2d0>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d118      	bne.n	8001c88 <input_process+0x168>
					status = CHECK;
 8001c56:	4b65      	ldr	r3, [pc, #404]	@ (8001dec <input_process+0x2cc>)
 8001c58:	2203      	movs	r2, #3
 8001c5a:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001c5c:	f7ff fd2a 	bl	80016b4 <clr_confirm>
					check_pass_lcd();
 8001c60:	f001 fc3a 	bl	80034d8 <check_pass_lcd>
					for (int i = 0; i < 3; i++){
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e007      	b.n	8001c7a <input_process+0x15a>
						pass[i] = 0;
 8001c6a:	4a63      	ldr	r2, [pc, #396]	@ (8001df8 <input_process+0x2d8>)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for (int i = 0; i < 3; i++){
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	ddf4      	ble.n	8001c6a <input_process+0x14a>
					}
					pos = 0;
 8001c80:	4b5c      	ldr	r3, [pc, #368]	@ (8001df4 <input_process+0x2d4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
					clr_confirm();
					confirm[1] = 1;
					home_forth_lcd();
				}
			}
			break;
 8001c86:	e1e4      	b.n	8002052 <input_process+0x532>
					clr_confirm();
 8001c88:	f7ff fd14 	bl	80016b4 <clr_confirm>
					confirm[1] = 1;
 8001c8c:	4b58      	ldr	r3, [pc, #352]	@ (8001df0 <input_process+0x2d0>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	605a      	str	r2, [r3, #4]
					home_forth_lcd();
 8001c92:	f001 fcbb 	bl	800360c <home_forth_lcd>
			break;
 8001c96:	e1dc      	b.n	8002052 <input_process+0x532>
		case ALARM:
			if (bool_key_touch == 0){
 8001c98:	4b58      	ldr	r3, [pc, #352]	@ (8001dfc <input_process+0x2dc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f040 81da 	bne.w	8002056 <input_process+0x536>
				if (button_count[13] == 1 || is_touch_third()){
 8001ca2:	4b51      	ldr	r3, [pc, #324]	@ (8001de8 <input_process+0x2c8>)
 8001ca4:	8b5b      	ldrh	r3, [r3, #26]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d004      	beq.n	8001cb4 <input_process+0x194>
 8001caa:	f004 f89b 	bl	8005de4 <is_touch_third>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d029      	beq.n	8001d08 <input_process+0x1e8>
					if (confirm[0] == 1){
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8001df0 <input_process+0x2d0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d11c      	bne.n	8001cf6 <input_process+0x1d6>
						clr_confirm();
 8001cbc:	f7ff fcfa 	bl	80016b4 <clr_confirm>
						alarm = 1;
 8001cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e00 <input_process+0x2e0>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
						updateTime_Alarm(tempHour, tempMin, tempSec, tempDate, tempMonth, tempYear);
 8001cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8001e04 <input_process+0x2e4>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	4b4f      	ldr	r3, [pc, #316]	@ (8001e08 <input_process+0x2e8>)
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	4b4f      	ldr	r3, [pc, #316]	@ (8001e0c <input_process+0x2ec>)
 8001cd0:	681c      	ldr	r4, [r3, #0]
 8001cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8001e10 <input_process+0x2f0>)
 8001cd4:	681d      	ldr	r5, [r3, #0]
 8001cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8001e14 <input_process+0x2f4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a4f      	ldr	r2, [pc, #316]	@ (8001e18 <input_process+0x2f8>)
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	9201      	str	r2, [sp, #4]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	462b      	mov	r3, r5
 8001ce4:	4622      	mov	r2, r4
 8001ce6:	f7ff fc70 	bl	80015ca <updateTime_Alarm>
						status = NORMAL;
 8001cea:	4b40      	ldr	r3, [pc, #256]	@ (8001dec <input_process+0x2cc>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
						home_lcd();
 8001cf0:	f001 fa44 	bl	800317c <home_lcd>
 8001cf4:	e008      	b.n	8001d08 <input_process+0x1e8>
					}
					else {
						clr_confirm();
 8001cf6:	f7ff fcdd 	bl	80016b4 <clr_confirm>
						check_time();
 8001cfa:	f7ff fe4f 	bl	800199c <check_time>
						confirm[0] = 1;
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8001df0 <input_process+0x2d0>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
						home_third_lcd();
 8001d04:	f001 fc6a 	bl	80035dc <home_third_lcd>
					}
				}
				if (button_count[14] == 1 || is_touch_fouth()){
 8001d08:	4b37      	ldr	r3, [pc, #220]	@ (8001de8 <input_process+0x2c8>)
 8001d0a:	8b9b      	ldrh	r3, [r3, #28]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d005      	beq.n	8001d1c <input_process+0x1fc>
 8001d10:	f004 f88a 	bl	8005e28 <is_touch_fouth>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 819d 	beq.w	8002056 <input_process+0x536>
					if (confirm[1] == 1){
 8001d1c:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <input_process+0x2d0>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d107      	bne.n	8001d34 <input_process+0x214>
						status = NORMAL;
 8001d24:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <input_process+0x2cc>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
						clr_confirm();
 8001d2a:	f7ff fcc3 	bl	80016b4 <clr_confirm>
						home_lcd();
 8001d2e:	f001 fa25 	bl	800317c <home_lcd>
						confirm[1] = 1;
						home_forth_lcd();
					}
				}
			}
			break;
 8001d32:	e190      	b.n	8002056 <input_process+0x536>
						clr_confirm();
 8001d34:	f7ff fcbe 	bl	80016b4 <clr_confirm>
						confirm[1] = 1;
 8001d38:	4b2d      	ldr	r3, [pc, #180]	@ (8001df0 <input_process+0x2d0>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	605a      	str	r2, [r3, #4]
						home_forth_lcd();
 8001d3e:	f001 fc65 	bl	800360c <home_forth_lcd>
			break;
 8001d42:	e188      	b.n	8002056 <input_process+0x536>
		case CHECK:
			if (button_count[12] == 1 || is_touch_third()){
 8001d44:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <input_process+0x2c8>)
 8001d46:	8b1b      	ldrh	r3, [r3, #24]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d004      	beq.n	8001d56 <input_process+0x236>
 8001d4c:	f004 f84a 	bl	8005de4 <is_touch_third>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d029      	beq.n	8001daa <input_process+0x28a>
				if (confirm[0] == 1){
 8001d56:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <input_process+0x2d0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <input_process+0x24e>
					status = SETTING;
 8001d5e:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <input_process+0x2cc>)
 8001d60:	2204      	movs	r2, #4
 8001d62:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001d64:	f7ff fca6 	bl	80016b4 <clr_confirm>
//					update_change_time_state();
//					alarm_lcd();
					setting_lcd();
 8001d68:	f001 fa60 	bl	800322c <setting_lcd>
 8001d6c:	e01d      	b.n	8001daa <input_process+0x28a>
				}
				else{
					if (pass[0] != passCheck[0] || pass[1] != passCheck[1] || pass[2] != passCheck[2]){
 8001d6e:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <input_process+0x2d8>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b2a      	ldr	r3, [pc, #168]	@ (8001e1c <input_process+0x2fc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d10b      	bne.n	8001d92 <input_process+0x272>
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <input_process+0x2d8>)
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <input_process+0x2fc>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d105      	bne.n	8001d92 <input_process+0x272>
 8001d86:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <input_process+0x2d8>)
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <input_process+0x2fc>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d004      	beq.n	8001d9c <input_process+0x27c>
						error_display();
 8001d92:	f001 f9af 	bl	80030f4 <error_display>
						clr_confirm();
 8001d96:	f7ff fc8d 	bl	80016b4 <clr_confirm>
 8001d9a:	e006      	b.n	8001daa <input_process+0x28a>
					}
					else {
						clr_confirm();
 8001d9c:	f7ff fc8a 	bl	80016b4 <clr_confirm>
						confirm[0] = 1;
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <input_process+0x2d0>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
						home_third_lcd();
 8001da6:	f001 fc19 	bl	80035dc <home_third_lcd>
					}
				}
			}
			if (button_count[14] == 1 || is_touch_fouth()){
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <input_process+0x2c8>)
 8001dac:	8b9b      	ldrh	r3, [r3, #28]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d005      	beq.n	8001dbe <input_process+0x29e>
 8001db2:	f004 f839 	bl	8005e28 <is_touch_fouth>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 814e 	beq.w	800205a <input_process+0x53a>
				if (confirm[1] == 1){
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <input_process+0x2d0>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <input_process+0x2b6>
					status = NORMAL;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <input_process+0x2cc>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001dcc:	f7ff fc72 	bl	80016b4 <clr_confirm>
					home_lcd();
 8001dd0:	f001 f9d4 	bl	800317c <home_lcd>
					clr_confirm();
					confirm[1] = 1;
					home_forth_lcd();
				}
			}
			break;
 8001dd4:	e141      	b.n	800205a <input_process+0x53a>
					clr_confirm();
 8001dd6:	f7ff fc6d 	bl	80016b4 <clr_confirm>
					confirm[1] = 1;
 8001dda:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <input_process+0x2d0>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	605a      	str	r2, [r3, #4]
					home_forth_lcd();
 8001de0:	f001 fc14 	bl	800360c <home_forth_lcd>
			break;
 8001de4:	e139      	b.n	800205a <input_process+0x53a>
 8001de6:	bf00      	nop
 8001de8:	2000017c 	.word	0x2000017c
 8001dec:	200001c0 	.word	0x200001c0
 8001df0:	20000200 	.word	0x20000200
 8001df4:	200001c4 	.word	0x200001c4
 8001df8:	200001d4 	.word	0x200001d4
 8001dfc:	2000040c 	.word	0x2000040c
 8001e00:	200001e4 	.word	0x200001e4
 8001e04:	200001e8 	.word	0x200001e8
 8001e08:	200001ec 	.word	0x200001ec
 8001e0c:	200001f0 	.word	0x200001f0
 8001e10:	200001f4 	.word	0x200001f4
 8001e14:	200001f8 	.word	0x200001f8
 8001e18:	200001fc 	.word	0x200001fc
 8001e1c:	200001c8 	.word	0x200001c8
		case SETTING:
			if (button_count[3] == 1 || is_touch_second()){
 8001e20:	4b93      	ldr	r3, [pc, #588]	@ (8002070 <input_process+0x550>)
 8001e22:	88db      	ldrh	r3, [r3, #6]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d004      	beq.n	8001e32 <input_process+0x312>
 8001e28:	f003 ffba 	bl	8005da0 <is_touch_second>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d017      	beq.n	8001e62 <input_process+0x342>
				if (confirm[0] == 1){
 8001e32:	4b90      	ldr	r3, [pc, #576]	@ (8002074 <input_process+0x554>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10c      	bne.n	8001e54 <input_process+0x334>
					status = TIMER;
 8001e3a:	4b8f      	ldr	r3, [pc, #572]	@ (8002078 <input_process+0x558>)
 8001e3c:	2229      	movs	r2, #41	@ 0x29
 8001e3e:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001e40:	f7ff fc38 	bl	80016b4 <clr_confirm>
					pos = 1;
 8001e44:	4b8d      	ldr	r3, [pc, #564]	@ (800207c <input_process+0x55c>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
					update_change_time_state();
 8001e4a:	f7ff fc4d 	bl	80016e8 <update_change_time_state>
					setTimer_lcd();
 8001e4e:	f001 facf 	bl	80033f0 <setTimer_lcd>
 8001e52:	e006      	b.n	8001e62 <input_process+0x342>
				}
				else{
					clr_confirm();
 8001e54:	f7ff fc2e 	bl	80016b4 <clr_confirm>
					confirm[0] = 1;
 8001e58:	4b86      	ldr	r3, [pc, #536]	@ (8002074 <input_process+0x554>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
					home_second_lcd();
 8001e5e:	f001 fba5 	bl	80035ac <home_second_lcd>
				}
			}
			if (button_count[7] == 1 || is_touch_third()){
 8001e62:	4b83      	ldr	r3, [pc, #524]	@ (8002070 <input_process+0x550>)
 8001e64:	89db      	ldrh	r3, [r3, #14]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d004      	beq.n	8001e74 <input_process+0x354>
 8001e6a:	f003 ffbb 	bl	8005de4 <is_touch_third>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d038      	beq.n	8001ee6 <input_process+0x3c6>
				if (confirm[1] == 1){
 8001e74:	4b7f      	ldr	r3, [pc, #508]	@ (8002074 <input_process+0x554>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d12d      	bne.n	8001ed8 <input_process+0x3b8>
					status = PASS;
 8001e7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002078 <input_process+0x558>)
 8001e7e:	222a      	movs	r2, #42	@ 0x2a
 8001e80:	601a      	str	r2, [r3, #0]
					pos = 0;
 8001e82:	4b7e      	ldr	r3, [pc, #504]	@ (800207c <input_process+0x55c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001e88:	f7ff fc14 	bl	80016b4 <clr_confirm>
					check_pass_lcd();
 8001e8c:	f001 fb24 	bl	80034d8 <check_pass_lcd>
					for (int i = 0; i < 3; i++){
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	e007      	b.n	8001ea6 <input_process+0x386>
						pass[i] = 0;
 8001e96:	4a7a      	ldr	r2, [pc, #488]	@ (8002080 <input_process+0x560>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for (int i = 0; i < 3; i++){
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	ddf4      	ble.n	8001e96 <input_process+0x376>
					}
					lcd_Fill(POS_X_FORTH, 10, POS_X_FORTH + WIDTH, 10 + HEIGHT, RED);
 8001eac:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	232d      	movs	r3, #45	@ 0x2d
 8001eb4:	22b9      	movs	r2, #185	@ 0xb9
 8001eb6:	210a      	movs	r1, #10
 8001eb8:	2041      	movs	r0, #65	@ 0x41
 8001eba:	f001 fdad 	bl	8003a18 <lcd_Fill>

					lcd_ShowStr(POS_X_FORTH + 10, 10 + 5, "SET PASS", BLACK, BLACK, 24, 1);
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	2318      	movs	r3, #24
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8002084 <input_process+0x564>)
 8001ece:	210f      	movs	r1, #15
 8001ed0:	204b      	movs	r0, #75	@ 0x4b
 8001ed2:	f002 fae5 	bl	80044a0 <lcd_ShowStr>
 8001ed6:	e006      	b.n	8001ee6 <input_process+0x3c6>
				}
				else{
					clr_confirm();
 8001ed8:	f7ff fbec 	bl	80016b4 <clr_confirm>
					confirm[1] = 1;
 8001edc:	4b65      	ldr	r3, [pc, #404]	@ (8002074 <input_process+0x554>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	605a      	str	r2, [r3, #4]
					home_third_lcd();
 8001ee2:	f001 fb7b 	bl	80035dc <home_third_lcd>
				}
			}
			if (button_count[11] == 1 || is_touch_fouth()){
 8001ee6:	4b62      	ldr	r3, [pc, #392]	@ (8002070 <input_process+0x550>)
 8001ee8:	8adb      	ldrh	r3, [r3, #22]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <input_process+0x3da>
 8001eee:	f003 ff9b 	bl	8005e28 <is_touch_fouth>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80b2 	beq.w	800205e <input_process+0x53e>
				if (confirm[2] == 1){
 8001efa:	4b5e      	ldr	r3, [pc, #376]	@ (8002074 <input_process+0x554>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d115      	bne.n	8001f2e <input_process+0x40e>
					status = NORMAL;
 8001f02:	4b5d      	ldr	r3, [pc, #372]	@ (8002078 <input_process+0x558>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001f08:	f7ff fbd4 	bl	80016b4 <clr_confirm>
					check_pass_lcd();
 8001f0c:	f001 fae4 	bl	80034d8 <check_pass_lcd>
					for (int i = 0; i < 3; i++){
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	e007      	b.n	8001f26 <input_process+0x406>
						pass[i] = 0;
 8001f16:	4a5a      	ldr	r2, [pc, #360]	@ (8002080 <input_process+0x560>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for (int i = 0; i < 3; i++){
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3301      	adds	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	ddf4      	ble.n	8001f16 <input_process+0x3f6>
					clr_confirm();
					confirm[2] = 1;
					home_forth_lcd();
				}
			}
			break;
 8001f2c:	e097      	b.n	800205e <input_process+0x53e>
					clr_confirm();
 8001f2e:	f7ff fbc1 	bl	80016b4 <clr_confirm>
					confirm[2] = 1;
 8001f32:	4b50      	ldr	r3, [pc, #320]	@ (8002074 <input_process+0x554>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	609a      	str	r2, [r3, #8]
					home_forth_lcd();
 8001f38:	f001 fb68 	bl	800360c <home_forth_lcd>
			break;
 8001f3c:	e08f      	b.n	800205e <input_process+0x53e>
		case PASS:
			if (button_count[12] == 1 || is_touch_third()){
 8001f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002070 <input_process+0x550>)
 8001f40:	8b1b      	ldrh	r3, [r3, #24]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d004      	beq.n	8001f50 <input_process+0x430>
 8001f46:	f003 ff4d 	bl	8005de4 <is_touch_third>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d014      	beq.n	8001f7a <input_process+0x45a>
				if (confirm[0] == 1){
 8001f50:	4b48      	ldr	r3, [pc, #288]	@ (8002074 <input_process+0x554>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d109      	bne.n	8001f6c <input_process+0x44c>
					status = SETTING;
 8001f58:	4b47      	ldr	r3, [pc, #284]	@ (8002078 <input_process+0x558>)
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001f5e:	f7ff fba9 	bl	80016b4 <clr_confirm>
					update_pass();
 8001f62:	f7ff fdbd 	bl	8001ae0 <update_pass>
					setting_lcd();
 8001f66:	f001 f961 	bl	800322c <setting_lcd>
 8001f6a:	e006      	b.n	8001f7a <input_process+0x45a>
				}
				else{
					clr_confirm();
 8001f6c:	f7ff fba2 	bl	80016b4 <clr_confirm>
					confirm[0] = 1;
 8001f70:	4b40      	ldr	r3, [pc, #256]	@ (8002074 <input_process+0x554>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
					home_third_lcd();
 8001f76:	f001 fb31 	bl	80035dc <home_third_lcd>
				}
			}
			if (button_count[14] == 1 || is_touch_fouth()){
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002070 <input_process+0x550>)
 8001f7c:	8b9b      	ldrh	r3, [r3, #28]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d004      	beq.n	8001f8c <input_process+0x46c>
 8001f82:	f003 ff51 	bl	8005e28 <is_touch_fouth>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d06a      	beq.n	8002062 <input_process+0x542>
				if (confirm[1] == 1){
 8001f8c:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <input_process+0x554>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d107      	bne.n	8001fa4 <input_process+0x484>
					status = NORMAL;
 8001f94:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <input_process+0x558>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001f9a:	f7ff fb8b 	bl	80016b4 <clr_confirm>
					home_lcd();
 8001f9e:	f001 f8ed 	bl	800317c <home_lcd>
					clr_confirm();
					confirm[1] = 1;
					home_forth_lcd();
				}
			}
			break;
 8001fa2:	e05e      	b.n	8002062 <input_process+0x542>
					clr_confirm();
 8001fa4:	f7ff fb86 	bl	80016b4 <clr_confirm>
					confirm[1] = 1;
 8001fa8:	4b32      	ldr	r3, [pc, #200]	@ (8002074 <input_process+0x554>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	605a      	str	r2, [r3, #4]
					home_forth_lcd();
 8001fae:	f001 fb2d 	bl	800360c <home_forth_lcd>
			break;
 8001fb2:	e056      	b.n	8002062 <input_process+0x542>
		case TIMER:
			if (button_count[13] == 1 || is_touch_third()){
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <input_process+0x550>)
 8001fb6:	8b5b      	ldrh	r3, [r3, #26]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d004      	beq.n	8001fc6 <input_process+0x4a6>
 8001fbc:	f003 ff12 	bl	8005de4 <is_touch_third>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d026      	beq.n	8002014 <input_process+0x4f4>
				if (confirm[0] == 1){
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002074 <input_process+0x554>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d119      	bne.n	8002002 <input_process+0x4e2>
					status = NORMAL;
 8001fce:	4b2a      	ldr	r3, [pc, #168]	@ (8002078 <input_process+0x558>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8001fd4:	f7ff fb6e 	bl	80016b4 <clr_confirm>
					updateTime(tempHour, tempMin, tempSec, tempDate, tempMonth, tempYear);
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <input_process+0x568>)
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <input_process+0x56c>)
 8001fde:	6819      	ldr	r1, [r3, #0]
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8002090 <input_process+0x570>)
 8001fe2:	681c      	ldr	r4, [r3, #0]
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <input_process+0x574>)
 8001fe6:	681d      	ldr	r5, [r3, #0]
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <input_process+0x578>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a2b      	ldr	r2, [pc, #172]	@ (800209c <input_process+0x57c>)
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	9201      	str	r2, [sp, #4]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	f7ff fab8 	bl	800156c <updateTime>
					home_lcd();
 8001ffc:	f001 f8be 	bl	800317c <home_lcd>
 8002000:	e008      	b.n	8002014 <input_process+0x4f4>
				}
				else{
					clr_confirm();
 8002002:	f7ff fb57 	bl	80016b4 <clr_confirm>
					check_time();
 8002006:	f7ff fcc9 	bl	800199c <check_time>
					confirm[0] = 1;
 800200a:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <input_process+0x554>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]
					home_third_lcd();
 8002010:	f001 fae4 	bl	80035dc <home_third_lcd>
				}
			}
			if (button_count[14] == 1 || is_touch_fouth()){
 8002014:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <input_process+0x550>)
 8002016:	8b9b      	ldrh	r3, [r3, #28]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d004      	beq.n	8002026 <input_process+0x506>
 800201c:	f003 ff04 	bl	8005e28 <is_touch_fouth>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01f      	beq.n	8002066 <input_process+0x546>
				if (confirm[1] == 1){
 8002026:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <input_process+0x554>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <input_process+0x51e>
					status = NORMAL;
 800202e:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <input_process+0x558>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]
					clr_confirm();
 8002034:	f7ff fb3e 	bl	80016b4 <clr_confirm>
					home_lcd();
 8002038:	f001 f8a0 	bl	800317c <home_lcd>
					clr_confirm();
					confirm[1] = 1;
					home_forth_lcd();
				}
			}
			break;
 800203c:	e013      	b.n	8002066 <input_process+0x546>
					clr_confirm();
 800203e:	f7ff fb39 	bl	80016b4 <clr_confirm>
					confirm[1] = 1;
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <input_process+0x554>)
 8002044:	2201      	movs	r2, #1
 8002046:	605a      	str	r2, [r3, #4]
					home_forth_lcd();
 8002048:	f001 fae0 	bl	800360c <home_forth_lcd>
			break;
 800204c:	e00b      	b.n	8002066 <input_process+0x546>
		default:
			break;
 800204e:	bf00      	nop
 8002050:	e00a      	b.n	8002068 <input_process+0x548>
			break;
 8002052:	bf00      	nop
 8002054:	e008      	b.n	8002068 <input_process+0x548>
			break;
 8002056:	bf00      	nop
 8002058:	e006      	b.n	8002068 <input_process+0x548>
			break;
 800205a:	bf00      	nop
 800205c:	e004      	b.n	8002068 <input_process+0x548>
			break;
 800205e:	bf00      	nop
 8002060:	e002      	b.n	8002068 <input_process+0x548>
			break;
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <input_process+0x548>
			break;
 8002066:	bf00      	nop
	}
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}
 8002070:	2000017c 	.word	0x2000017c
 8002074:	20000200 	.word	0x20000200
 8002078:	200001c0 	.word	0x200001c0
 800207c:	200001c4 	.word	0x200001c4
 8002080:	200001d4 	.word	0x200001d4
 8002084:	0800cb58 	.word	0x0800cb58
 8002088:	200001e8 	.word	0x200001e8
 800208c:	200001ec 	.word	0x200001ec
 8002090:	200001f0 	.word	0x200001f0
 8002094:	200001f4 	.word	0x200001f4
 8002098:	200001f8 	.word	0x200001f8
 800209c:	200001fc 	.word	0x200001fc

080020a0 <check_inc_min>:

void check_inc_min(){
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af02      	add	r7, sp, #8
	tempMin = ds3231_min_alarm;
 80020a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002154 <check_inc_min+0xb4>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <check_inc_min+0xb8>)
 80020ae:	601a      	str	r2, [r3, #0]
	tempHour = ds3231_hours_alarm;
 80020b0:	4b2a      	ldr	r3, [pc, #168]	@ (800215c <check_inc_min+0xbc>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <check_inc_min+0xc0>)
 80020b8:	601a      	str	r2, [r3, #0]
	tempDate = ds3231_date_alarm;
 80020ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <check_inc_min+0xc4>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	4b29      	ldr	r3, [pc, #164]	@ (8002168 <check_inc_min+0xc8>)
 80020c2:	601a      	str	r2, [r3, #0]
	tempDate = ds3231_date_alarm;
 80020c4:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <check_inc_min+0xc4>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <check_inc_min+0xc8>)
 80020cc:	601a      	str	r2, [r3, #0]
	tempMonth = ds3231_month_alarm;
 80020ce:	4b27      	ldr	r3, [pc, #156]	@ (800216c <check_inc_min+0xcc>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <check_inc_min+0xd0>)
 80020d6:	601a      	str	r2, [r3, #0]
	tempYear = ds3231_year_alarm;
 80020d8:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <check_inc_min+0xd4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <check_inc_min+0xd8>)
 80020e0:	601a      	str	r2, [r3, #0]

	tempMin = tempMin + 4;
 80020e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <check_inc_min+0xb8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3304      	adds	r3, #4
 80020e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002158 <check_inc_min+0xb8>)
 80020ea:	6013      	str	r3, [r2, #0]
	if (tempMin >= 60){
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <check_inc_min+0xb8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b3b      	cmp	r3, #59	@ 0x3b
 80020f2:	dd19      	ble.n	8002128 <check_inc_min+0x88>
		tempMin = tempMin - 60;
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <check_inc_min+0xb8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3b3c      	subs	r3, #60	@ 0x3c
 80020fa:	4a17      	ldr	r2, [pc, #92]	@ (8002158 <check_inc_min+0xb8>)
 80020fc:	6013      	str	r3, [r2, #0]
		tempHour = tempHour + 1;
 80020fe:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <check_inc_min+0xc0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a16      	ldr	r2, [pc, #88]	@ (8002160 <check_inc_min+0xc0>)
 8002106:	6013      	str	r3, [r2, #0]
		if (tempHour >= 24){
 8002108:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <check_inc_min+0xc0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b17      	cmp	r3, #23
 800210e:	dd0b      	ble.n	8002128 <check_inc_min+0x88>
			tempHour = tempHour - 24;
 8002110:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <check_inc_min+0xc0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3b18      	subs	r3, #24
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <check_inc_min+0xc0>)
 8002118:	6013      	str	r3, [r2, #0]
			tempDate = tempDate + 1;
 800211a:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <check_inc_min+0xc8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <check_inc_min+0xc8>)
 8002122:	6013      	str	r3, [r2, #0]
			check_time();
 8002124:	f7ff fc3a 	bl	800199c <check_time>
		}
	}
	updateTime_Alarm(tempHour, tempMin, tempSec, tempDate, tempMonth, tempYear);
 8002128:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <check_inc_min+0xc0>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <check_inc_min+0xb8>)
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <check_inc_min+0xdc>)
 8002132:	681c      	ldr	r4, [r3, #0]
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <check_inc_min+0xc8>)
 8002136:	681d      	ldr	r5, [r3, #0]
 8002138:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <check_inc_min+0xd0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0e      	ldr	r2, [pc, #56]	@ (8002178 <check_inc_min+0xd8>)
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	9201      	str	r2, [sp, #4]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	462b      	mov	r3, r5
 8002146:	4622      	mov	r2, r4
 8002148:	f7ff fa3f 	bl	80015ca <updateTime_Alarm>
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	bf00      	nop
 8002154:	200001b7 	.word	0x200001b7
 8002158:	200001ec 	.word	0x200001ec
 800215c:	200001b6 	.word	0x200001b6
 8002160:	200001e8 	.word	0x200001e8
 8002164:	200001b9 	.word	0x200001b9
 8002168:	200001f4 	.word	0x200001f4
 800216c:	200001bb 	.word	0x200001bb
 8002170:	200001f8 	.word	0x200001f8
 8002174:	200001bc 	.word	0x200001bc
 8002178:	200001fc 	.word	0x200001fc
 800217c:	200001f0 	.word	0x200001f0

08002180 <check_alarm_over>:

void check_alarm_over(){
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	if (offAlarm > 0){
 8002184:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <check_alarm_over+0xb8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	dd3e      	ble.n	800220a <check_alarm_over+0x8a>
		if (button_count[0] == 1 || is_touch_off_alarm() == 1){
 800218c:	4b2b      	ldr	r3, [pc, #172]	@ (800223c <check_alarm_over+0xbc>)
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d004      	beq.n	800219e <check_alarm_over+0x1e>
 8002194:	f003 ff9a 	bl	80060cc <is_touch_off_alarm>
 8002198:	4603      	mov	r3, r0
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10b      	bne.n	80021b6 <check_alarm_over+0x36>
			offAlarm = 0;
 800219e:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <check_alarm_over+0xb8>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
			alarm = 0;
 80021a4:	4b26      	ldr	r3, [pc, #152]	@ (8002240 <check_alarm_over+0xc0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
			buzzer_SetVolume(0);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff f852 	bl	8001254 <buzzer_SetVolume>
			alarm_clear();
 80021b0:	f000 ff90 	bl	80030d4 <alarm_clear>
 80021b4:	e029      	b.n	800220a <check_alarm_over+0x8a>
		}
		else if (offAlarm < 1000){
 80021b6:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <check_alarm_over+0xb8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021be:	da1a      	bge.n	80021f6 <check_alarm_over+0x76>
			offAlarm++;
 80021c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <check_alarm_over+0xb8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <check_alarm_over+0xb8>)
 80021c8:	6013      	str	r3, [r2, #0]
			buzzer_SetVolume((5*offAlarm)%100);
 80021ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <check_alarm_over+0xb8>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <check_alarm_over+0xc4>)
 80021d6:	fb82 1203 	smull	r1, r2, r2, r3
 80021da:	1151      	asrs	r1, r2, #5
 80021dc:	17da      	asrs	r2, r3, #31
 80021de:	1a8a      	subs	r2, r1, r2
 80021e0:	2164      	movs	r1, #100	@ 0x64
 80021e2:	fb01 f202 	mul.w	r2, r1, r2
 80021e6:	1a9a      	subs	r2, r3, r2
 80021e8:	b2d3      	uxtb	r3, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f832 	bl	8001254 <buzzer_SetVolume>
			alarm_display();
 80021f0:	f000 ff9e 	bl	8003130 <alarm_display>
 80021f4:	e009      	b.n	800220a <check_alarm_over+0x8a>
		}
		else {
			offAlarm = 0;
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <check_alarm_over+0xb8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
			buzzer_SetVolume(0);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff f829 	bl	8001254 <buzzer_SetVolume>
			alarm_clear();
 8002202:	f000 ff67 	bl	80030d4 <alarm_clear>
			check_inc_min();
 8002206:	f7ff ff4b 	bl	80020a0 <check_inc_min>
		}
	}
	if (check_alarm() == 1){
 800220a:	f7ff fa0d 	bl	8001628 <check_alarm>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10e      	bne.n	8002232 <check_alarm_over+0xb2>
		offAlarm = 1;
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <check_alarm_over+0xb8>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
		buzzer_SetVolume(5*offAlarm);
 800221a:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <check_alarm_over+0xb8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4413      	add	r3, r2
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f813 	bl	8001254 <buzzer_SetVolume>
		alarm_display();
 800222e:	f000 ff7f 	bl	8003130 <alarm_display>
	}
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200001e0 	.word	0x200001e0
 800223c:	2000017c 	.word	0x2000017c
 8002240:	200001e4 	.word	0x200001e4
 8002244:	51eb851f 	.word	0x51eb851f

08002248 <process_time>:

void process_time(){
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	touch_change_pos_time();
 800224c:	f003 fedc 	bl	8006008 <touch_change_pos_time>
	if (bool_key_touch != 0){
 8002250:	4b85      	ldr	r3, [pc, #532]	@ (8002468 <process_time+0x220>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <process_time+0x14>
		touch_key();
 8002258:	f004 f9e4 	bl	8006624 <touch_key>
	}
	switch (pos) {
 800225c:	4b83      	ldr	r3, [pc, #524]	@ (800246c <process_time+0x224>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3b01      	subs	r3, #1
 8002262:	2b05      	cmp	r3, #5
 8002264:	f200 8184 	bhi.w	8002570 <process_time+0x328>
 8002268:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <process_time+0x28>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	08002289 	.word	0x08002289
 8002274:	08002301 	.word	0x08002301
 8002278:	08002379 	.word	0x08002379
 800227c:	080023f1 	.word	0x080023f1
 8002280:	08002485 	.word	0x08002485
 8002284:	080024fb 	.word	0x080024fb
		case 1:
			blinky_displayTime(1, 1);
 8002288:	2101      	movs	r1, #1
 800228a:	2001      	movs	r0, #1
 800228c:	f000 fe44 	bl	8002f18 <blinky_displayTime>
			if (button_count[3] == 1 || button_count[3] > 20){
 8002290:	4b77      	ldr	r3, [pc, #476]	@ (8002470 <process_time+0x228>)
 8002292:	88db      	ldrh	r3, [r3, #6]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d003      	beq.n	80022a0 <process_time+0x58>
 8002298:	4b75      	ldr	r3, [pc, #468]	@ (8002470 <process_time+0x228>)
 800229a:	88db      	ldrh	r3, [r3, #6]
 800229c:	2b14      	cmp	r3, #20
 800229e:	d90b      	bls.n	80022b8 <process_time+0x70>
				tempHour++;
 80022a0:	4b74      	ldr	r3, [pc, #464]	@ (8002474 <process_time+0x22c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	4a73      	ldr	r2, [pc, #460]	@ (8002474 <process_time+0x22c>)
 80022a8:	6013      	str	r3, [r2, #0]
				if (tempHour >= 24){
 80022aa:	4b72      	ldr	r3, [pc, #456]	@ (8002474 <process_time+0x22c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b17      	cmp	r3, #23
 80022b0:	dd02      	ble.n	80022b8 <process_time+0x70>
					tempHour = 0;
 80022b2:	4b70      	ldr	r3, [pc, #448]	@ (8002474 <process_time+0x22c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[7] == 1 || button_count[7] > 20){
 80022b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002470 <process_time+0x228>)
 80022ba:	89db      	ldrh	r3, [r3, #14]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d003      	beq.n	80022c8 <process_time+0x80>
 80022c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002470 <process_time+0x228>)
 80022c2:	89db      	ldrh	r3, [r3, #14]
 80022c4:	2b14      	cmp	r3, #20
 80022c6:	d90b      	bls.n	80022e0 <process_time+0x98>
				tempHour--;
 80022c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002474 <process_time+0x22c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	4a69      	ldr	r2, [pc, #420]	@ (8002474 <process_time+0x22c>)
 80022d0:	6013      	str	r3, [r2, #0]
				if (tempHour < 0){
 80022d2:	4b68      	ldr	r3, [pc, #416]	@ (8002474 <process_time+0x22c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	da02      	bge.n	80022e0 <process_time+0x98>
					tempHour = 23;
 80022da:	4b66      	ldr	r3, [pc, #408]	@ (8002474 <process_time+0x22c>)
 80022dc:	2217      	movs	r2, #23
 80022de:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[11] == 1){
 80022e0:	4b63      	ldr	r3, [pc, #396]	@ (8002470 <process_time+0x228>)
 80022e2:	8adb      	ldrh	r3, [r3, #22]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d102      	bne.n	80022ee <process_time+0xa6>
				pos = 2;
 80022e8:	4b60      	ldr	r3, [pc, #384]	@ (800246c <process_time+0x224>)
 80022ea:	2202      	movs	r2, #2
 80022ec:	601a      	str	r2, [r3, #0]
			}
			if (button_count[15] == 1){
 80022ee:	4b60      	ldr	r3, [pc, #384]	@ (8002470 <process_time+0x228>)
 80022f0:	8bdb      	ldrh	r3, [r3, #30]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	f040 813e 	bne.w	8002574 <process_time+0x32c>
				pos = 6;
 80022f8:	4b5c      	ldr	r3, [pc, #368]	@ (800246c <process_time+0x224>)
 80022fa:	2206      	movs	r2, #6
 80022fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80022fe:	e139      	b.n	8002574 <process_time+0x32c>
		case 2:
			blinky_displayTime(2, 1);
 8002300:	2101      	movs	r1, #1
 8002302:	2002      	movs	r0, #2
 8002304:	f000 fe08 	bl	8002f18 <blinky_displayTime>
			if (button_count[3] == 1 || button_count[3] > 20){
 8002308:	4b59      	ldr	r3, [pc, #356]	@ (8002470 <process_time+0x228>)
 800230a:	88db      	ldrh	r3, [r3, #6]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d003      	beq.n	8002318 <process_time+0xd0>
 8002310:	4b57      	ldr	r3, [pc, #348]	@ (8002470 <process_time+0x228>)
 8002312:	88db      	ldrh	r3, [r3, #6]
 8002314:	2b14      	cmp	r3, #20
 8002316:	d90b      	bls.n	8002330 <process_time+0xe8>
				tempMin++;
 8002318:	4b57      	ldr	r3, [pc, #348]	@ (8002478 <process_time+0x230>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	4a56      	ldr	r2, [pc, #344]	@ (8002478 <process_time+0x230>)
 8002320:	6013      	str	r3, [r2, #0]
				if (tempMin >= 60){
 8002322:	4b55      	ldr	r3, [pc, #340]	@ (8002478 <process_time+0x230>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b3b      	cmp	r3, #59	@ 0x3b
 8002328:	dd02      	ble.n	8002330 <process_time+0xe8>
					tempMin = 0;
 800232a:	4b53      	ldr	r3, [pc, #332]	@ (8002478 <process_time+0x230>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[7] == 1 || button_count[7] > 20){
 8002330:	4b4f      	ldr	r3, [pc, #316]	@ (8002470 <process_time+0x228>)
 8002332:	89db      	ldrh	r3, [r3, #14]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d003      	beq.n	8002340 <process_time+0xf8>
 8002338:	4b4d      	ldr	r3, [pc, #308]	@ (8002470 <process_time+0x228>)
 800233a:	89db      	ldrh	r3, [r3, #14]
 800233c:	2b14      	cmp	r3, #20
 800233e:	d90b      	bls.n	8002358 <process_time+0x110>
				tempMin--;
 8002340:	4b4d      	ldr	r3, [pc, #308]	@ (8002478 <process_time+0x230>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3b01      	subs	r3, #1
 8002346:	4a4c      	ldr	r2, [pc, #304]	@ (8002478 <process_time+0x230>)
 8002348:	6013      	str	r3, [r2, #0]
				if (tempMin < 0){
 800234a:	4b4b      	ldr	r3, [pc, #300]	@ (8002478 <process_time+0x230>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	da02      	bge.n	8002358 <process_time+0x110>
					tempMin = 59;
 8002352:	4b49      	ldr	r3, [pc, #292]	@ (8002478 <process_time+0x230>)
 8002354:	223b      	movs	r2, #59	@ 0x3b
 8002356:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[11] == 1){
 8002358:	4b45      	ldr	r3, [pc, #276]	@ (8002470 <process_time+0x228>)
 800235a:	8adb      	ldrh	r3, [r3, #22]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d102      	bne.n	8002366 <process_time+0x11e>
				pos = 3;
 8002360:	4b42      	ldr	r3, [pc, #264]	@ (800246c <process_time+0x224>)
 8002362:	2203      	movs	r2, #3
 8002364:	601a      	str	r2, [r3, #0]
			}
			if (button_count[15] == 1){
 8002366:	4b42      	ldr	r3, [pc, #264]	@ (8002470 <process_time+0x228>)
 8002368:	8bdb      	ldrh	r3, [r3, #30]
 800236a:	2b01      	cmp	r3, #1
 800236c:	f040 8104 	bne.w	8002578 <process_time+0x330>
				pos = 1;
 8002370:	4b3e      	ldr	r3, [pc, #248]	@ (800246c <process_time+0x224>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
			}
			break;
 8002376:	e0ff      	b.n	8002578 <process_time+0x330>
		case 3:
			blinky_displayTime(3, 1);
 8002378:	2101      	movs	r1, #1
 800237a:	2003      	movs	r0, #3
 800237c:	f000 fdcc 	bl	8002f18 <blinky_displayTime>
			if (button_count[3] == 1 || button_count[3] > 20){
 8002380:	4b3b      	ldr	r3, [pc, #236]	@ (8002470 <process_time+0x228>)
 8002382:	88db      	ldrh	r3, [r3, #6]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d003      	beq.n	8002390 <process_time+0x148>
 8002388:	4b39      	ldr	r3, [pc, #228]	@ (8002470 <process_time+0x228>)
 800238a:	88db      	ldrh	r3, [r3, #6]
 800238c:	2b14      	cmp	r3, #20
 800238e:	d90b      	bls.n	80023a8 <process_time+0x160>
				tempSec++;
 8002390:	4b3a      	ldr	r3, [pc, #232]	@ (800247c <process_time+0x234>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	4a39      	ldr	r2, [pc, #228]	@ (800247c <process_time+0x234>)
 8002398:	6013      	str	r3, [r2, #0]
				if (tempSec >= 60){
 800239a:	4b38      	ldr	r3, [pc, #224]	@ (800247c <process_time+0x234>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b3b      	cmp	r3, #59	@ 0x3b
 80023a0:	dd02      	ble.n	80023a8 <process_time+0x160>
					tempSec = 0;
 80023a2:	4b36      	ldr	r3, [pc, #216]	@ (800247c <process_time+0x234>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[7] == 1 || button_count[7] > 20){
 80023a8:	4b31      	ldr	r3, [pc, #196]	@ (8002470 <process_time+0x228>)
 80023aa:	89db      	ldrh	r3, [r3, #14]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d003      	beq.n	80023b8 <process_time+0x170>
 80023b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <process_time+0x228>)
 80023b2:	89db      	ldrh	r3, [r3, #14]
 80023b4:	2b14      	cmp	r3, #20
 80023b6:	d90b      	bls.n	80023d0 <process_time+0x188>
				tempSec--;
 80023b8:	4b30      	ldr	r3, [pc, #192]	@ (800247c <process_time+0x234>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3b01      	subs	r3, #1
 80023be:	4a2f      	ldr	r2, [pc, #188]	@ (800247c <process_time+0x234>)
 80023c0:	6013      	str	r3, [r2, #0]
				if (tempSec < 0){
 80023c2:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <process_time+0x234>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	da02      	bge.n	80023d0 <process_time+0x188>
					tempSec = 59;
 80023ca:	4b2c      	ldr	r3, [pc, #176]	@ (800247c <process_time+0x234>)
 80023cc:	223b      	movs	r2, #59	@ 0x3b
 80023ce:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[11] == 1){
 80023d0:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <process_time+0x228>)
 80023d2:	8adb      	ldrh	r3, [r3, #22]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <process_time+0x196>
				pos = 4;
 80023d8:	4b24      	ldr	r3, [pc, #144]	@ (800246c <process_time+0x224>)
 80023da:	2204      	movs	r2, #4
 80023dc:	601a      	str	r2, [r3, #0]
			}
			if (button_count[15] == 1){
 80023de:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <process_time+0x228>)
 80023e0:	8bdb      	ldrh	r3, [r3, #30]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	f040 80ca 	bne.w	800257c <process_time+0x334>
				pos = 2;
 80023e8:	4b20      	ldr	r3, [pc, #128]	@ (800246c <process_time+0x224>)
 80023ea:	2202      	movs	r2, #2
 80023ec:	601a      	str	r2, [r3, #0]
			}
			break;
 80023ee:	e0c5      	b.n	800257c <process_time+0x334>
		case 4:
			blinky_displayTime(4, 1);
 80023f0:	2101      	movs	r1, #1
 80023f2:	2004      	movs	r0, #4
 80023f4:	f000 fd90 	bl	8002f18 <blinky_displayTime>
			if (button_count[3] == 1 || button_count[3] > 20){
 80023f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <process_time+0x228>)
 80023fa:	88db      	ldrh	r3, [r3, #6]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d003      	beq.n	8002408 <process_time+0x1c0>
 8002400:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <process_time+0x228>)
 8002402:	88db      	ldrh	r3, [r3, #6]
 8002404:	2b14      	cmp	r3, #20
 8002406:	d90b      	bls.n	8002420 <process_time+0x1d8>
				tempDate++;
 8002408:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <process_time+0x238>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	4a1c      	ldr	r2, [pc, #112]	@ (8002480 <process_time+0x238>)
 8002410:	6013      	str	r3, [r2, #0]
				if (tempDate > 31){
 8002412:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <process_time+0x238>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b1f      	cmp	r3, #31
 8002418:	dd02      	ble.n	8002420 <process_time+0x1d8>
					tempDate = 1;
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <process_time+0x238>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[7] == 1 || button_count[7] > 20){
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <process_time+0x228>)
 8002422:	89db      	ldrh	r3, [r3, #14]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d003      	beq.n	8002430 <process_time+0x1e8>
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <process_time+0x228>)
 800242a:	89db      	ldrh	r3, [r3, #14]
 800242c:	2b14      	cmp	r3, #20
 800242e:	d90b      	bls.n	8002448 <process_time+0x200>
				tempDate--;
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <process_time+0x238>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3b01      	subs	r3, #1
 8002436:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <process_time+0x238>)
 8002438:	6013      	str	r3, [r2, #0]
				if (tempDate <= 0){
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <process_time+0x238>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	dc02      	bgt.n	8002448 <process_time+0x200>
					tempDate = 1;
 8002442:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <process_time+0x238>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[11] == 1){
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <process_time+0x228>)
 800244a:	8adb      	ldrh	r3, [r3, #22]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d102      	bne.n	8002456 <process_time+0x20e>
				pos = 5;
 8002450:	4b06      	ldr	r3, [pc, #24]	@ (800246c <process_time+0x224>)
 8002452:	2205      	movs	r2, #5
 8002454:	601a      	str	r2, [r3, #0]
			}
			if (button_count[15] == 1){
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <process_time+0x228>)
 8002458:	8bdb      	ldrh	r3, [r3, #30]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 8090 	bne.w	8002580 <process_time+0x338>
				pos = 3;
 8002460:	4b02      	ldr	r3, [pc, #8]	@ (800246c <process_time+0x224>)
 8002462:	2203      	movs	r2, #3
 8002464:	601a      	str	r2, [r3, #0]
			}
			break;
 8002466:	e08b      	b.n	8002580 <process_time+0x338>
 8002468:	2000040c 	.word	0x2000040c
 800246c:	200001c4 	.word	0x200001c4
 8002470:	2000017c 	.word	0x2000017c
 8002474:	200001e8 	.word	0x200001e8
 8002478:	200001ec 	.word	0x200001ec
 800247c:	200001f0 	.word	0x200001f0
 8002480:	200001f4 	.word	0x200001f4
		case 5:
			blinky_displayTime(5, 1);
 8002484:	2101      	movs	r1, #1
 8002486:	2005      	movs	r0, #5
 8002488:	f000 fd46 	bl	8002f18 <blinky_displayTime>
			if (button_count[3] == 1 || button_count[3] > 20){
 800248c:	4b40      	ldr	r3, [pc, #256]	@ (8002590 <process_time+0x348>)
 800248e:	88db      	ldrh	r3, [r3, #6]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d003      	beq.n	800249c <process_time+0x254>
 8002494:	4b3e      	ldr	r3, [pc, #248]	@ (8002590 <process_time+0x348>)
 8002496:	88db      	ldrh	r3, [r3, #6]
 8002498:	2b14      	cmp	r3, #20
 800249a:	d90b      	bls.n	80024b4 <process_time+0x26c>
				tempMonth++;
 800249c:	4b3d      	ldr	r3, [pc, #244]	@ (8002594 <process_time+0x34c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	4a3c      	ldr	r2, [pc, #240]	@ (8002594 <process_time+0x34c>)
 80024a4:	6013      	str	r3, [r2, #0]
				if (tempMonth > 12){
 80024a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <process_time+0x34c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	dd02      	ble.n	80024b4 <process_time+0x26c>
					tempMonth = 1;
 80024ae:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <process_time+0x34c>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[7] == 1 || button_count[7] > 20){
 80024b4:	4b36      	ldr	r3, [pc, #216]	@ (8002590 <process_time+0x348>)
 80024b6:	89db      	ldrh	r3, [r3, #14]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d003      	beq.n	80024c4 <process_time+0x27c>
 80024bc:	4b34      	ldr	r3, [pc, #208]	@ (8002590 <process_time+0x348>)
 80024be:	89db      	ldrh	r3, [r3, #14]
 80024c0:	2b14      	cmp	r3, #20
 80024c2:	d90b      	bls.n	80024dc <process_time+0x294>
				tempMonth--;
 80024c4:	4b33      	ldr	r3, [pc, #204]	@ (8002594 <process_time+0x34c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	4a32      	ldr	r2, [pc, #200]	@ (8002594 <process_time+0x34c>)
 80024cc:	6013      	str	r3, [r2, #0]
				if (tempMonth < 1){
 80024ce:	4b31      	ldr	r3, [pc, #196]	@ (8002594 <process_time+0x34c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	dc02      	bgt.n	80024dc <process_time+0x294>
					tempMonth = 1;
 80024d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002594 <process_time+0x34c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[11] == 1){
 80024dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002590 <process_time+0x348>)
 80024de:	8adb      	ldrh	r3, [r3, #22]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d102      	bne.n	80024ea <process_time+0x2a2>
				pos = 6;
 80024e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002598 <process_time+0x350>)
 80024e6:	2206      	movs	r2, #6
 80024e8:	601a      	str	r2, [r3, #0]
			}
			if (button_count[15] == 1){
 80024ea:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <process_time+0x348>)
 80024ec:	8bdb      	ldrh	r3, [r3, #30]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d148      	bne.n	8002584 <process_time+0x33c>
				pos = 4;
 80024f2:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <process_time+0x350>)
 80024f4:	2204      	movs	r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
			}
			break;
 80024f8:	e044      	b.n	8002584 <process_time+0x33c>
		case 6:
			blinky_displayTime(6, 1);
 80024fa:	2101      	movs	r1, #1
 80024fc:	2006      	movs	r0, #6
 80024fe:	f000 fd0b 	bl	8002f18 <blinky_displayTime>
			if (button_count[3] == 1 || button_count[3] > 20){
 8002502:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <process_time+0x348>)
 8002504:	88db      	ldrh	r3, [r3, #6]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d003      	beq.n	8002512 <process_time+0x2ca>
 800250a:	4b21      	ldr	r3, [pc, #132]	@ (8002590 <process_time+0x348>)
 800250c:	88db      	ldrh	r3, [r3, #6]
 800250e:	2b14      	cmp	r3, #20
 8002510:	d90b      	bls.n	800252a <process_time+0x2e2>
				tempYear++;
 8002512:	4b22      	ldr	r3, [pc, #136]	@ (800259c <process_time+0x354>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	4a20      	ldr	r2, [pc, #128]	@ (800259c <process_time+0x354>)
 800251a:	6013      	str	r3, [r2, #0]
				if (tempYear > 99){
 800251c:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <process_time+0x354>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b63      	cmp	r3, #99	@ 0x63
 8002522:	dd02      	ble.n	800252a <process_time+0x2e2>
					tempYear = 0;
 8002524:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <process_time+0x354>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[7] == 1 || button_count[7] > 20){
 800252a:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <process_time+0x348>)
 800252c:	89db      	ldrh	r3, [r3, #14]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d003      	beq.n	800253a <process_time+0x2f2>
 8002532:	4b17      	ldr	r3, [pc, #92]	@ (8002590 <process_time+0x348>)
 8002534:	89db      	ldrh	r3, [r3, #14]
 8002536:	2b14      	cmp	r3, #20
 8002538:	d90b      	bls.n	8002552 <process_time+0x30a>
				tempYear--;
 800253a:	4b18      	ldr	r3, [pc, #96]	@ (800259c <process_time+0x354>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3b01      	subs	r3, #1
 8002540:	4a16      	ldr	r2, [pc, #88]	@ (800259c <process_time+0x354>)
 8002542:	6013      	str	r3, [r2, #0]
				if (tempYear < 0){
 8002544:	4b15      	ldr	r3, [pc, #84]	@ (800259c <process_time+0x354>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	da02      	bge.n	8002552 <process_time+0x30a>
					tempYear = 0;
 800254c:	4b13      	ldr	r3, [pc, #76]	@ (800259c <process_time+0x354>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
				}
			}
			if (button_count[11] == 1){
 8002552:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <process_time+0x348>)
 8002554:	8adb      	ldrh	r3, [r3, #22]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <process_time+0x318>
				pos = 1;
 800255a:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <process_time+0x350>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
			}
			if (button_count[15] == 1){
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <process_time+0x348>)
 8002562:	8bdb      	ldrh	r3, [r3, #30]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d10f      	bne.n	8002588 <process_time+0x340>
				pos = 5;
 8002568:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <process_time+0x350>)
 800256a:	2205      	movs	r2, #5
 800256c:	601a      	str	r2, [r3, #0]
			}
			break;
 800256e:	e00b      	b.n	8002588 <process_time+0x340>
		default:
			break;
 8002570:	bf00      	nop
 8002572:	e00a      	b.n	800258a <process_time+0x342>
			break;
 8002574:	bf00      	nop
 8002576:	e008      	b.n	800258a <process_time+0x342>
			break;
 8002578:	bf00      	nop
 800257a:	e006      	b.n	800258a <process_time+0x342>
			break;
 800257c:	bf00      	nop
 800257e:	e004      	b.n	800258a <process_time+0x342>
			break;
 8002580:	bf00      	nop
 8002582:	e002      	b.n	800258a <process_time+0x342>
			break;
 8002584:	bf00      	nop
 8002586:	e000      	b.n	800258a <process_time+0x342>
			break;
 8002588:	bf00      	nop
	}
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000017c 	.word	0x2000017c
 8002594:	200001f8 	.word	0x200001f8
 8002598:	200001c4 	.word	0x200001c4
 800259c:	200001fc 	.word	0x200001fc

080025a0 <fsm_clock>:

void fsm_clock(){
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af02      	add	r7, sp, #8
	if (alarm == 1) {
 80025a6:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <fsm_clock+0x154>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <fsm_clock+0x12>
		check_alarm_over();
 80025ae:	f7ff fde7 	bl	8002180 <check_alarm_over>
	}
	switch (status) {
 80025b2:	4b51      	ldr	r3, [pc, #324]	@ (80026f8 <fsm_clock+0x158>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80025b8:	f200 8098 	bhi.w	80026ec <fsm_clock+0x14c>
 80025bc:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <fsm_clock+0x24>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	08002671 	.word	0x08002671
 80025c8:	08002683 	.word	0x08002683
 80025cc:	080026a9 	.word	0x080026a9
 80025d0:	080026c5 	.word	0x080026c5
 80025d4:	080026ed 	.word	0x080026ed
 80025d8:	080026ed 	.word	0x080026ed
 80025dc:	080026ed 	.word	0x080026ed
 80025e0:	080026ed 	.word	0x080026ed
 80025e4:	080026ed 	.word	0x080026ed
 80025e8:	080026ed 	.word	0x080026ed
 80025ec:	080026ed 	.word	0x080026ed
 80025f0:	080026ed 	.word	0x080026ed
 80025f4:	080026ed 	.word	0x080026ed
 80025f8:	080026ed 	.word	0x080026ed
 80025fc:	080026ed 	.word	0x080026ed
 8002600:	080026ed 	.word	0x080026ed
 8002604:	080026ed 	.word	0x080026ed
 8002608:	080026ed 	.word	0x080026ed
 800260c:	080026ed 	.word	0x080026ed
 8002610:	080026ed 	.word	0x080026ed
 8002614:	080026ed 	.word	0x080026ed
 8002618:	080026ed 	.word	0x080026ed
 800261c:	080026ed 	.word	0x080026ed
 8002620:	080026ed 	.word	0x080026ed
 8002624:	080026ed 	.word	0x080026ed
 8002628:	080026ed 	.word	0x080026ed
 800262c:	080026ed 	.word	0x080026ed
 8002630:	080026ed 	.word	0x080026ed
 8002634:	080026ed 	.word	0x080026ed
 8002638:	080026ed 	.word	0x080026ed
 800263c:	080026ed 	.word	0x080026ed
 8002640:	080026ed 	.word	0x080026ed
 8002644:	080026ed 	.word	0x080026ed
 8002648:	080026ed 	.word	0x080026ed
 800264c:	080026ed 	.word	0x080026ed
 8002650:	080026ed 	.word	0x080026ed
 8002654:	080026ed 	.word	0x080026ed
 8002658:	080026ed 	.word	0x080026ed
 800265c:	080026ed 	.word	0x080026ed
 8002660:	080026ed 	.word	0x080026ed
 8002664:	080026ed 	.word	0x080026ed
 8002668:	080026d1 	.word	0x080026d1
 800266c:	080026cb 	.word	0x080026cb
		case INIT:
			uart_EspSendBytes("t", 1);
 8002670:	2101      	movs	r1, #1
 8002672:	4822      	ldr	r0, [pc, #136]	@ (80026fc <fsm_clock+0x15c>)
 8002674:	f004 f8b0 	bl	80067d8 <uart_EspSendBytes>
			led7_timer_init();
 8002678:	f001 ff76 	bl	8004568 <led7_timer_init>
			status = NORMAL;
 800267c:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <fsm_clock+0x158>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]
		case NORMAL:
			displayTime(ds3231_hours, ds3231_min, ds3231_sec, ds3231_date, ds3231_month, ds3231_year);
 8002682:	4b1f      	ldr	r3, [pc, #124]	@ (8002700 <fsm_clock+0x160>)
 8002684:	7818      	ldrb	r0, [r3, #0]
 8002686:	4b1f      	ldr	r3, [pc, #124]	@ (8002704 <fsm_clock+0x164>)
 8002688:	7819      	ldrb	r1, [r3, #0]
 800268a:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <fsm_clock+0x168>)
 800268c:	781c      	ldrb	r4, [r3, #0]
 800268e:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <fsm_clock+0x16c>)
 8002690:	781d      	ldrb	r5, [r3, #0]
 8002692:	4b1f      	ldr	r3, [pc, #124]	@ (8002710 <fsm_clock+0x170>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4a1f      	ldr	r2, [pc, #124]	@ (8002714 <fsm_clock+0x174>)
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	9201      	str	r2, [sp, #4]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	462b      	mov	r3, r5
 80026a0:	4622      	mov	r2, r4
 80026a2:	f000 fb0d 	bl	8002cc0 <displayTime>
			break;
 80026a6:	e022      	b.n	80026ee <fsm_clock+0x14e>
		case ALARM:
			if (bool_key_touch == 1){
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <fsm_clock+0x178>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <fsm_clock+0x11e>
				key_num_display();
 80026b0:	f000 ffc6 	bl	8003640 <key_num_display>
				bool_key_touch++;
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <fsm_clock+0x178>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <fsm_clock+0x178>)
 80026bc:	6013      	str	r3, [r2, #0]
			}
			process_time();
 80026be:	f7ff fdc3 	bl	8002248 <process_time>
			break;
 80026c2:	e014      	b.n	80026ee <fsm_clock+0x14e>
		case CHECK:
			input_pass();
 80026c4:	f7ff f908 	bl	80018d8 <input_pass>
			break;
 80026c8:	e011      	b.n	80026ee <fsm_clock+0x14e>
		case SETTING:
			break;
		case PASS:
			input_pass();
 80026ca:	f7ff f905 	bl	80018d8 <input_pass>
			break;
 80026ce:	e00e      	b.n	80026ee <fsm_clock+0x14e>
		case TIMER:
			if (bool_key_touch == 1){
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <fsm_clock+0x178>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <fsm_clock+0x146>
				key_num_display();
 80026d8:	f000 ffb2 	bl	8003640 <key_num_display>
				bool_key_touch++;
 80026dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <fsm_clock+0x178>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <fsm_clock+0x178>)
 80026e4:	6013      	str	r3, [r2, #0]
			}
			process_time();
 80026e6:	f7ff fdaf 	bl	8002248 <process_time>
			break;
 80026ea:	e000      	b.n	80026ee <fsm_clock+0x14e>
		default:
			break;
 80026ec:	bf00      	nop
	}
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bdb0      	pop	{r4, r5, r7, pc}
 80026f4:	200001e4 	.word	0x200001e4
 80026f8:	200001c0 	.word	0x200001c0
 80026fc:	0800cb64 	.word	0x0800cb64
 8002700:	200001af 	.word	0x200001af
 8002704:	200001b0 	.word	0x200001b0
 8002708:	200001b1 	.word	0x200001b1
 800270c:	200001b2 	.word	0x200001b2
 8002710:	200001b4 	.word	0x200001b4
 8002714:	200001b5 	.word	0x200001b5
 8002718:	2000040c 	.word	0x2000040c

0800271c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	@ 0x38
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	615a      	str	r2, [r3, #20]
 8002734:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8002736:	463b      	mov	r3, r7
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
 8002744:	615a      	str	r2, [r3, #20]
 8002746:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002748:	4b2f      	ldr	r3, [pc, #188]	@ (8002808 <MX_FSMC_Init+0xec>)
 800274a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800274e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002750:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <MX_FSMC_Init+0xec>)
 8002752:	4a2e      	ldr	r2, [pc, #184]	@ (800280c <MX_FSMC_Init+0xf0>)
 8002754:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002756:	4b2c      	ldr	r3, [pc, #176]	@ (8002808 <MX_FSMC_Init+0xec>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800275c:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <MX_FSMC_Init+0xec>)
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002762:	4b29      	ldr	r3, [pc, #164]	@ (8002808 <MX_FSMC_Init+0xec>)
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002768:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <MX_FSMC_Init+0xec>)
 800276a:	2210      	movs	r2, #16
 800276c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800276e:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <MX_FSMC_Init+0xec>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <MX_FSMC_Init+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800277a:	4b23      	ldr	r3, [pc, #140]	@ (8002808 <MX_FSMC_Init+0xec>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002780:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <MX_FSMC_Init+0xec>)
 8002782:	2200      	movs	r2, #0
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <MX_FSMC_Init+0xec>)
 8002788:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800278c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800278e:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <MX_FSMC_Init+0xec>)
 8002790:	2200      	movs	r2, #0
 8002792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8002794:	4b1c      	ldr	r3, [pc, #112]	@ (8002808 <MX_FSMC_Init+0xec>)
 8002796:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800279a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800279c:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <MX_FSMC_Init+0xec>)
 800279e:	2200      	movs	r2, #0
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80027a2:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <MX_FSMC_Init+0xec>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80027a8:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <MX_FSMC_Init+0xec>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80027ae:	230f      	movs	r3, #15
 80027b0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80027b2:	230f      	movs	r3, #15
 80027b4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80027b6:	233c      	movs	r3, #60	@ 0x3c
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80027be:	2310      	movs	r3, #16
 80027c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80027c2:	2311      	movs	r3, #17
 80027c4:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80027c6:	2300      	movs	r3, #0
 80027c8:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80027ca:	2308      	movs	r3, #8
 80027cc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80027ce:	230f      	movs	r3, #15
 80027d0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80027d2:	2309      	movs	r3, #9
 80027d4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80027da:	2310      	movs	r3, #16
 80027dc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80027de:	2311      	movs	r3, #17
 80027e0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80027e6:	463a      	mov	r2, r7
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4806      	ldr	r0, [pc, #24]	@ (8002808 <MX_FSMC_Init+0xec>)
 80027f0:	f007 fe42 	bl	800a478 <HAL_SRAM_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80027fa:	f002 f8e7 	bl	80049cc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80027fe:	bf00      	nop
 8002800:	3738      	adds	r7, #56	@ 0x38
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000020c 	.word	0x2000020c
 800280c:	a0000104 	.word	0xa0000104

08002810 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002824:	4b1c      	ldr	r3, [pc, #112]	@ (8002898 <HAL_FSMC_MspInit+0x88>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d131      	bne.n	8002890 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800282c:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <HAL_FSMC_MspInit+0x88>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_FSMC_MspInit+0x8c>)
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	4a18      	ldr	r2, [pc, #96]	@ (800289c <HAL_FSMC_MspInit+0x8c>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6393      	str	r3, [r2, #56]	@ 0x38
 8002842:	4b16      	ldr	r3, [pc, #88]	@ (800289c <HAL_FSMC_MspInit+0x8c>)
 8002844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800284e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8002852:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002860:	230c      	movs	r3, #12
 8002862:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	4619      	mov	r1, r3
 8002868:	480d      	ldr	r0, [pc, #52]	@ (80028a0 <HAL_FSMC_MspInit+0x90>)
 800286a:	f005 fa1d 	bl	8007ca8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800286e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8002872:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002880:	230c      	movs	r3, #12
 8002882:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	4619      	mov	r1, r3
 8002888:	4806      	ldr	r0, [pc, #24]	@ (80028a4 <HAL_FSMC_MspInit+0x94>)
 800288a:	f005 fa0d 	bl	8007ca8 <HAL_GPIO_Init>
 800288e:	e000      	b.n	8002892 <HAL_FSMC_MspInit+0x82>
    return;
 8002890:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000025c 	.word	0x2000025c
 800289c:	40023800 	.word	0x40023800
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40020c00 	.word	0x40020c00

080028a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80028b0:	f7ff ffae 	bl	8002810 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	@ 0x38
 80028c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
 80028d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002b14 <MX_GPIO_Init+0x258>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a8e      	ldr	r2, [pc, #568]	@ (8002b14 <MX_GPIO_Init+0x258>)
 80028dc:	f043 0310 	orr.w	r3, r3, #16
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b8c      	ldr	r3, [pc, #560]	@ (8002b14 <MX_GPIO_Init+0x258>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	4b88      	ldr	r3, [pc, #544]	@ (8002b14 <MX_GPIO_Init+0x258>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a87      	ldr	r2, [pc, #540]	@ (8002b14 <MX_GPIO_Init+0x258>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b85      	ldr	r3, [pc, #532]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	4b81      	ldr	r3, [pc, #516]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a80      	ldr	r2, [pc, #512]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002914:	f043 0320 	orr.w	r3, r3, #32
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b7e      	ldr	r3, [pc, #504]	@ (8002b14 <MX_GPIO_Init+0x258>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b14 <MX_GPIO_Init+0x258>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a79      	ldr	r2, [pc, #484]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b77      	ldr	r3, [pc, #476]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	4b73      	ldr	r3, [pc, #460]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	4a72      	ldr	r2, [pc, #456]	@ (8002b14 <MX_GPIO_Init+0x258>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6313      	str	r3, [r2, #48]	@ 0x30
 8002952:	4b70      	ldr	r3, [pc, #448]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b6c      	ldr	r3, [pc, #432]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a6b      	ldr	r2, [pc, #428]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b69      	ldr	r3, [pc, #420]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	4b65      	ldr	r3, [pc, #404]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4a64      	ldr	r2, [pc, #400]	@ (8002b14 <MX_GPIO_Init+0x258>)
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4b62      	ldr	r3, [pc, #392]	@ (8002b14 <MX_GPIO_Init+0x258>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	4b5e      	ldr	r3, [pc, #376]	@ (8002b14 <MX_GPIO_Init+0x258>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4a5d      	ldr	r2, [pc, #372]	@ (8002b14 <MX_GPIO_Init+0x258>)
 80029a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b14 <MX_GPIO_Init+0x258>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2170      	movs	r1, #112	@ 0x70
 80029b6:	4858      	ldr	r0, [pc, #352]	@ (8002b18 <MX_GPIO_Init+0x25c>)
 80029b8:	f005 fb2a 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80029bc:	2200      	movs	r2, #0
 80029be:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 80029c2:	4856      	ldr	r0, [pc, #344]	@ (8002b1c <MX_GPIO_Init+0x260>)
 80029c4:	f005 fb24 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 80029c8:	2200      	movs	r2, #0
 80029ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029ce:	4854      	ldr	r0, [pc, #336]	@ (8002b20 <MX_GPIO_Init+0x264>)
 80029d0:	f005 fb1e 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80029d4:	2200      	movs	r2, #0
 80029d6:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80029da:	4852      	ldr	r0, [pc, #328]	@ (8002b24 <MX_GPIO_Init+0x268>)
 80029dc:	f005 fb18 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80029e0:	2200      	movs	r2, #0
 80029e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029e6:	4850      	ldr	r0, [pc, #320]	@ (8002b28 <MX_GPIO_Init+0x26c>)
 80029e8:	f005 fb12 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2108      	movs	r1, #8
 80029f0:	484e      	ldr	r0, [pc, #312]	@ (8002b2c <MX_GPIO_Init+0x270>)
 80029f2:	f005 fb0d 	bl	8008010 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80029f6:	2370      	movs	r3, #112	@ 0x70
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4842      	ldr	r0, [pc, #264]	@ (8002b18 <MX_GPIO_Init+0x25c>)
 8002a0e:	f005 f94b 	bl	8007ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8002a12:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a28:	4619      	mov	r1, r3
 8002a2a:	483c      	ldr	r0, [pc, #240]	@ (8002b1c <MX_GPIO_Init+0x260>)
 8002a2c:	f005 f93c 	bl	8007ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8002a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a42:	4619      	mov	r1, r3
 8002a44:	4836      	ldr	r0, [pc, #216]	@ (8002b20 <MX_GPIO_Init+0x264>)
 8002a46:	f005 f92f 	bl	8007ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8002a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a50:	2301      	movs	r3, #1
 8002a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8002a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a60:	4619      	mov	r1, r3
 8002a62:	482f      	ldr	r0, [pc, #188]	@ (8002b20 <MX_GPIO_Init+0x264>)
 8002a64:	f005 f920 	bl	8007ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8002a68:	23c0      	movs	r3, #192	@ 0xc0
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a78:	4619      	mov	r1, r3
 8002a7a:	482b      	ldr	r0, [pc, #172]	@ (8002b28 <MX_GPIO_Init+0x26c>)
 8002a7c:	f005 f914 	bl	8007ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8002a80:	2330      	movs	r3, #48	@ 0x30
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a90:	4619      	mov	r1, r3
 8002a92:	4822      	ldr	r0, [pc, #136]	@ (8002b1c <MX_GPIO_Init+0x260>)
 8002a94:	f005 f908 	bl	8007ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8002a98:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aae:	4619      	mov	r1, r3
 8002ab0:	481c      	ldr	r0, [pc, #112]	@ (8002b24 <MX_GPIO_Init+0x268>)
 8002ab2:	f005 f8f9 	bl	8007ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8002ab6:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4814      	ldr	r0, [pc, #80]	@ (8002b1c <MX_GPIO_Init+0x260>)
 8002acc:	f005 f8ec 	bl	8007ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8002ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480f      	ldr	r0, [pc, #60]	@ (8002b28 <MX_GPIO_Init+0x26c>)
 8002aea:	f005 f8dd 	bl	8007ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8002aee:	2308      	movs	r3, #8
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af2:	2301      	movs	r3, #1
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8002afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b02:	4619      	mov	r1, r3
 8002b04:	4809      	ldr	r0, [pc, #36]	@ (8002b2c <MX_GPIO_Init+0x270>)
 8002b06:	f005 f8cf 	bl	8007ca8 <HAL_GPIO_Init>

}
 8002b0a:	bf00      	nop
 8002b0c:	3738      	adds	r7, #56	@ 0x38
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40021400 	.word	0x40021400
 8002b24:	40021800 	.word	0x40021800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020c00 	.word	0x40020c00

08002b30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b36:	4a13      	ldr	r2, [pc, #76]	@ (8002b84 <MX_I2C1_Init+0x54>)
 8002b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b3c:	4a12      	ldr	r2, [pc, #72]	@ (8002b88 <MX_I2C1_Init+0x58>)
 8002b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b54:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b60:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b6c:	4804      	ldr	r0, [pc, #16]	@ (8002b80 <MX_I2C1_Init+0x50>)
 8002b6e:	f005 fa83 	bl	8008078 <HAL_I2C_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b78:	f001 ff28 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000260 	.word	0x20000260
 8002b84:	40005400 	.word	0x40005400
 8002b88:	000186a0 	.word	0x000186a0

08002b8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	@ 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	@ (8002c10 <HAL_I2C_MspInit+0x84>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d12b      	bne.n	8002c06 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <HAL_I2C_MspInit+0x88>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	4a17      	ldr	r2, [pc, #92]	@ (8002c14 <HAL_I2C_MspInit+0x88>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_I2C_MspInit+0x88>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bca:	23c0      	movs	r3, #192	@ 0xc0
 8002bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bce:	2312      	movs	r3, #18
 8002bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <HAL_I2C_MspInit+0x8c>)
 8002be6:	f005 f85f 	bl	8007ca8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_I2C_MspInit+0x88>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <HAL_I2C_MspInit+0x88>)
 8002bf4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_I2C_MspInit+0x88>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	@ 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40005400 	.word	0x40005400
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020400 	.word	0x40020400

08002c1c <displayPass>:
 *      Author: ADMIN
 */

#include "interface.h"

void displayPass(int id1, int id2, int id3){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af04      	add	r7, sp, #16
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
	lcd_ShowIntNum(70 + 5, 100 - 30, id1, 1, CHGREEN, WHITE, 24);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	2318      	movs	r3, #24
 8002c2e:	9302      	str	r3, [sp, #8]
 8002c30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	f242 1365 	movw	r3, #8549	@ 0x2165
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	2146      	movs	r1, #70	@ 0x46
 8002c40:	204b      	movs	r0, #75	@ 0x4b
 8002c42:	f001 f8dd 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowIntNum(110 + 5, 100 - 30, id2, 1, CHGREEN, WHITE, 24);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	2318      	movs	r3, #24
 8002c4c:	9302      	str	r3, [sp, #8]
 8002c4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	f242 1365 	movw	r3, #8549	@ 0x2165
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	2146      	movs	r1, #70	@ 0x46
 8002c5e:	2073      	movs	r0, #115	@ 0x73
 8002c60:	f001 f8ce 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowIntNum(150 + 5, 100 - 30, id3, 1, CHGREEN, WHITE, 24);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	2318      	movs	r3, #24
 8002c6a:	9302      	str	r3, [sp, #8]
 8002c6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	f242 1365 	movw	r3, #8549	@ 0x2165
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	2146      	movs	r1, #70	@ 0x46
 8002c7c:	209b      	movs	r0, #155	@ 0x9b
 8002c7e:	f001 f8bf 	bl	8003e00 <lcd_ShowIntNum>
//	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
//	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
//	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
//	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <time_fix_zero>:

char str[3] = "";

void time_fix_zero(uint8_t fix){
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	str[0] = '0';
 8002c96:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <time_fix_zero+0x30>)
 8002c98:	2230      	movs	r2, #48	@ 0x30
 8002c9a:	701a      	strb	r2, [r3, #0]
	char temp = (int)fix + 48;
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	3330      	adds	r3, #48	@ 0x30
 8002ca0:	73fb      	strb	r3, [r7, #15]
	str[1] = temp;
 8002ca2:	4a06      	ldr	r2, [pc, #24]	@ (8002cbc <time_fix_zero+0x30>)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	7053      	strb	r3, [r2, #1]
	str[2] = '\0';
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <time_fix_zero+0x30>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	709a      	strb	r2, [r3, #2]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200002b4 	.word	0x200002b4

08002cc0 <displayTime>:

void displayTime(uint8_t t_hours, uint8_t t_min, uint8_t t_sec, uint8_t t_date, uint8_t t_month, uint8_t t_year){
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af04      	add	r7, sp, #16
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4623      	mov	r3, r4
 8002cd0:	71fb      	strb	r3, [r7, #7]
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71bb      	strb	r3, [r7, #6]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	717b      	strb	r3, [r7, #5]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	713b      	strb	r3, [r7, #4]
	//hour
	if (t_hours > 9){
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d90f      	bls.n	8002d04 <displayTime+0x44>
		lcd_ShowIntNum(70, 100 - 30, t_hours, 2, BRRED, WHITE, 24);
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	2318      	movs	r3, #24
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	2146      	movs	r1, #70	@ 0x46
 8002cfc:	2046      	movs	r0, #70	@ 0x46
 8002cfe:	f001 f87f 	bl	8003e00 <lcd_ShowIntNum>
 8002d02:	e011      	b.n	8002d28 <displayTime+0x68>
	}
	else {
		time_fix_zero(t_hours);
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ffc0 	bl	8002c8c <time_fix_zero>
		lcd_ShowStr(70, 100 - 30, str , BRRED, WHITE, 24, 0);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	2318      	movs	r3, #24
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 8002d1e:	4a7d      	ldr	r2, [pc, #500]	@ (8002f14 <displayTime+0x254>)
 8002d20:	2146      	movs	r1, #70	@ 0x46
 8002d22:	2046      	movs	r0, #70	@ 0x46
 8002d24:	f001 fbbc 	bl	80044a0 <lcd_ShowStr>
	}
	//min
	if (t_min > 9){
 8002d28:	79bb      	ldrb	r3, [r7, #6]
 8002d2a:	2b09      	cmp	r3, #9
 8002d2c:	d90f      	bls.n	8002d4e <displayTime+0x8e>
		lcd_ShowIntNum(110, 100 - 30, t_min, 2, BRRED, WHITE, 24);
 8002d2e:	79bb      	ldrb	r3, [r7, #6]
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	2318      	movs	r3, #24
 8002d34:	9302      	str	r3, [sp, #8]
 8002d36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2302      	movs	r3, #2
 8002d44:	2146      	movs	r1, #70	@ 0x46
 8002d46:	206e      	movs	r0, #110	@ 0x6e
 8002d48:	f001 f85a 	bl	8003e00 <lcd_ShowIntNum>
 8002d4c:	e011      	b.n	8002d72 <displayTime+0xb2>
	}
	else {
		time_fix_zero(t_min);
 8002d4e:	79bb      	ldrb	r3, [r7, #6]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff9b 	bl	8002c8c <time_fix_zero>
		lcd_ShowStr(110, 100 - 30, str , BRRED, WHITE, 24, 0);
 8002d56:	2300      	movs	r3, #0
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	2318      	movs	r3, #24
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 8002d68:	4a6a      	ldr	r2, [pc, #424]	@ (8002f14 <displayTime+0x254>)
 8002d6a:	2146      	movs	r1, #70	@ 0x46
 8002d6c:	206e      	movs	r0, #110	@ 0x6e
 8002d6e:	f001 fb97 	bl	80044a0 <lcd_ShowStr>
	}
	//sec
	if (t_sec > 9){
 8002d72:	797b      	ldrb	r3, [r7, #5]
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d90f      	bls.n	8002d98 <displayTime+0xd8>
		lcd_ShowIntNum(150, 100 - 30, t_sec, 2, BRRED, WHITE, 24);
 8002d78:	797b      	ldrb	r3, [r7, #5]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	2318      	movs	r3, #24
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	2146      	movs	r1, #70	@ 0x46
 8002d90:	2096      	movs	r0, #150	@ 0x96
 8002d92:	f001 f835 	bl	8003e00 <lcd_ShowIntNum>
 8002d96:	e011      	b.n	8002dbc <displayTime+0xfc>
	}
	else {
		time_fix_zero(t_sec);
 8002d98:	797b      	ldrb	r3, [r7, #5]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff76 	bl	8002c8c <time_fix_zero>
		lcd_ShowStr(150, 100 - 30, str , BRRED, WHITE, 24, 0);
 8002da0:	2300      	movs	r3, #0
 8002da2:	9302      	str	r3, [sp, #8]
 8002da4:	2318      	movs	r3, #24
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 8002db2:	4a58      	ldr	r2, [pc, #352]	@ (8002f14 <displayTime+0x254>)
 8002db4:	2146      	movs	r1, #70	@ 0x46
 8002db6:	2096      	movs	r0, #150	@ 0x96
 8002db8:	f001 fb72 	bl	80044a0 <lcd_ShowStr>
	}
	//date
	if (t_date > 9){
 8002dbc:	793b      	ldrb	r3, [r7, #4]
 8002dbe:	2b09      	cmp	r3, #9
 8002dc0:	d90f      	bls.n	8002de2 <displayTime+0x122>
		lcd_ShowIntNum(70, 130 - 30, t_date, 2, DARKBLUE, WHITE, 24);
 8002dc2:	793b      	ldrb	r3, [r7, #4]
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	2318      	movs	r3, #24
 8002dc8:	9302      	str	r3, [sp, #8]
 8002dca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	2164      	movs	r1, #100	@ 0x64
 8002dda:	2046      	movs	r0, #70	@ 0x46
 8002ddc:	f001 f810 	bl	8003e00 <lcd_ShowIntNum>
 8002de0:	e011      	b.n	8002e06 <displayTime+0x146>
	}
	else {
		time_fix_zero(t_date);
 8002de2:	793b      	ldrb	r3, [r7, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff51 	bl	8002c8c <time_fix_zero>
		lcd_ShowStr(70, 130 - 30, str , DARKBLUE, WHITE, 24, 0);
 8002dea:	2300      	movs	r3, #0
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	2318      	movs	r3, #24
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002dfc:	4a45      	ldr	r2, [pc, #276]	@ (8002f14 <displayTime+0x254>)
 8002dfe:	2164      	movs	r1, #100	@ 0x64
 8002e00:	2046      	movs	r0, #70	@ 0x46
 8002e02:	f001 fb4d 	bl	80044a0 <lcd_ShowStr>
	}
	//month
	if (t_month > 9){
 8002e06:	7e3b      	ldrb	r3, [r7, #24]
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	d90f      	bls.n	8002e2c <displayTime+0x16c>
		lcd_ShowIntNum(110, 130 - 30, t_month, 2, DARKBLUE, WHITE, 24);
 8002e0c:	7e3b      	ldrb	r3, [r7, #24]
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	2318      	movs	r3, #24
 8002e12:	9302      	str	r3, [sp, #8]
 8002e14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2302      	movs	r3, #2
 8002e22:	2164      	movs	r1, #100	@ 0x64
 8002e24:	206e      	movs	r0, #110	@ 0x6e
 8002e26:	f000 ffeb 	bl	8003e00 <lcd_ShowIntNum>
 8002e2a:	e011      	b.n	8002e50 <displayTime+0x190>
	}
	else {
		time_fix_zero(t_month);
 8002e2c:	7e3b      	ldrb	r3, [r7, #24]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff2c 	bl	8002c8c <time_fix_zero>
		lcd_ShowStr(110, 130 - 30, str , DARKBLUE, WHITE, 24, 0);
 8002e34:	2300      	movs	r3, #0
 8002e36:	9302      	str	r3, [sp, #8]
 8002e38:	2318      	movs	r3, #24
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002e46:	4a33      	ldr	r2, [pc, #204]	@ (8002f14 <displayTime+0x254>)
 8002e48:	2164      	movs	r1, #100	@ 0x64
 8002e4a:	206e      	movs	r0, #110	@ 0x6e
 8002e4c:	f001 fb28 	bl	80044a0 <lcd_ShowStr>
	}
	//year
	if (t_year > 9){
 8002e50:	7f3b      	ldrb	r3, [r7, #28]
 8002e52:	2b09      	cmp	r3, #9
 8002e54:	d90f      	bls.n	8002e76 <displayTime+0x1b6>
		lcd_ShowIntNum(150, 130 - 30, t_year, 2, DARKBLUE, WHITE, 24);
 8002e56:	7f3b      	ldrb	r3, [r7, #28]
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	2318      	movs	r3, #24
 8002e5c:	9302      	str	r3, [sp, #8]
 8002e5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	2164      	movs	r1, #100	@ 0x64
 8002e6e:	2096      	movs	r0, #150	@ 0x96
 8002e70:	f000 ffc6 	bl	8003e00 <lcd_ShowIntNum>
 8002e74:	e011      	b.n	8002e9a <displayTime+0x1da>
	}
	else {
		time_fix_zero(t_year);
 8002e76:	7f3b      	ldrb	r3, [r7, #28]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff07 	bl	8002c8c <time_fix_zero>
		lcd_ShowStr(150, 130 - 30, str , DARKBLUE, WHITE, 24, 0);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9302      	str	r3, [sp, #8]
 8002e82:	2318      	movs	r3, #24
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002e90:	4a20      	ldr	r2, [pc, #128]	@ (8002f14 <displayTime+0x254>)
 8002e92:	2164      	movs	r1, #100	@ 0x64
 8002e94:	2096      	movs	r0, #150	@ 0x96
 8002e96:	f001 fb03 	bl	80044a0 <lcd_ShowStr>
	}
	//ky tu dac biet
	lcd_ShowChar(70 + 25, 100 - 30, ':', ORANGE, WHITE, 24, 1);
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	9302      	str	r3, [sp, #8]
 8002e9e:	2318      	movs	r3, #24
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	f44f 4325 	mov.w	r3, #42240	@ 0xa500
 8002eac:	223a      	movs	r2, #58	@ 0x3a
 8002eae:	2146      	movs	r1, #70	@ 0x46
 8002eb0:	205f      	movs	r0, #95	@ 0x5f
 8002eb2:	f000 feb9 	bl	8003c28 <lcd_ShowChar>
	lcd_ShowChar(110 + 25, 100 - 30, ':', ORANGE, WHITE, 24, 1);
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	2318      	movs	r3, #24
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	f44f 4325 	mov.w	r3, #42240	@ 0xa500
 8002ec8:	223a      	movs	r2, #58	@ 0x3a
 8002eca:	2146      	movs	r1, #70	@ 0x46
 8002ecc:	2087      	movs	r0, #135	@ 0x87
 8002ece:	f000 feab 	bl	8003c28 <lcd_ShowChar>
	lcd_ShowChar(70 + 25, 130 - 30, '-', ORANGE, WHITE, 24, 1);
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9302      	str	r3, [sp, #8]
 8002ed6:	2318      	movs	r3, #24
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f44f 4325 	mov.w	r3, #42240	@ 0xa500
 8002ee4:	222d      	movs	r2, #45	@ 0x2d
 8002ee6:	2164      	movs	r1, #100	@ 0x64
 8002ee8:	205f      	movs	r0, #95	@ 0x5f
 8002eea:	f000 fe9d 	bl	8003c28 <lcd_ShowChar>
	lcd_ShowChar(110 + 25, 130 - 30, '-', ORANGE, WHITE, 24, 1);
 8002eee:	2301      	movs	r3, #1
 8002ef0:	9302      	str	r3, [sp, #8]
 8002ef2:	2318      	movs	r3, #24
 8002ef4:	9301      	str	r3, [sp, #4]
 8002ef6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	f44f 4325 	mov.w	r3, #42240	@ 0xa500
 8002f00:	222d      	movs	r2, #45	@ 0x2d
 8002f02:	2164      	movs	r1, #100	@ 0x64
 8002f04:	2087      	movs	r0, #135	@ 0x87
 8002f06:	f000 fe8f 	bl	8003c28 <lcd_ShowChar>
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200002b4 	.word	0x200002b4

08002f18 <blinky_displayTime>:

int counter_blink = 0;

void blinky_displayTime(int id, int check){
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
	counter_blink++;
 8002f22:	4b64      	ldr	r3, [pc, #400]	@ (80030b4 <blinky_displayTime+0x19c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	4a62      	ldr	r2, [pc, #392]	@ (80030b4 <blinky_displayTime+0x19c>)
 8002f2a:	6013      	str	r3, [r2, #0]
	if (counter_blink <= 20){
 8002f2c:	4b61      	ldr	r3, [pc, #388]	@ (80030b4 <blinky_displayTime+0x19c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b14      	cmp	r3, #20
 8002f32:	f300 8088 	bgt.w	8003046 <blinky_displayTime+0x12e>
		switch (id) {
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	f200 80ae 	bhi.w	800309a <blinky_displayTime+0x182>
 8002f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f44 <blinky_displayTime+0x2c>)
 8002f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f44:	08002f61 	.word	0x08002f61
 8002f48:	08002fcf 	.word	0x08002fcf
 8002f4c:	08002fe3 	.word	0x08002fe3
 8002f50:	08002ff7 	.word	0x08002ff7
 8002f54:	0800300b 	.word	0x0800300b
 8002f58:	0800301f 	.word	0x0800301f
 8002f5c:	08003033 	.word	0x08003033
			case 0:
				lcd_Fill(70, 100 - 30, 95, 125 - 30, WHITE);
 8002f60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	235f      	movs	r3, #95	@ 0x5f
 8002f68:	225f      	movs	r2, #95	@ 0x5f
 8002f6a:	2146      	movs	r1, #70	@ 0x46
 8002f6c:	2046      	movs	r0, #70	@ 0x46
 8002f6e:	f000 fd53 	bl	8003a18 <lcd_Fill>
				lcd_Fill(110, 100 - 30, 135, 125 - 30, WHITE);
 8002f72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	235f      	movs	r3, #95	@ 0x5f
 8002f7a:	2287      	movs	r2, #135	@ 0x87
 8002f7c:	2146      	movs	r1, #70	@ 0x46
 8002f7e:	206e      	movs	r0, #110	@ 0x6e
 8002f80:	f000 fd4a 	bl	8003a18 <lcd_Fill>
				lcd_Fill(150, 100 - 30, 175, 125 - 30, WHITE);
 8002f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	235f      	movs	r3, #95	@ 0x5f
 8002f8c:	22af      	movs	r2, #175	@ 0xaf
 8002f8e:	2146      	movs	r1, #70	@ 0x46
 8002f90:	2096      	movs	r0, #150	@ 0x96
 8002f92:	f000 fd41 	bl	8003a18 <lcd_Fill>
				lcd_Fill(70, 130 - 30, 95, 155 - 30, WHITE);
 8002f96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	237d      	movs	r3, #125	@ 0x7d
 8002f9e:	225f      	movs	r2, #95	@ 0x5f
 8002fa0:	2164      	movs	r1, #100	@ 0x64
 8002fa2:	2046      	movs	r0, #70	@ 0x46
 8002fa4:	f000 fd38 	bl	8003a18 <lcd_Fill>
				lcd_Fill(110, 130 - 30, 135, 155 - 30, WHITE);
 8002fa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	237d      	movs	r3, #125	@ 0x7d
 8002fb0:	2287      	movs	r2, #135	@ 0x87
 8002fb2:	2164      	movs	r1, #100	@ 0x64
 8002fb4:	206e      	movs	r0, #110	@ 0x6e
 8002fb6:	f000 fd2f 	bl	8003a18 <lcd_Fill>
				lcd_Fill(150, 130 - 30, 175, 155 - 30, WHITE);
 8002fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	237d      	movs	r3, #125	@ 0x7d
 8002fc2:	22af      	movs	r2, #175	@ 0xaf
 8002fc4:	2164      	movs	r1, #100	@ 0x64
 8002fc6:	2096      	movs	r0, #150	@ 0x96
 8002fc8:	f000 fd26 	bl	8003a18 <lcd_Fill>
			break;
 8002fcc:	e066      	b.n	800309c <blinky_displayTime+0x184>
			case 1:
				lcd_Fill(70, 100 - 30, 95, 125 - 30, WHITE);
 8002fce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	235f      	movs	r3, #95	@ 0x5f
 8002fd6:	225f      	movs	r2, #95	@ 0x5f
 8002fd8:	2146      	movs	r1, #70	@ 0x46
 8002fda:	2046      	movs	r0, #70	@ 0x46
 8002fdc:	f000 fd1c 	bl	8003a18 <lcd_Fill>
				break;
 8002fe0:	e05c      	b.n	800309c <blinky_displayTime+0x184>
			case 2:
				lcd_Fill(110, 100 - 30, 135, 125 - 30, WHITE);
 8002fe2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	235f      	movs	r3, #95	@ 0x5f
 8002fea:	2287      	movs	r2, #135	@ 0x87
 8002fec:	2146      	movs	r1, #70	@ 0x46
 8002fee:	206e      	movs	r0, #110	@ 0x6e
 8002ff0:	f000 fd12 	bl	8003a18 <lcd_Fill>
				break;
 8002ff4:	e052      	b.n	800309c <blinky_displayTime+0x184>
			case 3:
				lcd_Fill(150, 100 - 30, 175, 125 - 30, WHITE);
 8002ff6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	235f      	movs	r3, #95	@ 0x5f
 8002ffe:	22af      	movs	r2, #175	@ 0xaf
 8003000:	2146      	movs	r1, #70	@ 0x46
 8003002:	2096      	movs	r0, #150	@ 0x96
 8003004:	f000 fd08 	bl	8003a18 <lcd_Fill>
				break;
 8003008:	e048      	b.n	800309c <blinky_displayTime+0x184>
			case 4:
				lcd_Fill(70, 130 - 30, 95, 155 - 30, WHITE);
 800300a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	237d      	movs	r3, #125	@ 0x7d
 8003012:	225f      	movs	r2, #95	@ 0x5f
 8003014:	2164      	movs	r1, #100	@ 0x64
 8003016:	2046      	movs	r0, #70	@ 0x46
 8003018:	f000 fcfe 	bl	8003a18 <lcd_Fill>
				break;
 800301c:	e03e      	b.n	800309c <blinky_displayTime+0x184>
			case 5:
				lcd_Fill(110, 130 - 30, 135, 155 - 30, WHITE);
 800301e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	237d      	movs	r3, #125	@ 0x7d
 8003026:	2287      	movs	r2, #135	@ 0x87
 8003028:	2164      	movs	r1, #100	@ 0x64
 800302a:	206e      	movs	r0, #110	@ 0x6e
 800302c:	f000 fcf4 	bl	8003a18 <lcd_Fill>
				break;
 8003030:	e034      	b.n	800309c <blinky_displayTime+0x184>
			case 6:
				lcd_Fill(150, 130 - 30, 175, 155 - 30, WHITE);
 8003032:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	237d      	movs	r3, #125	@ 0x7d
 800303a:	22af      	movs	r2, #175	@ 0xaf
 800303c:	2164      	movs	r1, #100	@ 0x64
 800303e:	2096      	movs	r0, #150	@ 0x96
 8003040:	f000 fcea 	bl	8003a18 <lcd_Fill>
				break;
 8003044:	e02a      	b.n	800309c <blinky_displayTime+0x184>
			default:
				break;
		}
	}
	else if (counter_blink <= 40){
 8003046:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <blinky_displayTime+0x19c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b28      	cmp	r3, #40	@ 0x28
 800304c:	dc26      	bgt.n	800309c <blinky_displayTime+0x184>
		if (check == 1)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d118      	bne.n	8003086 <blinky_displayTime+0x16e>
			displayTime(tempHour, tempMin, tempSec, tempDate, tempMonth, tempYear);
 8003054:	4b18      	ldr	r3, [pc, #96]	@ (80030b8 <blinky_displayTime+0x1a0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b2d8      	uxtb	r0, r3
 800305a:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <blinky_displayTime+0x1a4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b2d9      	uxtb	r1, r3
 8003060:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <blinky_displayTime+0x1a8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b2dc      	uxtb	r4, r3
 8003066:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <blinky_displayTime+0x1ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b2dd      	uxtb	r5, r3
 800306c:	4b16      	ldr	r3, [pc, #88]	@ (80030c8 <blinky_displayTime+0x1b0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	4a16      	ldr	r2, [pc, #88]	@ (80030cc <blinky_displayTime+0x1b4>)
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	9201      	str	r2, [sp, #4]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	462b      	mov	r3, r5
 800307e:	4622      	mov	r2, r4
 8003080:	f7ff fe1e 	bl	8002cc0 <displayTime>
 8003084:	e00a      	b.n	800309c <blinky_displayTime+0x184>
		else
			displayPass(pass[0], pass[1], pass[2]);
 8003086:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <blinky_displayTime+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a11      	ldr	r2, [pc, #68]	@ (80030d0 <blinky_displayTime+0x1b8>)
 800308c:	6851      	ldr	r1, [r2, #4]
 800308e:	4a10      	ldr	r2, [pc, #64]	@ (80030d0 <blinky_displayTime+0x1b8>)
 8003090:	6892      	ldr	r2, [r2, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fdc2 	bl	8002c1c <displayPass>
 8003098:	e000      	b.n	800309c <blinky_displayTime+0x184>
				break;
 800309a:	bf00      	nop
	}
	if (counter_blink >= 40){
 800309c:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <blinky_displayTime+0x19c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b27      	cmp	r3, #39	@ 0x27
 80030a2:	dd02      	ble.n	80030aa <blinky_displayTime+0x192>
		counter_blink = 0;
 80030a4:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <blinky_displayTime+0x19c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
	}
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bdb0      	pop	{r4, r5, r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200002b8 	.word	0x200002b8
 80030b8:	200001e8 	.word	0x200001e8
 80030bc:	200001ec 	.word	0x200001ec
 80030c0:	200001f0 	.word	0x200001f0
 80030c4:	200001f4 	.word	0x200001f4
 80030c8:	200001f8 	.word	0x200001f8
 80030cc:	200001fc 	.word	0x200001fc
 80030d0:	200001d4 	.word	0x200001d4

080030d4 <alarm_clear>:

void alarm_clear(){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af02      	add	r7, sp, #8
	lcd_Fill(10, 10, 60, 60, WHITE);
 80030da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	233c      	movs	r3, #60	@ 0x3c
 80030e2:	223c      	movs	r2, #60	@ 0x3c
 80030e4:	210a      	movs	r1, #10
 80030e6:	200a      	movs	r0, #10
 80030e8:	f000 fc96 	bl	8003a18 <lcd_Fill>
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <error_display>:

void error_display(){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af04      	add	r7, sp, #16
	lcd_Fill(POS_X_FORTH, 10, POS_X_FORTH + WIDTH, 10 + HEIGHT, RED);
 80030fa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	232d      	movs	r3, #45	@ 0x2d
 8003102:	22b9      	movs	r2, #185	@ 0xb9
 8003104:	210a      	movs	r1, #10
 8003106:	2041      	movs	r0, #65	@ 0x41
 8003108:	f000 fc86 	bl	8003a18 <lcd_Fill>

	lcd_ShowStr(POS_X_FORTH + 30, 10 + 5, "ERROR", BLACK, BLACK, 24, 1);
 800310c:	2301      	movs	r3, #1
 800310e:	9302      	str	r3, [sp, #8]
 8003110:	2318      	movs	r3, #24
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	2300      	movs	r3, #0
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	2300      	movs	r3, #0
 800311a:	4a04      	ldr	r2, [pc, #16]	@ (800312c <error_display+0x38>)
 800311c:	210f      	movs	r1, #15
 800311e:	205f      	movs	r0, #95	@ 0x5f
 8003120:	f001 f9be 	bl	80044a0 <lcd_ShowStr>
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	0800cb68 	.word	0x0800cb68

08003130 <alarm_display>:

void alarm_display(){
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af02      	add	r7, sp, #8
	if (counter_blink <= 20){
 8003136:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <alarm_display+0x44>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b14      	cmp	r3, #20
 800313c:	dc08      	bgt.n	8003150 <alarm_display+0x20>
//		lcd_Fill(POS_X_FORTH, 10, POS_X_FORTH + WIDTH, 10 + HEIGHT, RED);
//
//		lcd_ShowStr(POS_X_FORTH + 30, 10 + 5, "ALARM", BLACK, BLACK, 24, 1);
		lcd_ShowPicture(10, 10, 50, 50, gImage_bell);
 800313e:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <alarm_display+0x48>)
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2332      	movs	r3, #50	@ 0x32
 8003144:	2232      	movs	r2, #50	@ 0x32
 8003146:	210a      	movs	r1, #10
 8003148:	200a      	movs	r0, #10
 800314a:	f000 fed7 	bl	8003efc <lcd_ShowPicture>
 800314e:	e009      	b.n	8003164 <alarm_display+0x34>
	}
	else if (counter_blink <= 40){
 8003150:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <alarm_display+0x44>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b28      	cmp	r3, #40	@ 0x28
 8003156:	dc02      	bgt.n	800315e <alarm_display+0x2e>
		alarm_clear();
 8003158:	f7ff ffbc 	bl	80030d4 <alarm_clear>
 800315c:	e002      	b.n	8003164 <alarm_display+0x34>
	}
	else {
		counter_blink = 0;
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <alarm_display+0x44>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
	}
	counter_blink++;
 8003164:	4b03      	ldr	r3, [pc, #12]	@ (8003174 <alarm_display+0x44>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	4a02      	ldr	r2, [pc, #8]	@ (8003174 <alarm_display+0x44>)
 800316c:	6013      	str	r3, [r2, #0]
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200002b8 	.word	0x200002b8
 8003178:	0800fbec 	.word	0x0800fbec

0800317c <home_lcd>:

void alarm_display_current(){
	lcd_ShowStr(POS_X_FORTH + 30, 50 + 5, "ALARM", BLACK, BLACK, 24, 1);
}

void home_lcd(){
 800317c:	b5b0      	push	{r4, r5, r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 8003182:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003186:	f000 fc15 	bl	80039b4 <lcd_Clear>
	displayTime(ds3231_hours, ds3231_min, ds3231_sec, ds3231_date, ds3231_month, ds3231_year);
 800318a:	4b20      	ldr	r3, [pc, #128]	@ (800320c <home_lcd+0x90>)
 800318c:	7818      	ldrb	r0, [r3, #0]
 800318e:	4b20      	ldr	r3, [pc, #128]	@ (8003210 <home_lcd+0x94>)
 8003190:	7819      	ldrb	r1, [r3, #0]
 8003192:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <home_lcd+0x98>)
 8003194:	781c      	ldrb	r4, [r3, #0]
 8003196:	4b20      	ldr	r3, [pc, #128]	@ (8003218 <home_lcd+0x9c>)
 8003198:	781d      	ldrb	r5, [r3, #0]
 800319a:	4b20      	ldr	r3, [pc, #128]	@ (800321c <home_lcd+0xa0>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	4a20      	ldr	r2, [pc, #128]	@ (8003220 <home_lcd+0xa4>)
 80031a0:	7812      	ldrb	r2, [r2, #0]
 80031a2:	9201      	str	r2, [sp, #4]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	462b      	mov	r3, r5
 80031a8:	4622      	mov	r2, r4
 80031aa:	f7ff fd89 	bl	8002cc0 <displayTime>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD, POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
 80031ae:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	23eb      	movs	r3, #235	@ 0xeb
 80031b6:	22b9      	movs	r2, #185	@ 0xb9
 80031b8:	21c8      	movs	r1, #200	@ 0xc8
 80031ba:	2041      	movs	r0, #65	@ 0x41
 80031bc:	f000 fc2c 	bl	8003a18 <lcd_Fill>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH, POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
 80031c0:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	f240 131d 	movw	r3, #285	@ 0x11d
 80031ca:	22b9      	movs	r2, #185	@ 0xb9
 80031cc:	21fa      	movs	r1, #250	@ 0xfa
 80031ce:	2041      	movs	r0, #65	@ 0x41
 80031d0:	f000 fc22 	bl	8003a18 <lcd_Fill>

	lcd_ShowStr(POS_X_THIRD + 30, POS_Y_THIRD + 5, "ALARM", BLACK, BLACK, 24, 1);
 80031d4:	2301      	movs	r3, #1
 80031d6:	9302      	str	r3, [sp, #8]
 80031d8:	2318      	movs	r3, #24
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	2300      	movs	r3, #0
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2300      	movs	r3, #0
 80031e2:	4a10      	ldr	r2, [pc, #64]	@ (8003224 <home_lcd+0xa8>)
 80031e4:	21cd      	movs	r1, #205	@ 0xcd
 80031e6:	205f      	movs	r0, #95	@ 0x5f
 80031e8:	f001 f95a 	bl	80044a0 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 17, POS_Y_FORTH + 5, "SETTING", BLACK, BLACK, 24, 1);
 80031ec:	2301      	movs	r3, #1
 80031ee:	9302      	str	r3, [sp, #8]
 80031f0:	2318      	movs	r3, #24
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	2300      	movs	r3, #0
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2300      	movs	r3, #0
 80031fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003228 <home_lcd+0xac>)
 80031fc:	21ff      	movs	r1, #255	@ 0xff
 80031fe:	2052      	movs	r0, #82	@ 0x52
 8003200:	f001 f94e 	bl	80044a0 <lcd_ShowStr>
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	bdb0      	pop	{r4, r5, r7, pc}
 800320a:	bf00      	nop
 800320c:	200001af 	.word	0x200001af
 8003210:	200001b0 	.word	0x200001b0
 8003214:	200001b1 	.word	0x200001b1
 8003218:	200001b2 	.word	0x200001b2
 800321c:	200001b4 	.word	0x200001b4
 8003220:	200001b5 	.word	0x200001b5
 8003224:	0800cb70 	.word	0x0800cb70
 8003228:	0800cb78 	.word	0x0800cb78

0800322c <setting_lcd>:

void setting_lcd(){
 800322c:	b5b0      	push	{r4, r5, r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 8003232:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003236:	f000 fbbd 	bl	80039b4 <lcd_Clear>
	displayTime(ds3231_hours, ds3231_min, ds3231_sec, ds3231_date, ds3231_month, ds3231_year);
 800323a:	4b2a      	ldr	r3, [pc, #168]	@ (80032e4 <setting_lcd+0xb8>)
 800323c:	7818      	ldrb	r0, [r3, #0]
 800323e:	4b2a      	ldr	r3, [pc, #168]	@ (80032e8 <setting_lcd+0xbc>)
 8003240:	7819      	ldrb	r1, [r3, #0]
 8003242:	4b2a      	ldr	r3, [pc, #168]	@ (80032ec <setting_lcd+0xc0>)
 8003244:	781c      	ldrb	r4, [r3, #0]
 8003246:	4b2a      	ldr	r3, [pc, #168]	@ (80032f0 <setting_lcd+0xc4>)
 8003248:	781d      	ldrb	r5, [r3, #0]
 800324a:	4b2a      	ldr	r3, [pc, #168]	@ (80032f4 <setting_lcd+0xc8>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <setting_lcd+0xcc>)
 8003250:	7812      	ldrb	r2, [r2, #0]
 8003252:	9201      	str	r2, [sp, #4]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	462b      	mov	r3, r5
 8003258:	4622      	mov	r2, r4
 800325a:	f7ff fd31 	bl	8002cc0 <displayTime>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND, POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
 800325e:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	23b9      	movs	r3, #185	@ 0xb9
 8003266:	22b9      	movs	r2, #185	@ 0xb9
 8003268:	2196      	movs	r1, #150	@ 0x96
 800326a:	2041      	movs	r0, #65	@ 0x41
 800326c:	f000 fbd4 	bl	8003a18 <lcd_Fill>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD, POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
 8003270:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	23eb      	movs	r3, #235	@ 0xeb
 8003278:	22b9      	movs	r2, #185	@ 0xb9
 800327a:	21c8      	movs	r1, #200	@ 0xc8
 800327c:	2041      	movs	r0, #65	@ 0x41
 800327e:	f000 fbcb 	bl	8003a18 <lcd_Fill>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH, POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
 8003282:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	f240 131d 	movw	r3, #285	@ 0x11d
 800328c:	22b9      	movs	r2, #185	@ 0xb9
 800328e:	21fa      	movs	r1, #250	@ 0xfa
 8003290:	2041      	movs	r0, #65	@ 0x41
 8003292:	f000 fbc1 	bl	8003a18 <lcd_Fill>

	lcd_ShowStr(POS_X_SECOND + 40, POS_Y_SECOND + 5, "TIME", BLACK, BLACK, 24, 1);
 8003296:	2301      	movs	r3, #1
 8003298:	9302      	str	r3, [sp, #8]
 800329a:	2318      	movs	r3, #24
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2300      	movs	r3, #0
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2300      	movs	r3, #0
 80032a4:	4a15      	ldr	r2, [pc, #84]	@ (80032fc <setting_lcd+0xd0>)
 80032a6:	219b      	movs	r1, #155	@ 0x9b
 80032a8:	2069      	movs	r0, #105	@ 0x69
 80032aa:	f001 f8f9 	bl	80044a0 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 40, POS_Y_THIRD + 5, "PASS", BLACK, BLACK, 24, 1);
 80032ae:	2301      	movs	r3, #1
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	2318      	movs	r3, #24
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	2300      	movs	r3, #0
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2300      	movs	r3, #0
 80032bc:	4a10      	ldr	r2, [pc, #64]	@ (8003300 <setting_lcd+0xd4>)
 80032be:	21cd      	movs	r1, #205	@ 0xcd
 80032c0:	2069      	movs	r0, #105	@ 0x69
 80032c2:	f001 f8ed 	bl	80044a0 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 30, POS_Y_FORTH + 5, "CANCEL", BLACK, BLACK, 24, 1);
 80032c6:	2301      	movs	r3, #1
 80032c8:	9302      	str	r3, [sp, #8]
 80032ca:	2318      	movs	r3, #24
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	2300      	movs	r3, #0
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	2300      	movs	r3, #0
 80032d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003304 <setting_lcd+0xd8>)
 80032d6:	21ff      	movs	r1, #255	@ 0xff
 80032d8:	205f      	movs	r0, #95	@ 0x5f
 80032da:	f001 f8e1 	bl	80044a0 <lcd_ShowStr>
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bdb0      	pop	{r4, r5, r7, pc}
 80032e4:	200001af 	.word	0x200001af
 80032e8:	200001b0 	.word	0x200001b0
 80032ec:	200001b1 	.word	0x200001b1
 80032f0:	200001b2 	.word	0x200001b2
 80032f4:	200001b4 	.word	0x200001b4
 80032f8:	200001b5 	.word	0x200001b5
 80032fc:	0800cb80 	.word	0x0800cb80
 8003300:	0800cb88 	.word	0x0800cb88
 8003304:	0800cb90 	.word	0x0800cb90

08003308 <alarm_lcd>:

void alarm_lcd(){
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 800330e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003312:	f000 fb4f 	bl	80039b4 <lcd_Clear>
	lcd_Fill(POS_X_FORTH, 10, POS_X_FORTH + WIDTH, 10 + HEIGHT, LIGHTBLUE);
 8003316:	f647 537c 	movw	r3, #32124	@ 0x7d7c
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	232d      	movs	r3, #45	@ 0x2d
 800331e:	22b9      	movs	r2, #185	@ 0xb9
 8003320:	210a      	movs	r1, #10
 8003322:	2041      	movs	r0, #65	@ 0x41
 8003324:	f000 fb78 	bl	8003a18 <lcd_Fill>
	lcd_ShowStr(POS_X_FORTH + 5, 10 + 5, "SET ALARM", BLACK, BLACK, 24, 1);
 8003328:	2301      	movs	r3, #1
 800332a:	9302      	str	r3, [sp, #8]
 800332c:	2318      	movs	r3, #24
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	2300      	movs	r3, #0
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2300      	movs	r3, #0
 8003336:	4a25      	ldr	r2, [pc, #148]	@ (80033cc <alarm_lcd+0xc4>)
 8003338:	210f      	movs	r1, #15
 800333a:	2046      	movs	r0, #70	@ 0x46
 800333c:	f001 f8b0 	bl	80044a0 <lcd_ShowStr>
	displayTime(tempHour, tempMin, tempSec, tempDate, tempMonth, tempYear);
 8003340:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <alarm_lcd+0xc8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b2d8      	uxtb	r0, r3
 8003346:	4b23      	ldr	r3, [pc, #140]	@ (80033d4 <alarm_lcd+0xcc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	b2d9      	uxtb	r1, r3
 800334c:	4b22      	ldr	r3, [pc, #136]	@ (80033d8 <alarm_lcd+0xd0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	b2dc      	uxtb	r4, r3
 8003352:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <alarm_lcd+0xd4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b2dd      	uxtb	r5, r3
 8003358:	4b21      	ldr	r3, [pc, #132]	@ (80033e0 <alarm_lcd+0xd8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	4a21      	ldr	r2, [pc, #132]	@ (80033e4 <alarm_lcd+0xdc>)
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	9201      	str	r2, [sp, #4]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	462b      	mov	r3, r5
 800336a:	4622      	mov	r2, r4
 800336c:	f7ff fca8 	bl	8002cc0 <displayTime>

	lcd_Fill(POS_X_THIRD, POS_Y_THIRD, POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
 8003370:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	23eb      	movs	r3, #235	@ 0xeb
 8003378:	22b9      	movs	r2, #185	@ 0xb9
 800337a:	21c8      	movs	r1, #200	@ 0xc8
 800337c:	2041      	movs	r0, #65	@ 0x41
 800337e:	f000 fb4b 	bl	8003a18 <lcd_Fill>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH, POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
 8003382:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f240 131d 	movw	r3, #285	@ 0x11d
 800338c:	22b9      	movs	r2, #185	@ 0xb9
 800338e:	21fa      	movs	r1, #250	@ 0xfa
 8003390:	2041      	movs	r0, #65	@ 0x41
 8003392:	f000 fb41 	bl	8003a18 <lcd_Fill>
	lcd_ShowStr(POS_X_THIRD + 45, POS_Y_THIRD + 5, "OK", BLACK, BLACK, 24, 1);
 8003396:	2301      	movs	r3, #1
 8003398:	9302      	str	r3, [sp, #8]
 800339a:	2318      	movs	r3, #24
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	2300      	movs	r3, #0
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	4a10      	ldr	r2, [pc, #64]	@ (80033e8 <alarm_lcd+0xe0>)
 80033a6:	21cd      	movs	r1, #205	@ 0xcd
 80033a8:	206e      	movs	r0, #110	@ 0x6e
 80033aa:	f001 f879 	bl	80044a0 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 30, POS_Y_FORTH + 5, "CANCEL", BLACK, BLACK, 24, 1);
 80033ae:	2301      	movs	r3, #1
 80033b0:	9302      	str	r3, [sp, #8]
 80033b2:	2318      	movs	r3, #24
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	2300      	movs	r3, #0
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	4a0b      	ldr	r2, [pc, #44]	@ (80033ec <alarm_lcd+0xe4>)
 80033be:	21ff      	movs	r1, #255	@ 0xff
 80033c0:	205f      	movs	r0, #95	@ 0x5f
 80033c2:	f001 f86d 	bl	80044a0 <lcd_ShowStr>
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bdb0      	pop	{r4, r5, r7, pc}
 80033cc:	0800cb98 	.word	0x0800cb98
 80033d0:	200001e8 	.word	0x200001e8
 80033d4:	200001ec 	.word	0x200001ec
 80033d8:	200001f0 	.word	0x200001f0
 80033dc:	200001f4 	.word	0x200001f4
 80033e0:	200001f8 	.word	0x200001f8
 80033e4:	200001fc 	.word	0x200001fc
 80033e8:	0800cba4 	.word	0x0800cba4
 80033ec:	0800cb90 	.word	0x0800cb90

080033f0 <setTimer_lcd>:

void setTimer_lcd(){
 80033f0:	b5b0      	push	{r4, r5, r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 80033f6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80033fa:	f000 fadb 	bl	80039b4 <lcd_Clear>
	lcd_Fill(POS_X_FORTH, 10, POS_X_FORTH + WIDTH, 10 + HEIGHT, LIGHTBLUE);
 80033fe:	f647 537c 	movw	r3, #32124	@ 0x7d7c
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	232d      	movs	r3, #45	@ 0x2d
 8003406:	22b9      	movs	r2, #185	@ 0xb9
 8003408:	210a      	movs	r1, #10
 800340a:	2041      	movs	r0, #65	@ 0x41
 800340c:	f000 fb04 	bl	8003a18 <lcd_Fill>
	lcd_ShowStr(POS_X_FORTH + 5, 10 + 5, "SET TIMER", BLACK, BLACK, 24, 1);
 8003410:	2301      	movs	r3, #1
 8003412:	9302      	str	r3, [sp, #8]
 8003414:	2318      	movs	r3, #24
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	2300      	movs	r3, #0
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2300      	movs	r3, #0
 800341e:	4a25      	ldr	r2, [pc, #148]	@ (80034b4 <setTimer_lcd+0xc4>)
 8003420:	210f      	movs	r1, #15
 8003422:	2046      	movs	r0, #70	@ 0x46
 8003424:	f001 f83c 	bl	80044a0 <lcd_ShowStr>
	displayTime(tempHour, tempMin, tempSec, tempDate, tempMonth, tempYear);
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <setTimer_lcd+0xc8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	b2d8      	uxtb	r0, r3
 800342e:	4b23      	ldr	r3, [pc, #140]	@ (80034bc <setTimer_lcd+0xcc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	b2d9      	uxtb	r1, r3
 8003434:	4b22      	ldr	r3, [pc, #136]	@ (80034c0 <setTimer_lcd+0xd0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b2dc      	uxtb	r4, r3
 800343a:	4b22      	ldr	r3, [pc, #136]	@ (80034c4 <setTimer_lcd+0xd4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	b2dd      	uxtb	r5, r3
 8003440:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <setTimer_lcd+0xd8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4a21      	ldr	r2, [pc, #132]	@ (80034cc <setTimer_lcd+0xdc>)
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	9201      	str	r2, [sp, #4]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	462b      	mov	r3, r5
 8003452:	4622      	mov	r2, r4
 8003454:	f7ff fc34 	bl	8002cc0 <displayTime>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD, POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
 8003458:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	23eb      	movs	r3, #235	@ 0xeb
 8003460:	22b9      	movs	r2, #185	@ 0xb9
 8003462:	21c8      	movs	r1, #200	@ 0xc8
 8003464:	2041      	movs	r0, #65	@ 0x41
 8003466:	f000 fad7 	bl	8003a18 <lcd_Fill>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH, POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
 800346a:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f240 131d 	movw	r3, #285	@ 0x11d
 8003474:	22b9      	movs	r2, #185	@ 0xb9
 8003476:	21fa      	movs	r1, #250	@ 0xfa
 8003478:	2041      	movs	r0, #65	@ 0x41
 800347a:	f000 facd 	bl	8003a18 <lcd_Fill>

	lcd_ShowStr(POS_X_THIRD + 45, POS_Y_THIRD + 5, "OK", BLACK, BLACK, 24, 1);
 800347e:	2301      	movs	r3, #1
 8003480:	9302      	str	r3, [sp, #8]
 8003482:	2318      	movs	r3, #24
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2300      	movs	r3, #0
 800348c:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <setTimer_lcd+0xe0>)
 800348e:	21cd      	movs	r1, #205	@ 0xcd
 8003490:	206e      	movs	r0, #110	@ 0x6e
 8003492:	f001 f805 	bl	80044a0 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 30, POS_Y_FORTH + 5, "CANCEL", BLACK, BLACK, 24, 1);
 8003496:	2301      	movs	r3, #1
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	2318      	movs	r3, #24
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	2300      	movs	r3, #0
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2300      	movs	r3, #0
 80034a4:	4a0b      	ldr	r2, [pc, #44]	@ (80034d4 <setTimer_lcd+0xe4>)
 80034a6:	21ff      	movs	r1, #255	@ 0xff
 80034a8:	205f      	movs	r0, #95	@ 0x5f
 80034aa:	f000 fff9 	bl	80044a0 <lcd_ShowStr>
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bdb0      	pop	{r4, r5, r7, pc}
 80034b4:	0800cba8 	.word	0x0800cba8
 80034b8:	200001e8 	.word	0x200001e8
 80034bc:	200001ec 	.word	0x200001ec
 80034c0:	200001f0 	.word	0x200001f0
 80034c4:	200001f4 	.word	0x200001f4
 80034c8:	200001f8 	.word	0x200001f8
 80034cc:	200001fc 	.word	0x200001fc
 80034d0:	0800cba4 	.word	0x0800cba4
 80034d4:	0800cb90 	.word	0x0800cb90

080034d8 <check_pass_lcd>:

void check_pass_lcd(){
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 80034de:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80034e2:	f000 fa67 	bl	80039b4 <lcd_Clear>
	displayPass(0, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7ff fb96 	bl	8002c1c <displayPass>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD, POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
 80034f0:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	23eb      	movs	r3, #235	@ 0xeb
 80034f8:	22b9      	movs	r2, #185	@ 0xb9
 80034fa:	21c8      	movs	r1, #200	@ 0xc8
 80034fc:	2041      	movs	r0, #65	@ 0x41
 80034fe:	f000 fa8b 	bl	8003a18 <lcd_Fill>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH, POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
 8003502:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	f240 131d 	movw	r3, #285	@ 0x11d
 800350c:	22b9      	movs	r2, #185	@ 0xb9
 800350e:	21fa      	movs	r1, #250	@ 0xfa
 8003510:	2041      	movs	r0, #65	@ 0x41
 8003512:	f000 fa81 	bl	8003a18 <lcd_Fill>

	lcd_ShowStr(POS_X_THIRD + 45, POS_Y_THIRD + 5, "OK", BLACK, BLACK, 24, 1);
 8003516:	2301      	movs	r3, #1
 8003518:	9302      	str	r3, [sp, #8]
 800351a:	2318      	movs	r3, #24
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	2300      	movs	r3, #0
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2300      	movs	r3, #0
 8003524:	4a09      	ldr	r2, [pc, #36]	@ (800354c <check_pass_lcd+0x74>)
 8003526:	21cd      	movs	r1, #205	@ 0xcd
 8003528:	206e      	movs	r0, #110	@ 0x6e
 800352a:	f000 ffb9 	bl	80044a0 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 30, POS_Y_FORTH + 5, "CANCEL", BLACK, BLACK, 24, 1);
 800352e:	2301      	movs	r3, #1
 8003530:	9302      	str	r3, [sp, #8]
 8003532:	2318      	movs	r3, #24
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	2300      	movs	r3, #0
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2300      	movs	r3, #0
 800353c:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <check_pass_lcd+0x78>)
 800353e:	21ff      	movs	r1, #255	@ 0xff
 8003540:	205f      	movs	r0, #95	@ 0x5f
 8003542:	f000 ffad 	bl	80044a0 <lcd_ShowStr>
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	0800cba4 	.word	0x0800cba4
 8003550:	0800cb90 	.word	0x0800cb90

08003554 <home_not_select>:

void home_not_select(){
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 800355a:	f248 4330 	movw	r3, #33840	@ 0x8430
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	23eb      	movs	r3, #235	@ 0xeb
 8003562:	22b9      	movs	r2, #185	@ 0xb9
 8003564:	21c8      	movs	r1, #200	@ 0xc8
 8003566:	2041      	movs	r0, #65	@ 0x41
 8003568:	f000 fb27 	bl	8003bba <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 800356c:	f248 4330 	movw	r3, #33840	@ 0x8430
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	23ea      	movs	r3, #234	@ 0xea
 8003574:	22b8      	movs	r2, #184	@ 0xb8
 8003576:	21c9      	movs	r1, #201	@ 0xc9
 8003578:	2042      	movs	r0, #66	@ 0x42
 800357a:	f000 fb1e 	bl	8003bba <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);

	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 800357e:	f248 4330 	movw	r3, #33840	@ 0x8430
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f240 131d 	movw	r3, #285	@ 0x11d
 8003588:	22b9      	movs	r2, #185	@ 0xb9
 800358a:	21fa      	movs	r1, #250	@ 0xfa
 800358c:	2041      	movs	r0, #65	@ 0x41
 800358e:	f000 fb14 	bl	8003bba <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8003592:	f248 4330 	movw	r3, #33840	@ 0x8430
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	f44f 738e 	mov.w	r3, #284	@ 0x11c
 800359c:	22b8      	movs	r2, #184	@ 0xb8
 800359e:	21fb      	movs	r1, #251	@ 0xfb
 80035a0:	2042      	movs	r0, #66	@ 0x42
 80035a2:	f000 fb0a 	bl	8003bba <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <home_second_lcd>:

void home_second_lcd(){
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af02      	add	r7, sp, #8
	home_not_select();
 80035b2:	f7ff ffcf 	bl	8003554 <home_not_select>
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 80035b6:	2300      	movs	r3, #0
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	23b9      	movs	r3, #185	@ 0xb9
 80035bc:	22b9      	movs	r2, #185	@ 0xb9
 80035be:	2196      	movs	r1, #150	@ 0x96
 80035c0:	2041      	movs	r0, #65	@ 0x41
 80035c2:	f000 fafa 	bl	8003bba <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80035c6:	2300      	movs	r3, #0
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	23b8      	movs	r3, #184	@ 0xb8
 80035cc:	22b8      	movs	r2, #184	@ 0xb8
 80035ce:	2197      	movs	r1, #151	@ 0x97
 80035d0:	2042      	movs	r0, #66	@ 0x42
 80035d2:	f000 faf2 	bl	8003bba <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <home_third_lcd>:

void home_third_lcd(){
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af02      	add	r7, sp, #8
	home_not_select();
 80035e2:	f7ff ffb7 	bl	8003554 <home_not_select>
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80035e6:	2300      	movs	r3, #0
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	23eb      	movs	r3, #235	@ 0xeb
 80035ec:	22b9      	movs	r2, #185	@ 0xb9
 80035ee:	21c8      	movs	r1, #200	@ 0xc8
 80035f0:	2041      	movs	r0, #65	@ 0x41
 80035f2:	f000 fae2 	bl	8003bba <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80035f6:	2300      	movs	r3, #0
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	23ea      	movs	r3, #234	@ 0xea
 80035fc:	22b8      	movs	r2, #184	@ 0xb8
 80035fe:	21c9      	movs	r1, #201	@ 0xc9
 8003600:	2042      	movs	r0, #66	@ 0x42
 8003602:	f000 fada 	bl	8003bba <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 8003606:	bf00      	nop
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <home_forth_lcd>:

void home_forth_lcd(){
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af02      	add	r7, sp, #8
	home_not_select();
 8003612:	f7ff ff9f 	bl	8003554 <home_not_select>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8003616:	2300      	movs	r3, #0
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	f240 131d 	movw	r3, #285	@ 0x11d
 800361e:	22b9      	movs	r2, #185	@ 0xb9
 8003620:	21fa      	movs	r1, #250	@ 0xfa
 8003622:	2041      	movs	r0, #65	@ 0x41
 8003624:	f000 fac9 	bl	8003bba <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8003628:	2300      	movs	r3, #0
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	f44f 738e 	mov.w	r3, #284	@ 0x11c
 8003630:	22b8      	movs	r2, #184	@ 0xb8
 8003632:	21fb      	movs	r1, #251	@ 0xfb
 8003634:	2042      	movs	r0, #66	@ 0x42
 8003636:	f000 fac0 	bl	8003bba <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <key_num_display>:

void key_num_display(){
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af04      	add	r7, sp, #16
	lcd_Fill(0, 170, 240, 320, LIGHTGREEN);
 8003646:	f248 431f 	movw	r3, #33823	@ 0x841f
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003650:	22f0      	movs	r2, #240	@ 0xf0
 8003652:	21aa      	movs	r1, #170	@ 0xaa
 8003654:	2000      	movs	r0, #0
 8003656:	f000 f9df 	bl	8003a18 <lcd_Fill>
	lcd_DrawLine(0, 170, 240, 170, BLACK);
 800365a:	2300      	movs	r3, #0
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	23aa      	movs	r3, #170	@ 0xaa
 8003660:	22f0      	movs	r2, #240	@ 0xf0
 8003662:	21aa      	movs	r1, #170	@ 0xaa
 8003664:	2000      	movs	r0, #0
 8003666:	f000 fa24 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawLine(0, 220, 240, 220, BLACK);
 800366a:	2300      	movs	r3, #0
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	23dc      	movs	r3, #220	@ 0xdc
 8003670:	22f0      	movs	r2, #240	@ 0xf0
 8003672:	21dc      	movs	r1, #220	@ 0xdc
 8003674:	2000      	movs	r0, #0
 8003676:	f000 fa1c 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawLine(0, 270, 240, 270, BLACK);
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8003682:	22f0      	movs	r2, #240	@ 0xf0
 8003684:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8003688:	2000      	movs	r0, #0
 800368a:	f000 fa12 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawLine(0, 320, 240, 320, BLACK);
 800368e:	2300      	movs	r3, #0
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003696:	22f0      	movs	r2, #240	@ 0xf0
 8003698:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800369c:	2000      	movs	r0, #0
 800369e:	f000 fa08 	bl	8003ab2 <lcd_DrawLine>

	lcd_DrawLine(60, 170, 60, 320, BLACK);
 80036a2:	2300      	movs	r3, #0
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80036aa:	223c      	movs	r2, #60	@ 0x3c
 80036ac:	21aa      	movs	r1, #170	@ 0xaa
 80036ae:	203c      	movs	r0, #60	@ 0x3c
 80036b0:	f000 f9ff 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawLine(120, 170, 120, 320, BLACK);
 80036b4:	2300      	movs	r3, #0
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80036bc:	2278      	movs	r2, #120	@ 0x78
 80036be:	21aa      	movs	r1, #170	@ 0xaa
 80036c0:	2078      	movs	r0, #120	@ 0x78
 80036c2:	f000 f9f6 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawLine(180, 170, 180, 320, BLACK);
 80036c6:	2300      	movs	r3, #0
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80036ce:	22b4      	movs	r2, #180	@ 0xb4
 80036d0:	21aa      	movs	r1, #170	@ 0xaa
 80036d2:	20b4      	movs	r0, #180	@ 0xb4
 80036d4:	f000 f9ed 	bl	8003ab2 <lcd_DrawLine>

	lcd_ShowIntNum(22, 180, 1, 1, WHITE, LIGHTGREEN, 24);
 80036d8:	2318      	movs	r3, #24
 80036da:	9302      	str	r3, [sp, #8]
 80036dc:	f248 431f 	movw	r3, #33823	@ 0x841f
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2301      	movs	r3, #1
 80036ea:	2201      	movs	r2, #1
 80036ec:	21b4      	movs	r1, #180	@ 0xb4
 80036ee:	2016      	movs	r0, #22
 80036f0:	f000 fb86 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowIntNum(85, 180, 2, 1, WHITE, LIGHTGREEN, 24);
 80036f4:	2318      	movs	r3, #24
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	f248 431f 	movw	r3, #33823	@ 0x841f
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	2301      	movs	r3, #1
 8003706:	2202      	movs	r2, #2
 8003708:	21b4      	movs	r1, #180	@ 0xb4
 800370a:	2055      	movs	r0, #85	@ 0x55
 800370c:	f000 fb78 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowIntNum(145, 180, 3, 1, WHITE, LIGHTGREEN, 24);
 8003710:	2318      	movs	r3, #24
 8003712:	9302      	str	r3, [sp, #8]
 8003714:	f248 431f 	movw	r3, #33823	@ 0x841f
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2301      	movs	r3, #1
 8003722:	2203      	movs	r2, #3
 8003724:	21b4      	movs	r1, #180	@ 0xb4
 8003726:	2091      	movs	r0, #145	@ 0x91
 8003728:	f000 fb6a 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowChar(205, 180, 'X', WHITE, LIGHTGREEN, 24, 0);
 800372c:	2300      	movs	r3, #0
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	2318      	movs	r3, #24
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	f248 431f 	movw	r3, #33823	@ 0x841f
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800373e:	2258      	movs	r2, #88	@ 0x58
 8003740:	21b4      	movs	r1, #180	@ 0xb4
 8003742:	20cd      	movs	r0, #205	@ 0xcd
 8003744:	f000 fa70 	bl	8003c28 <lcd_ShowChar>

	lcd_ShowIntNum(22, 230, 4, 1, WHITE, LIGHTGREEN, 24);
 8003748:	2318      	movs	r3, #24
 800374a:	9302      	str	r3, [sp, #8]
 800374c:	f248 431f 	movw	r3, #33823	@ 0x841f
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2301      	movs	r3, #1
 800375a:	2204      	movs	r2, #4
 800375c:	21e6      	movs	r1, #230	@ 0xe6
 800375e:	2016      	movs	r0, #22
 8003760:	f000 fb4e 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowIntNum(85, 230, 5, 1, WHITE, LIGHTGREEN, 24);
 8003764:	2318      	movs	r3, #24
 8003766:	9302      	str	r3, [sp, #8]
 8003768:	f248 431f 	movw	r3, #33823	@ 0x841f
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2301      	movs	r3, #1
 8003776:	2205      	movs	r2, #5
 8003778:	21e6      	movs	r1, #230	@ 0xe6
 800377a:	2055      	movs	r0, #85	@ 0x55
 800377c:	f000 fb40 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowIntNum(145, 230, 6, 1, WHITE, LIGHTGREEN, 24);
 8003780:	2318      	movs	r3, #24
 8003782:	9302      	str	r3, [sp, #8]
 8003784:	f248 431f 	movw	r3, #33823	@ 0x841f
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2301      	movs	r3, #1
 8003792:	2206      	movs	r2, #6
 8003794:	21e6      	movs	r1, #230	@ 0xe6
 8003796:	2091      	movs	r0, #145	@ 0x91
 8003798:	f000 fb32 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowIntNum(205, 230, 0, 1, WHITE, LIGHTGREEN, 24);
 800379c:	2318      	movs	r3, #24
 800379e:	9302      	str	r3, [sp, #8]
 80037a0:	f248 431f 	movw	r3, #33823	@ 0x841f
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2301      	movs	r3, #1
 80037ae:	2200      	movs	r2, #0
 80037b0:	21e6      	movs	r1, #230	@ 0xe6
 80037b2:	20cd      	movs	r0, #205	@ 0xcd
 80037b4:	f000 fb24 	bl	8003e00 <lcd_ShowIntNum>

	lcd_ShowIntNum(22, 280, 7, 1, WHITE, LIGHTGREEN, 24);
 80037b8:	2318      	movs	r3, #24
 80037ba:	9302      	str	r3, [sp, #8]
 80037bc:	f248 431f 	movw	r3, #33823	@ 0x841f
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2301      	movs	r3, #1
 80037ca:	2207      	movs	r2, #7
 80037cc:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80037d0:	2016      	movs	r0, #22
 80037d2:	f000 fb15 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowIntNum(85, 280, 8, 1, WHITE, LIGHTGREEN, 24);
 80037d6:	2318      	movs	r3, #24
 80037d8:	9302      	str	r3, [sp, #8]
 80037da:	f248 431f 	movw	r3, #33823	@ 0x841f
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	2301      	movs	r3, #1
 80037e8:	2208      	movs	r2, #8
 80037ea:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80037ee:	2055      	movs	r0, #85	@ 0x55
 80037f0:	f000 fb06 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowIntNum(145, 280, 9, 1, WHITE, LIGHTGREEN, 24);
 80037f4:	2318      	movs	r3, #24
 80037f6:	9302      	str	r3, [sp, #8]
 80037f8:	f248 431f 	movw	r3, #33823	@ 0x841f
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	2301      	movs	r3, #1
 8003806:	2209      	movs	r2, #9
 8003808:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800380c:	2091      	movs	r0, #145	@ 0x91
 800380e:	f000 faf7 	bl	8003e00 <lcd_ShowIntNum>
	lcd_ShowChar(205, 280, 'E', WHITE, LIGHTGREEN, 24, 0);
 8003812:	2300      	movs	r3, #0
 8003814:	9302      	str	r3, [sp, #8]
 8003816:	2318      	movs	r3, #24
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	f248 431f 	movw	r3, #33823	@ 0x841f
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003824:	2245      	movs	r2, #69	@ 0x45
 8003826:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800382a:	20cd      	movs	r0, #205	@ 0xcd
 800382c:	f000 f9fc 	bl	8003c28 <lcd_ShowChar>
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <return_button_off_key>:

void return_button_off_key(){
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af04      	add	r7, sp, #16
	lcd_Fill(0, 170, 240, 320, WHITE);
 800383e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003848:	22f0      	movs	r2, #240	@ 0xf0
 800384a:	21aa      	movs	r1, #170	@ 0xaa
 800384c:	2000      	movs	r0, #0
 800384e:	f000 f8e3 	bl	8003a18 <lcd_Fill>

	lcd_Fill(POS_X_THIRD, POS_Y_THIRD, POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
 8003852:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	23eb      	movs	r3, #235	@ 0xeb
 800385a:	22b9      	movs	r2, #185	@ 0xb9
 800385c:	21c8      	movs	r1, #200	@ 0xc8
 800385e:	2041      	movs	r0, #65	@ 0x41
 8003860:	f000 f8da 	bl	8003a18 <lcd_Fill>
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH, POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
 8003864:	f64b 4340 	movw	r3, #48192	@ 0xbc40
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f240 131d 	movw	r3, #285	@ 0x11d
 800386e:	22b9      	movs	r2, #185	@ 0xb9
 8003870:	21fa      	movs	r1, #250	@ 0xfa
 8003872:	2041      	movs	r0, #65	@ 0x41
 8003874:	f000 f8d0 	bl	8003a18 <lcd_Fill>
	lcd_ShowStr(POS_X_THIRD + 45, POS_Y_THIRD + 5, "OK", BLACK, BLACK, 24, 1);
 8003878:	2301      	movs	r3, #1
 800387a:	9302      	str	r3, [sp, #8]
 800387c:	2318      	movs	r3, #24
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2300      	movs	r3, #0
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2300      	movs	r3, #0
 8003886:	4a0a      	ldr	r2, [pc, #40]	@ (80038b0 <return_button_off_key+0x78>)
 8003888:	21cd      	movs	r1, #205	@ 0xcd
 800388a:	206e      	movs	r0, #110	@ 0x6e
 800388c:	f000 fe08 	bl	80044a0 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 30, POS_Y_FORTH + 5, "CANCEL", BLACK, BLACK, 24, 1);
 8003890:	2301      	movs	r3, #1
 8003892:	9302      	str	r3, [sp, #8]
 8003894:	2318      	movs	r3, #24
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	2300      	movs	r3, #0
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2300      	movs	r3, #0
 800389e:	4a05      	ldr	r2, [pc, #20]	@ (80038b4 <return_button_off_key+0x7c>)
 80038a0:	21ff      	movs	r1, #255	@ 0xff
 80038a2:	205f      	movs	r0, #95	@ 0x5f
 80038a4:	f000 fdfc 	bl	80044a0 <lcd_ShowStr>
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	0800cba4 	.word	0x0800cba4
 80038b4:	0800cb90 	.word	0x0800cb90

080038b8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80038c2:	4a04      	ldr	r2, [pc, #16]	@ (80038d4 <LCD_WR_REG+0x1c>)
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	8013      	strh	r3, [r2, #0]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	600ffffe 	.word	0x600ffffe

080038d8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80038e2:	4a04      	ldr	r2, [pc, #16]	@ (80038f4 <LCD_WR_DATA+0x1c>)
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	8053      	strh	r3, [r2, #2]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	600ffffe 	.word	0x600ffffe

080038f8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80038fe:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <LCD_RD_DATA+0x20>)
 8003900:	885b      	ldrh	r3, [r3, #2]
 8003902:	b29b      	uxth	r3, r3
 8003904:	80fb      	strh	r3, [r7, #6]
	return ram;
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	b29b      	uxth	r3, r3
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	600ffffe 	.word	0x600ffffe

0800391c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4604      	mov	r4, r0
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4623      	mov	r3, r4
 800392c:	80fb      	strh	r3, [r7, #6]
 800392e:	4603      	mov	r3, r0
 8003930:	80bb      	strh	r3, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	807b      	strh	r3, [r7, #2]
 8003936:	4613      	mov	r3, r2
 8003938:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800393a:	202a      	movs	r0, #42	@ 0x2a
 800393c:	f7ff ffbc 	bl	80038b8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	b29b      	uxth	r3, r3
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ffc6 	bl	80038d8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	b29b      	uxth	r3, r3
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ffc0 	bl	80038d8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8003958:	887b      	ldrh	r3, [r7, #2]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	b29b      	uxth	r3, r3
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ffba 	bl	80038d8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	b29b      	uxth	r3, r3
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ffb4 	bl	80038d8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8003970:	202b      	movs	r0, #43	@ 0x2b
 8003972:	f7ff ffa1 	bl	80038b8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8003976:	88bb      	ldrh	r3, [r7, #4]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	b29b      	uxth	r3, r3
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ffab 	bl	80038d8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8003982:	88bb      	ldrh	r3, [r7, #4]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	b29b      	uxth	r3, r3
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ffa5 	bl	80038d8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800398e:	883b      	ldrh	r3, [r7, #0]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	b29b      	uxth	r3, r3
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff9f 	bl	80038d8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800399a:	883b      	ldrh	r3, [r7, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff99 	bl	80038d8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80039a6:	202c      	movs	r0, #44	@ 0x2c
 80039a8:	f7ff ff86 	bl	80038b8 <LCD_WR_REG>
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}

080039b4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80039be:	4b15      	ldr	r3, [pc, #84]	@ (8003a14 <lcd_Clear+0x60>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <lcd_Clear+0x60>)
 80039c8:	885b      	ldrh	r3, [r3, #2]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2100      	movs	r1, #0
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7ff ffa3 	bl	800391c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	81fb      	strh	r3, [r7, #14]
 80039da:	e011      	b.n	8003a00 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80039dc:	2300      	movs	r3, #0
 80039de:	81bb      	strh	r3, [r7, #12]
 80039e0:	e006      	b.n	80039f0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff77 	bl	80038d8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80039ea:	89bb      	ldrh	r3, [r7, #12]
 80039ec:	3301      	adds	r3, #1
 80039ee:	81bb      	strh	r3, [r7, #12]
 80039f0:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <lcd_Clear+0x60>)
 80039f2:	885b      	ldrh	r3, [r3, #2]
 80039f4:	89ba      	ldrh	r2, [r7, #12]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d3f3      	bcc.n	80039e2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80039fa:	89fb      	ldrh	r3, [r7, #14]
 80039fc:	3301      	adds	r3, #1
 80039fe:	81fb      	strh	r3, [r7, #14]
 8003a00:	4b04      	ldr	r3, [pc, #16]	@ (8003a14 <lcd_Clear+0x60>)
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	89fa      	ldrh	r2, [r7, #14]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3e8      	bcc.n	80039dc <lcd_Clear+0x28>
		}
	}
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	200002bc 	.word	0x200002bc

08003a18 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4623      	mov	r3, r4
 8003a28:	80fb      	strh	r3, [r7, #6]
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	80bb      	strh	r3, [r7, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	807b      	strh	r3, [r7, #2]
 8003a32:	4613      	mov	r3, r2
 8003a34:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8003a36:	887b      	ldrh	r3, [r7, #2]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	883b      	ldrh	r3, [r7, #0]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	88b9      	ldrh	r1, [r7, #4]
 8003a44:	88f8      	ldrh	r0, [r7, #6]
 8003a46:	f7ff ff69 	bl	800391c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8003a4a:	88bb      	ldrh	r3, [r7, #4]
 8003a4c:	81fb      	strh	r3, [r7, #14]
 8003a4e:	e010      	b.n	8003a72 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	81bb      	strh	r3, [r7, #12]
 8003a54:	e006      	b.n	8003a64 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8003a56:	8c3b      	ldrh	r3, [r7, #32]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff3d 	bl	80038d8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8003a5e:	89bb      	ldrh	r3, [r7, #12]
 8003a60:	3301      	adds	r3, #1
 8003a62:	81bb      	strh	r3, [r7, #12]
 8003a64:	89ba      	ldrh	r2, [r7, #12]
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3f4      	bcc.n	8003a56 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8003a6c:	89fb      	ldrh	r3, [r7, #14]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	81fb      	strh	r3, [r7, #14]
 8003a72:	89fa      	ldrh	r2, [r7, #14]
 8003a74:	883b      	ldrh	r3, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3ea      	bcc.n	8003a50 <lcd_Fill+0x38>
		}
	}
}
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd90      	pop	{r4, r7, pc}

08003a84 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	80fb      	strh	r3, [r7, #6]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	80bb      	strh	r3, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8003a96:	88bb      	ldrh	r3, [r7, #4]
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	88b9      	ldrh	r1, [r7, #4]
 8003a9c:	88f8      	ldrh	r0, [r7, #6]
 8003a9e:	f7ff ff3d 	bl	800391c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff17 	bl	80038d8 <LCD_WR_DATA>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8003ab2:	b590      	push	{r4, r7, lr}
 8003ab4:	b08d      	sub	sp, #52	@ 0x34
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4604      	mov	r4, r0
 8003aba:	4608      	mov	r0, r1
 8003abc:	4611      	mov	r1, r2
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4623      	mov	r3, r4
 8003ac2:	80fb      	strh	r3, [r7, #6]
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	80bb      	strh	r3, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]
 8003acc:	4613      	mov	r3, r2
 8003ace:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8003ad8:	887a      	ldrh	r2, [r7, #2]
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8003ae0:	883a      	ldrh	r2, [r7, #0]
 8003ae2:	88bb      	ldrh	r3, [r7, #4]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8003aec:	88bb      	ldrh	r3, [r7, #4]
 8003aee:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	dd02      	ble.n	8003afc <lcd_DrawLine+0x4a>
 8003af6:	2301      	movs	r3, #1
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e00b      	b.n	8003b14 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <lcd_DrawLine+0x56>
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e005      	b.n	8003b14 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8003b08:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	425b      	negs	r3, r3
 8003b12:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	dd02      	ble.n	8003b20 <lcd_DrawLine+0x6e>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	e00b      	b.n	8003b38 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <lcd_DrawLine+0x7a>
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	e005      	b.n	8003b38 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	425b      	negs	r3, r3
 8003b36:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8003b38:	6a3a      	ldr	r2, [r7, #32]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dd02      	ble.n	8003b46 <lcd_DrawLine+0x94>
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e001      	b.n	8003b4a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003b4e:	e02b      	b.n	8003ba8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	b291      	uxth	r1, r2
 8003b58:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ff91 	bl	8003a84 <lcd_DrawPoint>
		xerr+=delta_x;
 8003b62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	4413      	add	r3, r2
 8003b68:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 8003b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	dd07      	ble.n	8003b8a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8003b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	4413      	add	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	dd07      	ble.n	8003ba2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8003b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8003ba2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003ba8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	dacf      	bge.n	8003b50 <lcd_DrawLine+0x9e>
		}
	}
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3734      	adds	r7, #52	@ 0x34
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd90      	pop	{r4, r7, pc}

08003bba <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8003bba:	b590      	push	{r4, r7, lr}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af02      	add	r7, sp, #8
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	4608      	mov	r0, r1
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4623      	mov	r3, r4
 8003bca:	80fb      	strh	r3, [r7, #6]
 8003bcc:	4603      	mov	r3, r0
 8003bce:	80bb      	strh	r3, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8003bd8:	88bc      	ldrh	r4, [r7, #4]
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	88b9      	ldrh	r1, [r7, #4]
 8003bde:	88f8      	ldrh	r0, [r7, #6]
 8003be0:	8b3b      	ldrh	r3, [r7, #24]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4623      	mov	r3, r4
 8003be6:	f7ff ff64 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8003bea:	883c      	ldrh	r4, [r7, #0]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	88b9      	ldrh	r1, [r7, #4]
 8003bf0:	88f8      	ldrh	r0, [r7, #6]
 8003bf2:	8b3b      	ldrh	r3, [r7, #24]
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	f7ff ff5b 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8003bfc:	883c      	ldrh	r4, [r7, #0]
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	8839      	ldrh	r1, [r7, #0]
 8003c02:	88f8      	ldrh	r0, [r7, #6]
 8003c04:	8b3b      	ldrh	r3, [r7, #24]
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4623      	mov	r3, r4
 8003c0a:	f7ff ff52 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8003c0e:	883c      	ldrh	r4, [r7, #0]
 8003c10:	887a      	ldrh	r2, [r7, #2]
 8003c12:	88b9      	ldrh	r1, [r7, #4]
 8003c14:	8878      	ldrh	r0, [r7, #2]
 8003c16:	8b3b      	ldrh	r3, [r7, #24]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	f7ff ff49 	bl	8003ab2 <lcd_DrawLine>
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd90      	pop	{r4, r7, pc}

08003c28 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4604      	mov	r4, r0
 8003c30:	4608      	mov	r0, r1
 8003c32:	4611      	mov	r1, r2
 8003c34:	461a      	mov	r2, r3
 8003c36:	4623      	mov	r3, r4
 8003c38:	80fb      	strh	r3, [r7, #6]
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	80bb      	strh	r3, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
 8003c42:	4613      	mov	r3, r2
 8003c44:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8003c4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	08db      	lsrs	r3, r3, #3
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bf14      	ite	ne
 8003c6a:	2301      	movne	r3, #1
 8003c6c:	2300      	moveq	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	fb12 f303 	smulbb	r3, r2, r3
 8003c7e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	3b20      	subs	r3, #32
 8003c84:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29c      	uxth	r4, r3
 8003c94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	88bb      	ldrh	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	88b9      	ldrh	r1, [r7, #4]
 8003ca6:	88f8      	ldrh	r0, [r7, #6]
 8003ca8:	4622      	mov	r2, r4
 8003caa:	f7ff fe37 	bl	800391c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	827b      	strh	r3, [r7, #18]
 8003cb2:	e07a      	b.n	8003daa <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8003cb4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	d028      	beq.n	8003d0e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8003cbc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d108      	bne.n	8003cd6 <lcd_ShowChar+0xae>
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	8a7b      	ldrh	r3, [r7, #18]
 8003cc8:	493c      	ldr	r1, [pc, #240]	@ (8003dbc <lcd_ShowChar+0x194>)
 8003cca:	0112      	lsls	r2, r2, #4
 8003ccc:	440a      	add	r2, r1
 8003cce:	4413      	add	r3, r2
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	75fb      	strb	r3, [r7, #23]
 8003cd4:	e01b      	b.n	8003d0e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8003cd6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003cda:	2b18      	cmp	r3, #24
 8003cdc:	d10b      	bne.n	8003cf6 <lcd_ShowChar+0xce>
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	8a79      	ldrh	r1, [r7, #18]
 8003ce2:	4837      	ldr	r0, [pc, #220]	@ (8003dc0 <lcd_ShowChar+0x198>)
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	4413      	add	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	4403      	add	r3, r0
 8003cee:	440b      	add	r3, r1
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	75fb      	strb	r3, [r7, #23]
 8003cf4:	e00b      	b.n	8003d0e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8003cf6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d15a      	bne.n	8003db4 <lcd_ShowChar+0x18c>
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	8a7b      	ldrh	r3, [r7, #18]
 8003d02:	4930      	ldr	r1, [pc, #192]	@ (8003dc4 <lcd_ShowChar+0x19c>)
 8003d04:	0192      	lsls	r2, r2, #6
 8003d06:	440a      	add	r2, r1
 8003d08:	4413      	add	r3, r2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75bb      	strb	r3, [r7, #22]
 8003d12:	e044      	b.n	8003d9e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8003d14:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d120      	bne.n	8003d5e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8003d1c:	7dfa      	ldrb	r2, [r7, #23]
 8003d1e:	7dbb      	ldrb	r3, [r7, #22]
 8003d20:	fa42 f303 	asr.w	r3, r2, r3
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <lcd_ShowChar+0x10e>
 8003d2c:	883b      	ldrh	r3, [r7, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fdd2 	bl	80038d8 <LCD_WR_DATA>
 8003d34:	e003      	b.n	8003d3e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8003d36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fdcd 	bl	80038d8 <LCD_WR_DATA>
				m++;
 8003d3e:	7d7b      	ldrb	r3, [r7, #21]
 8003d40:	3301      	adds	r3, #1
 8003d42:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8003d44:	7d7b      	ldrb	r3, [r7, #21]
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d4c:	fb01 f202 	mul.w	r2, r1, r2
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d11f      	bne.n	8003d98 <lcd_ShowChar+0x170>
				{
					m=0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	757b      	strb	r3, [r7, #21]
					break;
 8003d5c:	e022      	b.n	8003da4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8003d5e:	7dfa      	ldrb	r2, [r7, #23]
 8003d60:	7dbb      	ldrb	r3, [r7, #22]
 8003d62:	fa42 f303 	asr.w	r3, r2, r3
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <lcd_ShowChar+0x152>
 8003d6e:	883a      	ldrh	r2, [r7, #0]
 8003d70:	88b9      	ldrh	r1, [r7, #4]
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fe85 	bl	8003a84 <lcd_DrawPoint>
				x++;
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	8a3b      	ldrh	r3, [r7, #16]
 8003d84:	1ad2      	subs	r2, r2, r3
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d105      	bne.n	8003d98 <lcd_ShowChar+0x170>
				{
					x=x0;
 8003d8c:	8a3b      	ldrh	r3, [r7, #16]
 8003d8e:	80fb      	strh	r3, [r7, #6]
					y++;
 8003d90:	88bb      	ldrh	r3, [r7, #4]
 8003d92:	3301      	adds	r3, #1
 8003d94:	80bb      	strh	r3, [r7, #4]
					break;
 8003d96:	e005      	b.n	8003da4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8003d98:	7dbb      	ldrb	r3, [r7, #22]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	75bb      	strb	r3, [r7, #22]
 8003d9e:	7dbb      	ldrb	r3, [r7, #22]
 8003da0:	2b07      	cmp	r3, #7
 8003da2:	d9b7      	bls.n	8003d14 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8003da4:	8a7b      	ldrh	r3, [r7, #18]
 8003da6:	3301      	adds	r3, #1
 8003da8:	827b      	strh	r3, [r7, #18]
 8003daa:	8a7a      	ldrh	r2, [r7, #18]
 8003dac:	89bb      	ldrh	r3, [r7, #12]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d380      	bcc.n	8003cb4 <lcd_ShowChar+0x8c>
 8003db2:	e000      	b.n	8003db6 <lcd_ShowChar+0x18e>
		else return;
 8003db4:	bf00      	nop
				}
			}
		}
	}
}
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd90      	pop	{r4, r7, pc}
 8003dbc:	0800cc6c 	.word	0x0800cc6c
 8003dc0:	0800d25c 	.word	0x0800d25c
 8003dc4:	0800e42c 	.word	0x0800e42c

08003dc8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	460a      	mov	r2, r1
 8003dd2:	71fb      	strb	r3, [r7, #7]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8003ddc:	e004      	b.n	8003de8 <mypow+0x20>
 8003dde:	79fa      	ldrb	r2, [r7, #7]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	79bb      	ldrb	r3, [r7, #6]
 8003dea:	1e5a      	subs	r2, r3, #1
 8003dec:	71ba      	strb	r2, [r7, #6]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f5      	bne.n	8003dde <mypow+0x16>
	return result;
 8003df2:	68fb      	ldr	r3, [r7, #12]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b089      	sub	sp, #36	@ 0x24
 8003e04:	af04      	add	r7, sp, #16
 8003e06:	4604      	mov	r4, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	80fb      	strh	r3, [r7, #6]
 8003e12:	4603      	mov	r3, r0
 8003e14:	80bb      	strh	r3, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	807b      	strh	r3, [r7, #2]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8003e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
 8003e2e:	e059      	b.n	8003ee4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8003e30:	887c      	ldrh	r4, [r7, #2]
 8003e32:	787a      	ldrb	r2, [r7, #1]
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	4619      	mov	r1, r3
 8003e40:	200a      	movs	r0, #10
 8003e42:	f7ff ffc1 	bl	8003dc8 <mypow>
 8003e46:	4603      	mov	r3, r0
 8003e48:	fbb4 f1f3 	udiv	r1, r4, r3
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef8 <lcd_ShowIntNum+0xf8>)
 8003e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e52:	08da      	lsrs	r2, r3, #3
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	1aca      	subs	r2, r1, r3
 8003e5e:	4613      	mov	r3, r2
 8003e60:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8003e62:	7bbb      	ldrb	r3, [r7, #14]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d121      	bne.n	8003eac <lcd_ShowIntNum+0xac>
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	787b      	ldrb	r3, [r7, #1]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	da1c      	bge.n	8003eac <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8003e72:	7b3b      	ldrb	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d117      	bne.n	8003ea8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	7b7b      	ldrb	r3, [r7, #13]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	fb12 f303 	smulbb	r3, r2, r3
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	4413      	add	r3, r2
 8003e8a:	b298      	uxth	r0, r3
 8003e8c:	8c3a      	ldrh	r2, [r7, #32]
 8003e8e:	88b9      	ldrh	r1, [r7, #4]
 8003e90:	2300      	movs	r3, #0
 8003e92:	9302      	str	r3, [sp, #8]
 8003e94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f7ff fec1 	bl	8003c28 <lcd_ShowChar>
				continue;
 8003ea6:	e01a      	b.n	8003ede <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	7b7b      	ldrb	r3, [r7, #13]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	fb12 f303 	smulbb	r3, r2, r3
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	b298      	uxth	r0, r3
 8003ec0:	7b3b      	ldrb	r3, [r7, #12]
 8003ec2:	3330      	adds	r3, #48	@ 0x30
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	8c3c      	ldrh	r4, [r7, #32]
 8003ec8:	88b9      	ldrh	r1, [r7, #4]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9302      	str	r3, [sp, #8]
 8003ece:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	4623      	mov	r3, r4
 8003eda:	f7ff fea5 	bl	8003c28 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	787b      	ldrb	r3, [r7, #1]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d3a1      	bcc.n	8003e30 <lcd_ShowIntNum+0x30>
	}
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd90      	pop	{r4, r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	cccccccd 	.word	0xcccccccd

08003efc <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	80fb      	strh	r3, [r7, #6]
 8003f0e:	4603      	mov	r3, r0
 8003f10:	80bb      	strh	r3, [r7, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	807b      	strh	r3, [r7, #2]
 8003f16:	4613      	mov	r3, r2
 8003f18:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	887b      	ldrh	r3, [r7, #2]
 8003f22:	4413      	add	r3, r2
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29c      	uxth	r4, r3
 8003f2a:	88ba      	ldrh	r2, [r7, #4]
 8003f2c:	883b      	ldrh	r3, [r7, #0]
 8003f2e:	4413      	add	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	88b9      	ldrh	r1, [r7, #4]
 8003f38:	88f8      	ldrh	r0, [r7, #6]
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	f7ff fcee 	bl	800391c <lcd_AddressSet>
	for(i=0;i<length;i++)
 8003f40:	2300      	movs	r3, #0
 8003f42:	82fb      	strh	r3, [r7, #22]
 8003f44:	e027      	b.n	8003f96 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	82bb      	strh	r3, [r7, #20]
 8003f4a:	e01d      	b.n	8003f88 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f52:	4413      	add	r3, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	b21a      	sxth	r2, r3
 8003f6c:	7bbb      	ldrb	r3, [r7, #14]
 8003f6e:	b21b      	sxth	r3, r3
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b21b      	sxth	r3, r3
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fcae 	bl	80038d8 <LCD_WR_DATA>
			k++;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8003f82:	8abb      	ldrh	r3, [r7, #20]
 8003f84:	3301      	adds	r3, #1
 8003f86:	82bb      	strh	r3, [r7, #20]
 8003f88:	8aba      	ldrh	r2, [r7, #20]
 8003f8a:	883b      	ldrh	r3, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d3dd      	bcc.n	8003f4c <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8003f90:	8afb      	ldrh	r3, [r7, #22]
 8003f92:	3301      	adds	r3, #1
 8003f94:	82fb      	strh	r3, [r7, #22]
 8003f96:	8afa      	ldrh	r2, [r7, #22]
 8003f98:	887b      	ldrh	r3, [r7, #2]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3d3      	bcc.n	8003f46 <lcd_ShowPicture+0x4a>
		}
	}
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}

08003fa8 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d007      	beq.n	8003fd2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <lcd_SetDir+0x44>)
 8003fc4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003fc8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8003fca:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <lcd_SetDir+0x44>)
 8003fcc:	22f0      	movs	r2, #240	@ 0xf0
 8003fce:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8003fd0:	e006      	b.n	8003fe0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8003fd2:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <lcd_SetDir+0x44>)
 8003fd4:	22f0      	movs	r2, #240	@ 0xf0
 8003fd6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8003fd8:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <lcd_SetDir+0x44>)
 8003fda:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003fde:	805a      	strh	r2, [r3, #2]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	200002bc 	.word	0x200002bc

08003ff0 <lcd_init>:


void lcd_init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ffa:	48aa      	ldr	r0, [pc, #680]	@ (80042a4 <lcd_init+0x2b4>)
 8003ffc:	f004 f808 	bl	8008010 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8004000:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004004:	f002 ff3c 	bl	8006e80 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8004008:	2201      	movs	r2, #1
 800400a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800400e:	48a5      	ldr	r0, [pc, #660]	@ (80042a4 <lcd_init+0x2b4>)
 8004010:	f003 fffe 	bl	8008010 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8004014:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004018:	f002 ff32 	bl	8006e80 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800401c:	2000      	movs	r0, #0
 800401e:	f7ff ffc3 	bl	8003fa8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8004022:	20d3      	movs	r0, #211	@ 0xd3
 8004024:	f7ff fc48 	bl	80038b8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8004028:	f7ff fc66 	bl	80038f8 <LCD_RD_DATA>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	4b9d      	ldr	r3, [pc, #628]	@ (80042a8 <lcd_init+0x2b8>)
 8004032:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8004034:	f7ff fc60 	bl	80038f8 <LCD_RD_DATA>
 8004038:	4603      	mov	r3, r0
 800403a:	461a      	mov	r2, r3
 800403c:	4b9a      	ldr	r3, [pc, #616]	@ (80042a8 <lcd_init+0x2b8>)
 800403e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8004040:	f7ff fc5a 	bl	80038f8 <LCD_RD_DATA>
 8004044:	4603      	mov	r3, r0
 8004046:	461a      	mov	r2, r3
 8004048:	4b97      	ldr	r3, [pc, #604]	@ (80042a8 <lcd_init+0x2b8>)
 800404a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800404c:	4b96      	ldr	r3, [pc, #600]	@ (80042a8 <lcd_init+0x2b8>)
 800404e:	889b      	ldrh	r3, [r3, #4]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b94      	ldr	r3, [pc, #592]	@ (80042a8 <lcd_init+0x2b8>)
 8004056:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8004058:	f7ff fc4e 	bl	80038f8 <LCD_RD_DATA>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	4b91      	ldr	r3, [pc, #580]	@ (80042a8 <lcd_init+0x2b8>)
 8004062:	889b      	ldrh	r3, [r3, #4]
 8004064:	4313      	orrs	r3, r2
 8004066:	b29a      	uxth	r2, r3
 8004068:	4b8f      	ldr	r3, [pc, #572]	@ (80042a8 <lcd_init+0x2b8>)
 800406a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800406c:	20cf      	movs	r0, #207	@ 0xcf
 800406e:	f7ff fc23 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004072:	2000      	movs	r0, #0
 8004074:	f7ff fc30 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8004078:	20c1      	movs	r0, #193	@ 0xc1
 800407a:	f7ff fc2d 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800407e:	2030      	movs	r0, #48	@ 0x30
 8004080:	f7ff fc2a 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8004084:	20ed      	movs	r0, #237	@ 0xed
 8004086:	f7ff fc17 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800408a:	2064      	movs	r0, #100	@ 0x64
 800408c:	f7ff fc24 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8004090:	2003      	movs	r0, #3
 8004092:	f7ff fc21 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8004096:	2012      	movs	r0, #18
 8004098:	f7ff fc1e 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800409c:	2081      	movs	r0, #129	@ 0x81
 800409e:	f7ff fc1b 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80040a2:	20e8      	movs	r0, #232	@ 0xe8
 80040a4:	f7ff fc08 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80040a8:	2085      	movs	r0, #133	@ 0x85
 80040aa:	f7ff fc15 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80040ae:	2010      	movs	r0, #16
 80040b0:	f7ff fc12 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80040b4:	207a      	movs	r0, #122	@ 0x7a
 80040b6:	f7ff fc0f 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80040ba:	20cb      	movs	r0, #203	@ 0xcb
 80040bc:	f7ff fbfc 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80040c0:	2039      	movs	r0, #57	@ 0x39
 80040c2:	f7ff fc09 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80040c6:	202c      	movs	r0, #44	@ 0x2c
 80040c8:	f7ff fc06 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80040cc:	2000      	movs	r0, #0
 80040ce:	f7ff fc03 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80040d2:	2034      	movs	r0, #52	@ 0x34
 80040d4:	f7ff fc00 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80040d8:	2002      	movs	r0, #2
 80040da:	f7ff fbfd 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80040de:	20f7      	movs	r0, #247	@ 0xf7
 80040e0:	f7ff fbea 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80040e4:	2020      	movs	r0, #32
 80040e6:	f7ff fbf7 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80040ea:	20ea      	movs	r0, #234	@ 0xea
 80040ec:	f7ff fbe4 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80040f0:	2000      	movs	r0, #0
 80040f2:	f7ff fbf1 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80040f6:	2000      	movs	r0, #0
 80040f8:	f7ff fbee 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80040fc:	20c0      	movs	r0, #192	@ 0xc0
 80040fe:	f7ff fbdb 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8004102:	201b      	movs	r0, #27
 8004104:	f7ff fbe8 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8004108:	20c1      	movs	r0, #193	@ 0xc1
 800410a:	f7ff fbd5 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800410e:	2001      	movs	r0, #1
 8004110:	f7ff fbe2 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8004114:	20c5      	movs	r0, #197	@ 0xc5
 8004116:	f7ff fbcf 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800411a:	2030      	movs	r0, #48	@ 0x30
 800411c:	f7ff fbdc 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8004120:	2030      	movs	r0, #48	@ 0x30
 8004122:	f7ff fbd9 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8004126:	20c7      	movs	r0, #199	@ 0xc7
 8004128:	f7ff fbc6 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800412c:	20b7      	movs	r0, #183	@ 0xb7
 800412e:	f7ff fbd3 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8004132:	2036      	movs	r0, #54	@ 0x36
 8004134:	f7ff fbc0 	bl	80038b8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8004138:	2008      	movs	r0, #8
 800413a:	f7ff fbcd 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800413e:	203a      	movs	r0, #58	@ 0x3a
 8004140:	f7ff fbba 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8004144:	2055      	movs	r0, #85	@ 0x55
 8004146:	f7ff fbc7 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800414a:	20b1      	movs	r0, #177	@ 0xb1
 800414c:	f7ff fbb4 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004150:	2000      	movs	r0, #0
 8004152:	f7ff fbc1 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8004156:	201a      	movs	r0, #26
 8004158:	f7ff fbbe 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800415c:	20b6      	movs	r0, #182	@ 0xb6
 800415e:	f7ff fbab 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8004162:	200a      	movs	r0, #10
 8004164:	f7ff fbb8 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8004168:	20a2      	movs	r0, #162	@ 0xa2
 800416a:	f7ff fbb5 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800416e:	20f2      	movs	r0, #242	@ 0xf2
 8004170:	f7ff fba2 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8004174:	2000      	movs	r0, #0
 8004176:	f7ff fbaf 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800417a:	2026      	movs	r0, #38	@ 0x26
 800417c:	f7ff fb9c 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8004180:	2001      	movs	r0, #1
 8004182:	f7ff fba9 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8004186:	20e0      	movs	r0, #224	@ 0xe0
 8004188:	f7ff fb96 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800418c:	200f      	movs	r0, #15
 800418e:	f7ff fba3 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8004192:	202a      	movs	r0, #42	@ 0x2a
 8004194:	f7ff fba0 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8004198:	2028      	movs	r0, #40	@ 0x28
 800419a:	f7ff fb9d 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800419e:	2008      	movs	r0, #8
 80041a0:	f7ff fb9a 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80041a4:	200e      	movs	r0, #14
 80041a6:	f7ff fb97 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80041aa:	2008      	movs	r0, #8
 80041ac:	f7ff fb94 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80041b0:	2054      	movs	r0, #84	@ 0x54
 80041b2:	f7ff fb91 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80041b6:	20a9      	movs	r0, #169	@ 0xa9
 80041b8:	f7ff fb8e 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80041bc:	2043      	movs	r0, #67	@ 0x43
 80041be:	f7ff fb8b 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80041c2:	200a      	movs	r0, #10
 80041c4:	f7ff fb88 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80041c8:	200f      	movs	r0, #15
 80041ca:	f7ff fb85 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7ff fb82 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7ff fb7f 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041da:	2000      	movs	r0, #0
 80041dc:	f7ff fb7c 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80041e0:	2000      	movs	r0, #0
 80041e2:	f7ff fb79 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80041e6:	20e1      	movs	r0, #225	@ 0xe1
 80041e8:	f7ff fb66 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80041ec:	2000      	movs	r0, #0
 80041ee:	f7ff fb73 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80041f2:	2015      	movs	r0, #21
 80041f4:	f7ff fb70 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80041f8:	2017      	movs	r0, #23
 80041fa:	f7ff fb6d 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80041fe:	2007      	movs	r0, #7
 8004200:	f7ff fb6a 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8004204:	2011      	movs	r0, #17
 8004206:	f7ff fb67 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800420a:	2006      	movs	r0, #6
 800420c:	f7ff fb64 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8004210:	202b      	movs	r0, #43	@ 0x2b
 8004212:	f7ff fb61 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8004216:	2056      	movs	r0, #86	@ 0x56
 8004218:	f7ff fb5e 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800421c:	203c      	movs	r0, #60	@ 0x3c
 800421e:	f7ff fb5b 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8004222:	2005      	movs	r0, #5
 8004224:	f7ff fb58 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8004228:	2010      	movs	r0, #16
 800422a:	f7ff fb55 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800422e:	200f      	movs	r0, #15
 8004230:	f7ff fb52 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8004234:	203f      	movs	r0, #63	@ 0x3f
 8004236:	f7ff fb4f 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800423a:	203f      	movs	r0, #63	@ 0x3f
 800423c:	f7ff fb4c 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8004240:	200f      	movs	r0, #15
 8004242:	f7ff fb49 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8004246:	202b      	movs	r0, #43	@ 0x2b
 8004248:	f7ff fb36 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800424c:	2000      	movs	r0, #0
 800424e:	f7ff fb43 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004252:	2000      	movs	r0, #0
 8004254:	f7ff fb40 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8004258:	2001      	movs	r0, #1
 800425a:	f7ff fb3d 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800425e:	203f      	movs	r0, #63	@ 0x3f
 8004260:	f7ff fb3a 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8004264:	202a      	movs	r0, #42	@ 0x2a
 8004266:	f7ff fb27 	bl	80038b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800426a:	2000      	movs	r0, #0
 800426c:	f7ff fb34 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004270:	2000      	movs	r0, #0
 8004272:	f7ff fb31 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8004276:	2000      	movs	r0, #0
 8004278:	f7ff fb2e 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800427c:	20ef      	movs	r0, #239	@ 0xef
 800427e:	f7ff fb2b 	bl	80038d8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8004282:	2011      	movs	r0, #17
 8004284:	f7ff fb18 	bl	80038b8 <LCD_WR_REG>
	HAL_Delay(120);
 8004288:	2078      	movs	r0, #120	@ 0x78
 800428a:	f002 fdf9 	bl	8006e80 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800428e:	2029      	movs	r0, #41	@ 0x29
 8004290:	f7ff fb12 	bl	80038b8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8004294:	2201      	movs	r2, #1
 8004296:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800429a:	4804      	ldr	r0, [pc, #16]	@ (80042ac <lcd_init+0x2bc>)
 800429c:	f003 feb8 	bl	8008010 <HAL_GPIO_WritePin>
}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40020800 	.word	0x40020800
 80042a8:	200002bc 	.word	0x200002bc
 80042ac:	40020000 	.word	0x40020000

080042b0 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	b298      	uxth	r0, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	8b3a      	ldrh	r2, [r7, #24]
 80042d8:	4619      	mov	r1, r3
 80042da:	f7ff fbd3 	bl	8003a84 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	b298      	uxth	r0, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8b3a      	ldrh	r2, [r7, #24]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f7ff fbc3 	bl	8003a84 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	b29a      	uxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	b29b      	uxth	r3, r3
 8004306:	4413      	add	r3, r2
 8004308:	b298      	uxth	r0, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	b29a      	uxth	r2, r3
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	b29b      	uxth	r3, r3
 8004316:	8b3a      	ldrh	r2, [r7, #24]
 8004318:	4619      	mov	r1, r3
 800431a:	f7ff fbb3 	bl	8003a84 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	b29b      	uxth	r3, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	b298      	uxth	r0, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	b29a      	uxth	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	8b3a      	ldrh	r2, [r7, #24]
 8004338:	4619      	mov	r1, r3
 800433a:	f7ff fba3 	bl	8003a84 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	b29a      	uxth	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	4413      	add	r3, r2
 8004348:	b298      	uxth	r0, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	b29b      	uxth	r3, r3
 8004352:	4413      	add	r3, r2
 8004354:	b29b      	uxth	r3, r3
 8004356:	8b3a      	ldrh	r2, [r7, #24]
 8004358:	4619      	mov	r1, r3
 800435a:	f7ff fb93 	bl	8003a84 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	b29a      	uxth	r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	b298      	uxth	r0, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	b29b      	uxth	r3, r3
 8004372:	4413      	add	r3, r2
 8004374:	b29b      	uxth	r3, r3
 8004376:	8b3a      	ldrh	r2, [r7, #24]
 8004378:	4619      	mov	r1, r3
 800437a:	f7ff fb83 	bl	8003a84 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	b29a      	uxth	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	4413      	add	r3, r2
 8004388:	b298      	uxth	r0, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	b29b      	uxth	r3, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	b29b      	uxth	r3, r3
 8004396:	8b3a      	ldrh	r2, [r7, #24]
 8004398:	4619      	mov	r1, r3
 800439a:	f7ff fb73 	bl	8003a84 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	b298      	uxth	r0, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8b3a      	ldrh	r2, [r7, #24]
 80043b8:	4619      	mov	r1, r3
 80043ba:	f7ff fb63 	bl	8003a84 <lcd_DrawPoint>
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b08a      	sub	sp, #40	@ 0x28
 80043ca:	af02      	add	r7, sp, #8
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	f1c3 0303 	rsb	r3, r3, #3
 80043e6:	613b      	str	r3, [r7, #16]


	if (fill)
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d04f      	beq.n	800448e <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80043ee:	e029      	b.n	8004444 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e00a      	b.n	800440c <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff ff55 	bl	80042b0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3301      	adds	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	ddf0      	ble.n	80043f6 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	da06      	bge.n	8004428 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	009a      	lsls	r2, r3, #2
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4413      	add	r3, r2
 8004422:	3306      	adds	r3, #6
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	e00a      	b.n	800443e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	009a      	lsls	r2, r3, #2
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	330a      	adds	r3, #10
 8004436:	613b      	str	r3, [r7, #16]
				y--;
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	3b01      	subs	r3, #1
 800443c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	3301      	adds	r3, #1
 8004442:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	429a      	cmp	r2, r3
 800444a:	ddd1      	ble.n	80043f0 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800444c:	e023      	b.n	8004496 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ff29 	bl	80042b0 <_draw_circle_8>
			if (d < 0) {
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	da06      	bge.n	8004472 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4413      	add	r3, r2
 800446c:	3306      	adds	r3, #6
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e00a      	b.n	8004488 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	009a      	lsls	r2, r3, #2
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4413      	add	r3, r2
 800447e:	330a      	adds	r3, #10
 8004480:	613b      	str	r3, [r7, #16]
				y--;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3b01      	subs	r3, #1
 8004486:	61bb      	str	r3, [r7, #24]
			x++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	429a      	cmp	r2, r3
 8004494:	dddb      	ble.n	800444e <lcd_DrawCircle+0x88>
}
 8004496:	bf00      	nop
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b08b      	sub	sp, #44	@ 0x2c
 80044a4:	af04      	add	r7, sp, #16
 80044a6:	60ba      	str	r2, [r7, #8]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	81fb      	strh	r3, [r7, #14]
 80044ae:	460b      	mov	r3, r1
 80044b0:	81bb      	strh	r3, [r7, #12]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80044b6:	89fb      	ldrh	r3, [r7, #14]
 80044b8:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80044be:	e048      	b.n	8004552 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d145      	bne.n	8004552 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80044c6:	89fa      	ldrh	r2, [r7, #14]
 80044c8:	4b26      	ldr	r3, [pc, #152]	@ (8004564 <lcd_ShowStr+0xc4>)
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	4619      	mov	r1, r3
 80044ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	1acb      	subs	r3, r1, r3
 80044d8:	429a      	cmp	r2, r3
 80044da:	dc3f      	bgt.n	800455c <lcd_ShowStr+0xbc>
 80044dc:	89ba      	ldrh	r2, [r7, #12]
 80044de:	4b21      	ldr	r3, [pc, #132]	@ (8004564 <lcd_ShowStr+0xc4>)
 80044e0:	885b      	ldrh	r3, [r3, #2]
 80044e2:	4619      	mov	r1, r3
 80044e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80044e8:	1acb      	subs	r3, r1, r3
 80044ea:	429a      	cmp	r2, r3
 80044ec:	dc36      	bgt.n	800455c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b80      	cmp	r3, #128	@ 0x80
 80044f4:	d902      	bls.n	80044fc <lcd_ShowStr+0x5c>
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
 80044fa:	e02a      	b.n	8004552 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b0d      	cmp	r3, #13
 8004502:	d10b      	bne.n	800451c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8004504:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004508:	b29a      	uxth	r2, r3
 800450a:	89bb      	ldrh	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8004510:	8abb      	ldrh	r3, [r7, #20]
 8004512:	81fb      	strh	r3, [r7, #14]
					str++;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	3301      	adds	r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	e017      	b.n	800454c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	781a      	ldrb	r2, [r3, #0]
 8004520:	88fc      	ldrh	r4, [r7, #6]
 8004522:	89b9      	ldrh	r1, [r7, #12]
 8004524:	89f8      	ldrh	r0, [r7, #14]
 8004526:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800452a:	9302      	str	r3, [sp, #8]
 800452c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	4623      	mov	r3, r4
 8004538:	f7ff fb76 	bl	8003c28 <lcd_ShowChar>
					x+=sizey/2;
 800453c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	4413      	add	r3, r2
 800454a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	3301      	adds	r3, #1
 8004550:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1b2      	bne.n	80044c0 <lcd_ShowStr+0x20>
 800455a:	e000      	b.n	800455e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800455c:	bf00      	nop
			}
		}
	}
}
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	bd90      	pop	{r4, r7, pc}
 8004564:	200002bc 	.word	0x200002bc

08004568 <led7_timer_init>:
int hours_1 = 0;
int hours_2 = 0;
int min_1 = 0;
int min_2 = 0;

void led7_timer_init(){
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
	led7_SetDigit(ds3231_hours / 10, 0, 0);
 800456c:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <led7_timer_init+0x7c>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	4a1d      	ldr	r2, [pc, #116]	@ (80045e8 <led7_timer_init+0x80>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	08db      	lsrs	r3, r3, #3
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2200      	movs	r2, #0
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f8fc 	bl	800477c <led7_SetDigit>
	led7_SetDigit(ds3231_hours % 10, 1, 0);
 8004584:	4b17      	ldr	r3, [pc, #92]	@ (80045e4 <led7_timer_init+0x7c>)
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	4b17      	ldr	r3, [pc, #92]	@ (80045e8 <led7_timer_init+0x80>)
 800458a:	fba3 1302 	umull	r1, r3, r3, r2
 800458e:	08d9      	lsrs	r1, r3, #3
 8004590:	460b      	mov	r3, r1
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2200      	movs	r2, #0
 800459e:	2101      	movs	r1, #1
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 f8eb 	bl	800477c <led7_SetDigit>
	led7_SetDigit(ds3231_min / 10, 2, 0);
 80045a6:	4b11      	ldr	r3, [pc, #68]	@ (80045ec <led7_timer_init+0x84>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	4a0f      	ldr	r2, [pc, #60]	@ (80045e8 <led7_timer_init+0x80>)
 80045ac:	fba2 2303 	umull	r2, r3, r2, r3
 80045b0:	08db      	lsrs	r3, r3, #3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2200      	movs	r2, #0
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f8df 	bl	800477c <led7_SetDigit>
	led7_SetDigit(ds3231_min % 10, 3, 0);
 80045be:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <led7_timer_init+0x84>)
 80045c0:	781a      	ldrb	r2, [r3, #0]
 80045c2:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <led7_timer_init+0x80>)
 80045c4:	fba3 1302 	umull	r1, r3, r3, r2
 80045c8:	08d9      	lsrs	r1, r3, #3
 80045ca:	460b      	mov	r3, r1
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	440b      	add	r3, r1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2200      	movs	r2, #0
 80045d8:	2103      	movs	r1, #3
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f8ce 	bl	800477c <led7_SetDigit>
}
 80045e0:	bf00      	nop
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200001af 	.word	0x200001af
 80045e8:	cccccccd 	.word	0xcccccccd
 80045ec:	200001b0 	.word	0x200001b0

080045f0 <led7_timer>:

void led7_timer(){
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
	if (min_2 != ds3231_min % 10){
 80045f4:	4b12      	ldr	r3, [pc, #72]	@ (8004640 <led7_timer+0x50>)
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	4b12      	ldr	r3, [pc, #72]	@ (8004644 <led7_timer+0x54>)
 80045fa:	fba3 1302 	umull	r1, r3, r3, r2
 80045fe:	08d9      	lsrs	r1, r3, #3
 8004600:	460b      	mov	r3, r1
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	4b0e      	ldr	r3, [pc, #56]	@ (8004648 <led7_timer+0x58>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d002      	beq.n	800461c <led7_timer+0x2c>
		led7_timer_init();
 8004616:	f7ff ffa7 	bl	8004568 <led7_timer_init>
	}
	else if (ds3231_min % 10 == 0){
		led7_timer_init();
	}
}
 800461a:	e00f      	b.n	800463c <led7_timer+0x4c>
	else if (ds3231_min % 10 == 0){
 800461c:	4b08      	ldr	r3, [pc, #32]	@ (8004640 <led7_timer+0x50>)
 800461e:	781a      	ldrb	r2, [r3, #0]
 8004620:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <led7_timer+0x54>)
 8004622:	fba3 1302 	umull	r1, r3, r3, r2
 8004626:	08d9      	lsrs	r1, r3, #3
 8004628:	460b      	mov	r3, r1
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <led7_timer+0x4c>
		led7_timer_init();
 8004638:	f7ff ff96 	bl	8004568 <led7_timer_init>
}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}
 8004640:	200001b0 	.word	0x200001b0
 8004644:	cccccccd 	.word	0xcccccccd
 8004648:	200002c4 	.word	0x200002c4

0800464c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8004650:	2201      	movs	r2, #1
 8004652:	2140      	movs	r1, #64	@ 0x40
 8004654:	4802      	ldr	r0, [pc, #8]	@ (8004660 <led7_init+0x14>)
 8004656:	f003 fcdb 	bl	8008010 <HAL_GPIO_WritePin>
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40021800 	.word	0x40021800

08004664 <led7_Scan>:

void led7_Scan(){
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8004668:	4b3f      	ldr	r3, [pc, #252]	@ (8004768 <led7_Scan+0x104>)
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	b29a      	uxth	r2, r3
 8004670:	4b3d      	ldr	r3, [pc, #244]	@ (8004768 <led7_Scan+0x104>)
 8004672:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8004674:	4b3d      	ldr	r3, [pc, #244]	@ (800476c <led7_Scan+0x108>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a3d      	ldr	r2, [pc, #244]	@ (8004770 <led7_Scan+0x10c>)
 800467a:	5cd3      	ldrb	r3, [r2, r3]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	b21a      	sxth	r2, r3
 8004680:	4b39      	ldr	r3, [pc, #228]	@ (8004768 <led7_Scan+0x104>)
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b21b      	sxth	r3, r3
 8004686:	4313      	orrs	r3, r2
 8004688:	b21b      	sxth	r3, r3
 800468a:	b29a      	uxth	r2, r3
 800468c:	4b36      	ldr	r3, [pc, #216]	@ (8004768 <led7_Scan+0x104>)
 800468e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8004690:	4b36      	ldr	r3, [pc, #216]	@ (800476c <led7_Scan+0x108>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d847      	bhi.n	8004728 <led7_Scan+0xc4>
 8004698:	a201      	add	r2, pc, #4	@ (adr r2, 80046a0 <led7_Scan+0x3c>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046cf 	.word	0x080046cf
 80046a8:	080046ed 	.word	0x080046ed
 80046ac:	0800470b 	.word	0x0800470b
	case 0:
		spi_buffer |= 0x00b0;
 80046b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004768 <led7_Scan+0x104>)
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004768 <led7_Scan+0x104>)
 80046bc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80046be:	4b2a      	ldr	r3, [pc, #168]	@ (8004768 <led7_Scan+0x104>)
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	4b27      	ldr	r3, [pc, #156]	@ (8004768 <led7_Scan+0x104>)
 80046ca:	801a      	strh	r2, [r3, #0]
		break;
 80046cc:	e02d      	b.n	800472a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80046ce:	4b26      	ldr	r3, [pc, #152]	@ (8004768 <led7_Scan+0x104>)
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	4b23      	ldr	r3, [pc, #140]	@ (8004768 <led7_Scan+0x104>)
 80046da:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80046dc:	4b22      	ldr	r3, [pc, #136]	@ (8004768 <led7_Scan+0x104>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	f023 0320 	bic.w	r3, r3, #32
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	4b20      	ldr	r3, [pc, #128]	@ (8004768 <led7_Scan+0x104>)
 80046e8:	801a      	strh	r2, [r3, #0]
		break;
 80046ea:	e01e      	b.n	800472a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80046ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004768 <led7_Scan+0x104>)
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004768 <led7_Scan+0x104>)
 80046f8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80046fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <led7_Scan+0x104>)
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	f023 0310 	bic.w	r3, r3, #16
 8004702:	b29a      	uxth	r2, r3
 8004704:	4b18      	ldr	r3, [pc, #96]	@ (8004768 <led7_Scan+0x104>)
 8004706:	801a      	strh	r2, [r3, #0]
		break;
 8004708:	e00f      	b.n	800472a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800470a:	4b17      	ldr	r3, [pc, #92]	@ (8004768 <led7_Scan+0x104>)
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b14      	ldr	r3, [pc, #80]	@ (8004768 <led7_Scan+0x104>)
 8004716:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8004718:	4b13      	ldr	r3, [pc, #76]	@ (8004768 <led7_Scan+0x104>)
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004720:	b29a      	uxth	r2, r3
 8004722:	4b11      	ldr	r3, [pc, #68]	@ (8004768 <led7_Scan+0x104>)
 8004724:	801a      	strh	r2, [r3, #0]
		break;
 8004726:	e000      	b.n	800472a <led7_Scan+0xc6>
	default:
		break;
 8004728:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800472a:	4b10      	ldr	r3, [pc, #64]	@ (800476c <led7_Scan+0x108>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	425a      	negs	r2, r3
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	f002 0203 	and.w	r2, r2, #3
 800473a:	bf58      	it	pl
 800473c:	4253      	negpl	r3, r2
 800473e:	4a0b      	ldr	r2, [pc, #44]	@ (800476c <led7_Scan+0x108>)
 8004740:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8004742:	2200      	movs	r2, #0
 8004744:	2140      	movs	r1, #64	@ 0x40
 8004746:	480b      	ldr	r0, [pc, #44]	@ (8004774 <led7_Scan+0x110>)
 8004748:	f003 fc62 	bl	8008010 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800474c:	2301      	movs	r3, #1
 800474e:	2202      	movs	r2, #2
 8004750:	4905      	ldr	r1, [pc, #20]	@ (8004768 <led7_Scan+0x104>)
 8004752:	4809      	ldr	r0, [pc, #36]	@ (8004778 <led7_Scan+0x114>)
 8004754:	f005 f971 	bl	8009a3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8004758:	2201      	movs	r2, #1
 800475a:	2140      	movs	r1, #64	@ 0x40
 800475c:	4805      	ldr	r0, [pc, #20]	@ (8004774 <led7_Scan+0x110>)
 800475e:	f003 fc57 	bl	8008010 <HAL_GPIO_WritePin>
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	2000000e 	.word	0x2000000e
 800476c:	200002c8 	.word	0x200002c8
 8004770:	20000000 	.word	0x20000000
 8004774:	40021800 	.word	0x40021800
 8004778:	200002dc 	.word	0x200002dc

0800477c <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	db0e      	blt.n	80047ae <led7_SetDigit+0x32>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b09      	cmp	r3, #9
 8004794:	dc0b      	bgt.n	80047ae <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8004796:	4a09      	ldr	r2, [pc, #36]	@ (80047bc <led7_SetDigit+0x40>)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	b2d9      	uxtb	r1, r3
 80047a4:	4a06      	ldr	r2, [pc, #24]	@ (80047c0 <led7_SetDigit+0x44>)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4413      	add	r3, r2
 80047aa:	460a      	mov	r2, r1
 80047ac:	701a      	strb	r2, [r3, #0]
	}
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000004 	.word	0x20000004
 80047c0:	20000000 	.word	0x20000000

080047c4 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d107      	bne.n	80047e4 <led7_SetColon+0x20>
 80047d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <led7_SetColon+0x3c>)
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	f023 0308 	bic.w	r3, r3, #8
 80047dc:	b29a      	uxth	r2, r3
 80047de:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <led7_SetColon+0x3c>)
 80047e0:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80047e2:	e006      	b.n	80047f2 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 80047e4:	4b06      	ldr	r3, [pc, #24]	@ (8004800 <led7_SetColon+0x3c>)
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <led7_SetColon+0x3c>)
 80047f0:	801a      	strh	r2, [r3, #0]
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	2000000e 	.word	0x2000000e

08004804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004808:	f002 fac8 	bl	8006d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800480c:	f000 f830 	bl	8004870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004810:	f7fe f854 	bl	80028bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8004814:	f000 fae6 	bl	8004de4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8004818:	f000 f984 	bl	8004b24 <MX_SPI1_Init>
  MX_FSMC_Init();
 800481c:	f7fd ff7e 	bl	800271c <MX_FSMC_Init>
  MX_I2C1_Init();
 8004820:	f7fe f986 	bl	8002b30 <MX_I2C1_Init>
  MX_TIM13_Init();
 8004824:	f000 fb2a 	bl	8004e7c <MX_TIM13_Init>
  MX_DMA_Init();
 8004828:	f7fc fd2c 	bl	8001284 <MX_DMA_Init>
  MX_ADC1_Init();
 800482c:	f7fc fad0 	bl	8000dd0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8004830:	f000 fa88 	bl	8004d44 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8004834:	f002 f994 	bl	8006b60 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8004838:	f002 f968 	bl	8006b0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800483c:	f000 f882 	bl	8004944 <system_init>
//  led7_timer_init();
  /* USER CODE BEGIN WHILE */
 while (1)
  {
	  // 50ms task
	 if(flag_timer2 == 1){
 8004840:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <main+0x68>)
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d1fb      	bne.n	8004840 <main+0x3c>
	 	flag_timer2 = 0;
 8004848:	4b08      	ldr	r3, [pc, #32]	@ (800486c <main+0x68>)
 800484a:	2200      	movs	r2, #0
 800484c:	801a      	strh	r2, [r3, #0]
	 	button_Scan();
 800484e:	f7fc fc8b 	bl	8001168 <button_Scan>
	 	touch_Scan();
 8004852:	f001 fa71 	bl	8005d38 <touch_Scan>
	 	ds3231_ReadTime();
 8004856:	f7fc fdc1 	bl	80013dc <ds3231_ReadTime>

	 	fsm_clock();
 800485a:	f7fd fea1 	bl	80025a0 <fsm_clock>
	 	input_process();
 800485e:	f7fd f95f 	bl	8001b20 <input_process>
//	 	alarm_display();
//	 	key_num_display();

	 	led7_timer();
 8004862:	f7ff fec5 	bl	80045f0 <led7_timer>
//	 	lightProcess();
	 	test_LedDebug();
 8004866:	f000 f88d 	bl	8004984 <test_LedDebug>
	 if(flag_timer2 == 1){
 800486a:	e7e9      	b.n	8004840 <main+0x3c>
 800486c:	200002ce 	.word	0x200002ce

08004870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b094      	sub	sp, #80	@ 0x50
 8004874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004876:	f107 0320 	add.w	r3, r7, #32
 800487a:	2230      	movs	r2, #48	@ 0x30
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f008 f826 	bl	800c8d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004894:	2300      	movs	r3, #0
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	4b28      	ldr	r3, [pc, #160]	@ (800493c <SystemClock_Config+0xcc>)
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	4a27      	ldr	r2, [pc, #156]	@ (800493c <SystemClock_Config+0xcc>)
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80048a4:	4b25      	ldr	r3, [pc, #148]	@ (800493c <SystemClock_Config+0xcc>)
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048b0:	2300      	movs	r3, #0
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	4b22      	ldr	r3, [pc, #136]	@ (8004940 <SystemClock_Config+0xd0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a21      	ldr	r2, [pc, #132]	@ (8004940 <SystemClock_Config+0xd0>)
 80048ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004940 <SystemClock_Config+0xd0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80048cc:	2302      	movs	r3, #2
 80048ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80048d0:	2301      	movs	r3, #1
 80048d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80048d4:	2310      	movs	r3, #16
 80048d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048d8:	2302      	movs	r3, #2
 80048da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80048dc:	2300      	movs	r3, #0
 80048de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80048e0:	2308      	movs	r3, #8
 80048e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80048e4:	23a8      	movs	r3, #168	@ 0xa8
 80048e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048e8:	2302      	movs	r3, #2
 80048ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80048ec:	2304      	movs	r3, #4
 80048ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048f0:	f107 0320 	add.w	r3, r7, #32
 80048f4:	4618      	mov	r0, r3
 80048f6:	f004 fb7f 	bl	8008ff8 <HAL_RCC_OscConfig>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004900:	f000 f864 	bl	80049cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004904:	230f      	movs	r3, #15
 8004906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004908:	2302      	movs	r3, #2
 800490a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004910:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004916:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800491a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	2105      	movs	r1, #5
 8004922:	4618      	mov	r0, r3
 8004924:	f004 fde0 	bl	80094e8 <HAL_RCC_ClockConfig>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800492e:	f000 f84d 	bl	80049cc <Error_Handler>
  }
}
 8004932:	bf00      	nop
 8004934:	3750      	adds	r7, #80	@ 0x50
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	40007000 	.word	0x40007000

08004944 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
	  timer_init();
 8004948:	f000 f846 	bl	80049d8 <timer_init>
	  button_init();
 800494c:	f7fc fc00 	bl	8001150 <button_init>
	  lcd_init();
 8004950:	f7ff fb4e 	bl	8003ff0 <lcd_init>
	  led7_init();
 8004954:	f7ff fe7a 	bl	800464c <led7_init>
	  ds3231_init();
 8004958:	f7fc fcb4 	bl	80012c4 <ds3231_init>
	  uart_init_esp();
 800495c:	f001 ff26 	bl	80067ac <uart_init_esp>
	  buzzer_init();
 8004960:	f7fc fc6e 	bl	8001240 <buzzer_init>
	  home_lcd();
 8004964:	f7fe fc0a 	bl	800317c <home_lcd>
	  touch_init();
 8004968:	f001 f9d6 	bl	8005d18 <touch_init>
	  led7_SetColon(1);
 800496c:	2001      	movs	r0, #1
 800496e:	f7ff ff29 	bl	80047c4 <led7_SetColon>
	  setTimer2(50);
 8004972:	2032      	movs	r0, #50	@ 0x32
 8004974:	f000 f83e 	bl	80049f4 <setTimer2>
	  setTimer3(100);
 8004978:	2064      	movs	r0, #100	@ 0x64
 800497a:	f000 f857 	bl	8004a2c <setTimer3>
}
 800497e:	bf00      	nop
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8004988:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <test_LedDebug+0x3c>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <test_LedDebug+0x40>)
 8004990:	fb83 1302 	smull	r1, r3, r3, r2
 8004994:	10d9      	asrs	r1, r3, #3
 8004996:	17d3      	asrs	r3, r2, #31
 8004998:	1ac9      	subs	r1, r1, r3
 800499a:	460b      	mov	r3, r1
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	1ad1      	subs	r1, r2, r3
 80049a4:	b2ca      	uxtb	r2, r1
 80049a6:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <test_LedDebug+0x3c>)
 80049a8:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80049aa:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <test_LedDebug+0x3c>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80049b2:	2110      	movs	r1, #16
 80049b4:	4804      	ldr	r0, [pc, #16]	@ (80049c8 <test_LedDebug+0x44>)
 80049b6:	f003 fb44 	bl	8008042 <HAL_GPIO_TogglePin>
	}
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200002cc 	.word	0x200002cc
 80049c4:	66666667 	.word	0x66666667
 80049c8:	40021000 	.word	0x40021000

080049cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049d0:	b672      	cpsid	i
}
 80049d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049d4:	bf00      	nop
 80049d6:	e7fd      	b.n	80049d4 <Error_Handler+0x8>

080049d8 <timer_init>:

uint16_t flag_timer3 = 0;
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;

void timer_init(){
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80049dc:	4803      	ldr	r0, [pc, #12]	@ (80049ec <timer_init+0x14>)
 80049de:	f005 fe47 	bl	800a670 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80049e2:	4803      	ldr	r0, [pc, #12]	@ (80049f0 <timer_init+0x18>)
 80049e4:	f005 fddc 	bl	800a5a0 <HAL_TIM_Base_Start>
}
 80049e8:	bf00      	nop
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	2000037c 	.word	0x2000037c
 80049f0:	20000334 	.word	0x20000334

080049f4 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80049fe:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <setTimer2+0x2c>)
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <setTimer2+0x2c>)
 8004a06:	881a      	ldrh	r2, [r3, #0]
 8004a08:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <setTimer2+0x30>)
 8004a0a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <setTimer2+0x34>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	801a      	strh	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	200002d2 	.word	0x200002d2
 8004a24:	200002d0 	.word	0x200002d0
 8004a28:	200002ce 	.word	0x200002ce

08004a2c <setTimer3>:

void setTimer3(uint16_t duration){
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8004a36:	4a08      	ldr	r2, [pc, #32]	@ (8004a58 <setTimer3+0x2c>)
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <setTimer3+0x2c>)
 8004a3e:	881a      	ldrh	r2, [r3, #0]
 8004a40:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <setTimer3+0x30>)
 8004a42:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8004a44:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <setTimer3+0x34>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	801a      	strh	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	200002d8 	.word	0x200002d8
 8004a5c:	200002d6 	.word	0x200002d6
 8004a60:	200002d4 	.word	0x200002d4

08004a64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a74:	d12b      	bne.n	8004ace <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8004a76:	4b18      	ldr	r3, [pc, #96]	@ (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d010      	beq.n	8004aa0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8004a7e:	4b16      	ldr	r3, [pc, #88]	@ (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	4b14      	ldr	r3, [pc, #80]	@ (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004a88:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8004a8a:	4b13      	ldr	r3, [pc, #76]	@ (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004a92:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8004a98:	4b11      	ldr	r3, [pc, #68]	@ (8004ae0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004a9e:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004aa0:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004ab2:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004ac8:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8004aca:	f7ff fdcb 	bl	8004664 <led7_Scan>
	}
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	200002d0 	.word	0x200002d0
 8004adc:	200002ce 	.word	0x200002ce
 8004ae0:	200002d2 	.word	0x200002d2
 8004ae4:	200002d6 	.word	0x200002d6
 8004ae8:	200002d4 	.word	0x200002d4
 8004aec:	200002d8 	.word	0x200002d8

08004af0 <delay_us>:

void delay_us (uint16_t us)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8004afa:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <delay_us+0x30>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2200      	movs	r2, #0
 8004b00:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8004b02:	bf00      	nop
 8004b04:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <delay_us+0x30>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d3f9      	bcc.n	8004b04 <delay_us+0x14>
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000334 	.word	0x20000334

08004b24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004b28:	4b17      	ldr	r3, [pc, #92]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b2a:	4a18      	ldr	r2, [pc, #96]	@ (8004b8c <MX_SPI1_Init+0x68>)
 8004b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b2e:	4b16      	ldr	r3, [pc, #88]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b36:	4b14      	ldr	r3, [pc, #80]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b42:	4b11      	ldr	r3, [pc, #68]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b48:	4b0f      	ldr	r3, [pc, #60]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b56:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b62:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b68:	4b07      	ldr	r3, [pc, #28]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004b6e:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b70:	220a      	movs	r2, #10
 8004b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004b74:	4804      	ldr	r0, [pc, #16]	@ (8004b88 <MX_SPI1_Init+0x64>)
 8004b76:	f004 fed7 	bl	8009928 <HAL_SPI_Init>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004b80:	f7ff ff24 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004b84:	bf00      	nop
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200002dc 	.word	0x200002dc
 8004b8c:	40013000 	.word	0x40013000

08004b90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	@ 0x28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b98:	f107 0314 	add.w	r3, r7, #20
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a19      	ldr	r2, [pc, #100]	@ (8004c14 <HAL_SPI_MspInit+0x84>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d12b      	bne.n	8004c0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	4b18      	ldr	r3, [pc, #96]	@ (8004c18 <HAL_SPI_MspInit+0x88>)
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <HAL_SPI_MspInit+0x88>)
 8004bbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bc2:	4b15      	ldr	r3, [pc, #84]	@ (8004c18 <HAL_SPI_MspInit+0x88>)
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <HAL_SPI_MspInit+0x88>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	4a10      	ldr	r2, [pc, #64]	@ (8004c18 <HAL_SPI_MspInit+0x88>)
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bde:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <HAL_SPI_MspInit+0x88>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004bea:	2338      	movs	r3, #56	@ 0x38
 8004bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bfa:	2305      	movs	r3, #5
 8004bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	4619      	mov	r1, r3
 8004c04:	4805      	ldr	r0, [pc, #20]	@ (8004c1c <HAL_SPI_MspInit+0x8c>)
 8004c06:	f003 f84f 	bl	8007ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	3728      	adds	r7, #40	@ 0x28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40013000 	.word	0x40013000
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40020400 	.word	0x40020400

08004c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c26:	2300      	movs	r3, #0
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	4b10      	ldr	r3, [pc, #64]	@ (8004c6c <HAL_MspInit+0x4c>)
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8004c6c <HAL_MspInit+0x4c>)
 8004c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <HAL_MspInit+0x4c>)
 8004c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	603b      	str	r3, [r7, #0]
 8004c46:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <HAL_MspInit+0x4c>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	4a08      	ldr	r2, [pc, #32]	@ (8004c6c <HAL_MspInit+0x4c>)
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <HAL_MspInit+0x4c>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800

08004c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <NMI_Handler+0x4>

08004c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <HardFault_Handler+0x4>

08004c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <MemManage_Handler+0x4>

08004c88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c8c:	bf00      	nop
 8004c8e:	e7fd      	b.n	8004c8c <BusFault_Handler+0x4>

08004c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <UsageFault_Handler+0x4>

08004c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cc6:	f002 f8bb 	bl	8006e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004cd4:	4802      	ldr	r0, [pc, #8]	@ (8004ce0 <TIM2_IRQHandler+0x10>)
 8004cd6:	f005 fe5d 	bl	800a994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	2000037c 	.word	0x2000037c

08004ce4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ce8:	4802      	ldr	r0, [pc, #8]	@ (8004cf4 <USART1_IRQHandler+0x10>)
 8004cea:	f006 fdbd 	bl	800b868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2000047c 	.word	0x2000047c

08004cf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004cfc:	4802      	ldr	r0, [pc, #8]	@ (8004d08 <USART2_IRQHandler+0x10>)
 8004cfe:	f006 fdb3 	bl	800b868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200004c0 	.word	0x200004c0

08004d0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d10:	4802      	ldr	r0, [pc, #8]	@ (8004d1c <DMA2_Stream0_IRQHandler+0x10>)
 8004d12:	f002 fd8d 	bl	8007830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	2000011c 	.word	0x2000011c

08004d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d24:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <SystemInit+0x20>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2a:	4a05      	ldr	r2, [pc, #20]	@ (8004d40 <SystemInit+0x20>)
 8004d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	609a      	str	r2, [r3, #8]
 8004d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d58:	463b      	mov	r3, r7
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d60:	4b1e      	ldr	r3, [pc, #120]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004d62:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <MX_TIM1_Init+0x9c>)
 8004d64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8004d66:	4b1d      	ldr	r3, [pc, #116]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004d68:	2253      	movs	r2, #83	@ 0x53
 8004d6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004d72:	4b1a      	ldr	r3, [pc, #104]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004d74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d7a:	4b18      	ldr	r3, [pc, #96]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d80:	4b16      	ldr	r3, [pc, #88]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d86:	4b15      	ldr	r3, [pc, #84]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d8c:	4813      	ldr	r0, [pc, #76]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004d8e:	f005 fbb7 	bl	800a500 <HAL_TIM_Base_Init>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004d98:	f7ff fe18 	bl	80049cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004da2:	f107 0308 	add.w	r3, r7, #8
 8004da6:	4619      	mov	r1, r3
 8004da8:	480c      	ldr	r0, [pc, #48]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004daa:	f005 ffbd 	bl	800ad28 <HAL_TIM_ConfigClockSource>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004db4:	f7ff fe0a 	bl	80049cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004db8:	2300      	movs	r3, #0
 8004dba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4805      	ldr	r0, [pc, #20]	@ (8004ddc <MX_TIM1_Init+0x98>)
 8004dc6:	f006 fbaf 	bl	800b528 <HAL_TIMEx_MasterConfigSynchronization>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004dd0:	f7ff fdfc 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004dd4:	bf00      	nop
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	20000334 	.word	0x20000334
 8004de0:	40010000 	.word	0x40010000

08004de4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dea:	f107 0308 	add.w	r3, r7, #8
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	605a      	str	r2, [r3, #4]
 8004df4:	609a      	str	r2, [r3, #8]
 8004df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004df8:	463b      	mov	r3, r7
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e00:	4b1d      	ldr	r3, [pc, #116]	@ (8004e78 <MX_TIM2_Init+0x94>)
 8004e02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004e06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8004e08:	4b1b      	ldr	r3, [pc, #108]	@ (8004e78 <MX_TIM2_Init+0x94>)
 8004e0a:	f240 3247 	movw	r2, #839	@ 0x347
 8004e0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e10:	4b19      	ldr	r3, [pc, #100]	@ (8004e78 <MX_TIM2_Init+0x94>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004e16:	4b18      	ldr	r3, [pc, #96]	@ (8004e78 <MX_TIM2_Init+0x94>)
 8004e18:	2263      	movs	r2, #99	@ 0x63
 8004e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e1c:	4b16      	ldr	r3, [pc, #88]	@ (8004e78 <MX_TIM2_Init+0x94>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e22:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <MX_TIM2_Init+0x94>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e28:	4813      	ldr	r0, [pc, #76]	@ (8004e78 <MX_TIM2_Init+0x94>)
 8004e2a:	f005 fb69 	bl	800a500 <HAL_TIM_Base_Init>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004e34:	f7ff fdca 	bl	80049cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e3e:	f107 0308 	add.w	r3, r7, #8
 8004e42:	4619      	mov	r1, r3
 8004e44:	480c      	ldr	r0, [pc, #48]	@ (8004e78 <MX_TIM2_Init+0x94>)
 8004e46:	f005 ff6f 	bl	800ad28 <HAL_TIM_ConfigClockSource>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004e50:	f7ff fdbc 	bl	80049cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e54:	2300      	movs	r3, #0
 8004e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4805      	ldr	r0, [pc, #20]	@ (8004e78 <MX_TIM2_Init+0x94>)
 8004e62:	f006 fb61 	bl	800b528 <HAL_TIMEx_MasterConfigSynchronization>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004e6c:	f7ff fdae 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e70:	bf00      	nop
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	2000037c 	.word	0x2000037c

08004e7c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e82:	1d3b      	adds	r3, r7, #4
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	611a      	str	r2, [r3, #16]
 8004e90:	615a      	str	r2, [r3, #20]
 8004e92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004e94:	4b1e      	ldr	r3, [pc, #120]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004e96:	4a1f      	ldr	r2, [pc, #124]	@ (8004f14 <MX_TIM13_Init+0x98>)
 8004e98:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8004e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004e9c:	f240 3247 	movw	r2, #839	@ 0x347
 8004ea0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8004ea8:	4b19      	ldr	r3, [pc, #100]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004eaa:	2263      	movs	r2, #99	@ 0x63
 8004eac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eae:	4b18      	ldr	r3, [pc, #96]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eb4:	4b16      	ldr	r3, [pc, #88]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004eba:	4815      	ldr	r0, [pc, #84]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004ebc:	f005 fb20 	bl	800a500 <HAL_TIM_Base_Init>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8004ec6:	f7ff fd81 	bl	80049cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004eca:	4811      	ldr	r0, [pc, #68]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004ecc:	f005 fc40 	bl	800a750 <HAL_TIM_PWM_Init>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8004ed6:	f7ff fd79 	bl	80049cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004eda:	2360      	movs	r3, #96	@ 0x60
 8004edc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004eea:	1d3b      	adds	r3, r7, #4
 8004eec:	2200      	movs	r2, #0
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4807      	ldr	r0, [pc, #28]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004ef2:	f005 fe57 	bl	800aba4 <HAL_TIM_PWM_ConfigChannel>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8004efc:	f7ff fd66 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004f00:	4803      	ldr	r0, [pc, #12]	@ (8004f10 <MX_TIM13_Init+0x94>)
 8004f02:	f000 f85b 	bl	8004fbc <HAL_TIM_MspPostInit>

}
 8004f06:	bf00      	nop
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200003c4 	.word	0x200003c4
 8004f14:	40001c00 	.word	0x40001c00

08004f18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a22      	ldr	r2, [pc, #136]	@ (8004fb0 <HAL_TIM_Base_MspInit+0x98>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10e      	bne.n	8004f48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	4b21      	ldr	r3, [pc, #132]	@ (8004fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	4a20      	ldr	r2, [pc, #128]	@ (8004fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004f46:	e02e      	b.n	8004fa6 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f50:	d116      	bne.n	8004f80 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	4b17      	ldr	r3, [pc, #92]	@ (8004fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	4a16      	ldr	r2, [pc, #88]	@ (8004fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f62:	4b14      	ldr	r3, [pc, #80]	@ (8004fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2100      	movs	r1, #0
 8004f72:	201c      	movs	r0, #28
 8004f74:	f002 fae5 	bl	8007542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f78:	201c      	movs	r0, #28
 8004f7a:	f002 fafe 	bl	800757a <HAL_NVIC_EnableIRQ>
}
 8004f7e:	e012      	b.n	8004fa6 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb8 <HAL_TIM_Base_MspInit+0xa0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d10d      	bne.n	8004fa6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	4b09      	ldr	r3, [pc, #36]	@ (8004fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f92:	4a08      	ldr	r2, [pc, #32]	@ (8004fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8004f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f9a:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
}
 8004fa6:	bf00      	nop
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40010000 	.word	0x40010000
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	40001c00 	.word	0x40001c00

08004fbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc4:	f107 030c 	add.w	r3, r7, #12
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a12      	ldr	r2, [pc, #72]	@ (8005024 <HAL_TIM_MspPostInit+0x68>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d11e      	bne.n	800501c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	4b11      	ldr	r3, [pc, #68]	@ (8005028 <HAL_TIM_MspPostInit+0x6c>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe6:	4a10      	ldr	r2, [pc, #64]	@ (8005028 <HAL_TIM_MspPostInit+0x6c>)
 8004fe8:	f043 0320 	orr.w	r3, r3, #32
 8004fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fee:	4b0e      	ldr	r3, [pc, #56]	@ (8005028 <HAL_TIM_MspPostInit+0x6c>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ffa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ffe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005000:	2302      	movs	r3, #2
 8005002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005008:	2300      	movs	r3, #0
 800500a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800500c:	2309      	movs	r3, #9
 800500e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005010:	f107 030c 	add.w	r3, r7, #12
 8005014:	4619      	mov	r1, r3
 8005016:	4805      	ldr	r0, [pc, #20]	@ (800502c <HAL_TIM_MspPostInit+0x70>)
 8005018:	f002 fe46 	bl	8007ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800501c:	bf00      	nop
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40001c00 	.word	0x40001c00
 8005028:	40023800 	.word	0x40023800
 800502c:	40021400 	.word	0x40021400

08005030 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	e025      	b.n	8005090 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8005044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005048:	2b00      	cmp	r3, #0
 800504a:	da06      	bge.n	800505a <TP_Write_Byte+0x2a>
 800504c:	2201      	movs	r2, #1
 800504e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005052:	4813      	ldr	r0, [pc, #76]	@ (80050a0 <TP_Write_Byte+0x70>)
 8005054:	f002 ffdc 	bl	8008010 <HAL_GPIO_WritePin>
 8005058:	e005      	b.n	8005066 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800505a:	2200      	movs	r2, #0
 800505c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005060:	480f      	ldr	r0, [pc, #60]	@ (80050a0 <TP_Write_Byte+0x70>)
 8005062:	f002 ffd5 	bl	8008010 <HAL_GPIO_WritePin>
		num<<=1;
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800506c:	2200      	movs	r2, #0
 800506e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005072:	480c      	ldr	r0, [pc, #48]	@ (80050a4 <TP_Write_Byte+0x74>)
 8005074:	f002 ffcc 	bl	8008010 <HAL_GPIO_WritePin>
		delay_us(1);
 8005078:	2001      	movs	r0, #1
 800507a:	f7ff fd39 	bl	8004af0 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800507e:	2201      	movs	r2, #1
 8005080:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005084:	4807      	ldr	r0, [pc, #28]	@ (80050a4 <TP_Write_Byte+0x74>)
 8005086:	f002 ffc3 	bl	8008010 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	3301      	adds	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b07      	cmp	r3, #7
 8005094:	d9d6      	bls.n	8005044 <TP_Write_Byte+0x14>
	}
}
 8005096:	bf00      	nop
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40020800 	.word	0x40020800
 80050a4:	40021800 	.word	0x40021800

080050a8 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80050ba:	2200      	movs	r2, #0
 80050bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050c0:	482f      	ldr	r0, [pc, #188]	@ (8005180 <TP_Read_AD+0xd8>)
 80050c2:	f002 ffa5 	bl	8008010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80050c6:	2200      	movs	r2, #0
 80050c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050cc:	482d      	ldr	r0, [pc, #180]	@ (8005184 <TP_Read_AD+0xdc>)
 80050ce:	f002 ff9f 	bl	8008010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 80050d2:	2200      	movs	r2, #0
 80050d4:	2180      	movs	r1, #128	@ 0x80
 80050d6:	482a      	ldr	r0, [pc, #168]	@ (8005180 <TP_Read_AD+0xd8>)
 80050d8:	f002 ff9a 	bl	8008010 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff ffa6 	bl	8005030 <TP_Write_Byte>
	delay_us(6);
 80050e4:	2006      	movs	r0, #6
 80050e6:	f7ff fd03 	bl	8004af0 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80050ea:	2200      	movs	r2, #0
 80050ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050f0:	4823      	ldr	r0, [pc, #140]	@ (8005180 <TP_Read_AD+0xd8>)
 80050f2:	f002 ff8d 	bl	8008010 <HAL_GPIO_WritePin>
	delay_us(1);
 80050f6:	2001      	movs	r0, #1
 80050f8:	f7ff fcfa 	bl	8004af0 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80050fc:	2201      	movs	r2, #1
 80050fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005102:	481f      	ldr	r0, [pc, #124]	@ (8005180 <TP_Read_AD+0xd8>)
 8005104:	f002 ff84 	bl	8008010 <HAL_GPIO_WritePin>
	delay_us(1);
 8005108:	2001      	movs	r0, #1
 800510a:	f7ff fcf1 	bl	8004af0 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800510e:	2200      	movs	r2, #0
 8005110:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005114:	481a      	ldr	r0, [pc, #104]	@ (8005180 <TP_Read_AD+0xd8>)
 8005116:	f002 ff7b 	bl	8008010 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 800511a:	2300      	movs	r3, #0
 800511c:	73fb      	strb	r3, [r7, #15]
 800511e:	e01f      	b.n	8005160 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8005120:	89bb      	ldrh	r3, [r7, #12]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005126:	2200      	movs	r2, #0
 8005128:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800512c:	4814      	ldr	r0, [pc, #80]	@ (8005180 <TP_Read_AD+0xd8>)
 800512e:	f002 ff6f 	bl	8008010 <HAL_GPIO_WritePin>
		delay_us(1);
 8005132:	2001      	movs	r0, #1
 8005134:	f7ff fcdc 	bl	8004af0 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005138:	2201      	movs	r2, #1
 800513a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800513e:	4810      	ldr	r0, [pc, #64]	@ (8005180 <TP_Read_AD+0xd8>)
 8005140:	f002 ff66 	bl	8008010 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8005144:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005148:	480e      	ldr	r0, [pc, #56]	@ (8005184 <TP_Read_AD+0xdc>)
 800514a:	f002 ff49 	bl	8007fe0 <HAL_GPIO_ReadPin>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <TP_Read_AD+0xb2>
 8005154:	89bb      	ldrh	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	3301      	adds	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b0f      	cmp	r3, #15
 8005164:	d9dc      	bls.n	8005120 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8005166:	89bb      	ldrh	r3, [r7, #12]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 800516c:	2201      	movs	r2, #1
 800516e:	2180      	movs	r1, #128	@ 0x80
 8005170:	4803      	ldr	r0, [pc, #12]	@ (8005180 <TP_Read_AD+0xd8>)
 8005172:	f002 ff4d 	bl	8008010 <HAL_GPIO_WritePin>
	return(Num);
 8005176:	89bb      	ldrh	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021800 	.word	0x40021800
 8005184:	40020800 	.word	0x40020800

08005188 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8005188:	b590      	push	{r4, r7, lr}
 800518a:	b089      	sub	sp, #36	@ 0x24
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8005192:	2300      	movs	r3, #0
 8005194:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8005196:	2300      	movs	r3, #0
 8005198:	83fb      	strh	r3, [r7, #30]
 800519a:	e00e      	b.n	80051ba <TP_Read_XOY+0x32>
 800519c:	8bfc      	ldrh	r4, [r7, #30]
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff ff81 	bl	80050a8 <TP_Read_AD>
 80051a6:	4603      	mov	r3, r0
 80051a8:	461a      	mov	r2, r3
 80051aa:	0063      	lsls	r3, r4, #1
 80051ac:	3320      	adds	r3, #32
 80051ae:	443b      	add	r3, r7
 80051b0:	f823 2c14 	strh.w	r2, [r3, #-20]
 80051b4:	8bfb      	ldrh	r3, [r7, #30]
 80051b6:	3301      	adds	r3, #1
 80051b8:	83fb      	strh	r3, [r7, #30]
 80051ba:	8bfb      	ldrh	r3, [r7, #30]
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d9ed      	bls.n	800519c <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	83fb      	strh	r3, [r7, #30]
 80051c4:	e035      	b.n	8005232 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 80051c6:	8bfb      	ldrh	r3, [r7, #30]
 80051c8:	3301      	adds	r3, #1
 80051ca:	83bb      	strh	r3, [r7, #28]
 80051cc:	e02b      	b.n	8005226 <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 80051ce:	8bfb      	ldrh	r3, [r7, #30]
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	3320      	adds	r3, #32
 80051d4:	443b      	add	r3, r7
 80051d6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80051da:	8bbb      	ldrh	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	3320      	adds	r3, #32
 80051e0:	443b      	add	r3, r7
 80051e2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d91a      	bls.n	8005220 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 80051ea:	8bfb      	ldrh	r3, [r7, #30]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	3320      	adds	r3, #32
 80051f0:	443b      	add	r3, r7
 80051f2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80051f6:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 80051f8:	8bbb      	ldrh	r3, [r7, #28]
 80051fa:	8bfa      	ldrh	r2, [r7, #30]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	3320      	adds	r3, #32
 8005200:	443b      	add	r3, r7
 8005202:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8005206:	0053      	lsls	r3, r2, #1
 8005208:	3320      	adds	r3, #32
 800520a:	443b      	add	r3, r7
 800520c:	460a      	mov	r2, r1
 800520e:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8005212:	8bbb      	ldrh	r3, [r7, #28]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	3320      	adds	r3, #32
 8005218:	443b      	add	r3, r7
 800521a:	8b3a      	ldrh	r2, [r7, #24]
 800521c:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8005220:	8bbb      	ldrh	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	83bb      	strh	r3, [r7, #28]
 8005226:	8bbb      	ldrh	r3, [r7, #28]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d9d0      	bls.n	80051ce <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 800522c:	8bfb      	ldrh	r3, [r7, #30]
 800522e:	3301      	adds	r3, #1
 8005230:	83fb      	strh	r3, [r7, #30]
 8005232:	8bfb      	ldrh	r3, [r7, #30]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d9c6      	bls.n	80051c6 <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 8005238:	2300      	movs	r3, #0
 800523a:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 800523c:	2301      	movs	r3, #1
 800523e:	83fb      	strh	r3, [r7, #30]
 8005240:	e00b      	b.n	800525a <TP_Read_XOY+0xd2>
 8005242:	8bfb      	ldrh	r3, [r7, #30]
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	3320      	adds	r3, #32
 8005248:	443b      	add	r3, r7
 800524a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800524e:	8b7b      	ldrh	r3, [r7, #26]
 8005250:	4413      	add	r3, r2
 8005252:	837b      	strh	r3, [r7, #26]
 8005254:	8bfb      	ldrh	r3, [r7, #30]
 8005256:	3301      	adds	r3, #1
 8005258:	83fb      	strh	r3, [r7, #30]
 800525a:	8bfb      	ldrh	r3, [r7, #30]
 800525c:	2b03      	cmp	r3, #3
 800525e:	d9f0      	bls.n	8005242 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8005260:	8b7b      	ldrh	r3, [r7, #26]
 8005262:	4a05      	ldr	r2, [pc, #20]	@ (8005278 <TP_Read_XOY+0xf0>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	833b      	strh	r3, [r7, #24]
	return temp;
 800526c:	8b3b      	ldrh	r3, [r7, #24]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3724      	adds	r7, #36	@ 0x24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd90      	pop	{r4, r7, pc}
 8005276:	bf00      	nop
 8005278:	aaaaaaab 	.word	0xaaaaaaab

0800527c <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8005286:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <TP_Read_XY+0x3c>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ff7c 	bl	8005188 <TP_Read_XOY>
 8005290:	4603      	mov	r3, r0
 8005292:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8005294:	4b09      	ldr	r3, [pc, #36]	@ (80052bc <TP_Read_XY+0x40>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff ff75 	bl	8005188 <TP_Read_XOY>
 800529e:	4603      	mov	r3, r0
 80052a0:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	89fa      	ldrh	r2, [r7, #14]
 80052a6:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	89ba      	ldrh	r2, [r7, #12]
 80052ac:	801a      	strh	r2, [r3, #0]
	return 1;
 80052ae:	2301      	movs	r3, #1
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000048 	.word	0x20000048
 80052bc:	20000049 	.word	0x20000049

080052c0 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 80052ca:	f107 0212 	add.w	r2, r7, #18
 80052ce:	f107 0314 	add.w	r3, r7, #20
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff ffd1 	bl	800527c <TP_Read_XY>
 80052da:	4603      	mov	r3, r0
 80052dc:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <TP_Read_XY2+0x28>
 80052e4:	2300      	movs	r3, #0
 80052e6:	e049      	b.n	800537c <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 80052e8:	f107 020e 	add.w	r2, r7, #14
 80052ec:	f107 0310 	add.w	r3, r7, #16
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff ffc2 	bl	800527c <TP_Read_XY>
 80052f8:	4603      	mov	r3, r0
 80052fa:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <TP_Read_XY2+0x46>
 8005302:	2300      	movs	r3, #0
 8005304:	e03a      	b.n	800537c <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8005306:	8a3a      	ldrh	r2, [r7, #16]
 8005308:	8abb      	ldrh	r3, [r7, #20]
 800530a:	429a      	cmp	r2, r3
 800530c:	d804      	bhi.n	8005318 <TP_Read_XY2+0x58>
 800530e:	8a3b      	ldrh	r3, [r7, #16]
 8005310:	3363      	adds	r3, #99	@ 0x63
 8005312:	8aba      	ldrh	r2, [r7, #20]
 8005314:	4293      	cmp	r3, r2
 8005316:	da08      	bge.n	800532a <TP_Read_XY2+0x6a>
 8005318:	8aba      	ldrh	r2, [r7, #20]
 800531a:	8a3b      	ldrh	r3, [r7, #16]
 800531c:	429a      	cmp	r2, r3
 800531e:	d82c      	bhi.n	800537a <TP_Read_XY2+0xba>
 8005320:	8abb      	ldrh	r3, [r7, #20]
 8005322:	3363      	adds	r3, #99	@ 0x63
 8005324:	8a3a      	ldrh	r2, [r7, #16]
 8005326:	4293      	cmp	r3, r2
 8005328:	db27      	blt.n	800537a <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800532a:	89fa      	ldrh	r2, [r7, #14]
 800532c:	8a7b      	ldrh	r3, [r7, #18]
 800532e:	429a      	cmp	r2, r3
 8005330:	d804      	bhi.n	800533c <TP_Read_XY2+0x7c>
 8005332:	89fb      	ldrh	r3, [r7, #14]
 8005334:	3363      	adds	r3, #99	@ 0x63
 8005336:	8a7a      	ldrh	r2, [r7, #18]
 8005338:	4293      	cmp	r3, r2
 800533a:	da08      	bge.n	800534e <TP_Read_XY2+0x8e>
 800533c:	8a7a      	ldrh	r2, [r7, #18]
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	429a      	cmp	r2, r3
 8005342:	d81a      	bhi.n	800537a <TP_Read_XY2+0xba>
 8005344:	8a7b      	ldrh	r3, [r7, #18]
 8005346:	3363      	adds	r3, #99	@ 0x63
 8005348:	89fa      	ldrh	r2, [r7, #14]
 800534a:	4293      	cmp	r3, r2
 800534c:	db15      	blt.n	800537a <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 800534e:	8abb      	ldrh	r3, [r7, #20]
 8005350:	461a      	mov	r2, r3
 8005352:	8a3b      	ldrh	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	0fda      	lsrs	r2, r3, #31
 8005358:	4413      	add	r3, r2
 800535a:	105b      	asrs	r3, r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8005362:	8a7b      	ldrh	r3, [r7, #18]
 8005364:	461a      	mov	r2, r3
 8005366:	89fb      	ldrh	r3, [r7, #14]
 8005368:	4413      	add	r3, r2
 800536a:	0fda      	lsrs	r2, r3, #31
 800536c:	4413      	add	r3, r2
 800536e:	105b      	asrs	r3, r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	801a      	strh	r2, [r3, #0]
		return 1;
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <TP_Read_XY2+0xbc>
	}else return 0;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b085      	sub	sp, #20
 8005388:	af02      	add	r7, sp, #8
 800538a:	4603      	mov	r3, r0
 800538c:	80fb      	strh	r3, [r7, #6]
 800538e:	460b      	mov	r3, r1
 8005390:	80bb      	strh	r3, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	3b0c      	subs	r3, #12
 800539a:	b298      	uxth	r0, r3
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	330d      	adds	r3, #13
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	88bc      	ldrh	r4, [r7, #4]
 80053a4:	88b9      	ldrh	r1, [r7, #4]
 80053a6:	887b      	ldrh	r3, [r7, #2]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	4623      	mov	r3, r4
 80053ac:	f7fe fb81 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 80053b0:	88bb      	ldrh	r3, [r7, #4]
 80053b2:	3b0c      	subs	r3, #12
 80053b4:	b299      	uxth	r1, r3
 80053b6:	88bb      	ldrh	r3, [r7, #4]
 80053b8:	330d      	adds	r3, #13
 80053ba:	b29c      	uxth	r4, r3
 80053bc:	88fa      	ldrh	r2, [r7, #6]
 80053be:	88f8      	ldrh	r0, [r7, #6]
 80053c0:	887b      	ldrh	r3, [r7, #2]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	4623      	mov	r3, r4
 80053c6:	f7fe fb74 	bl	8003ab2 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	3301      	adds	r3, #1
 80053ce:	b298      	uxth	r0, r3
 80053d0:	88bb      	ldrh	r3, [r7, #4]
 80053d2:	3301      	adds	r3, #1
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	887a      	ldrh	r2, [r7, #2]
 80053d8:	4619      	mov	r1, r3
 80053da:	f7fe fb53 	bl	8003a84 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b298      	uxth	r0, r3
 80053e4:	88bb      	ldrh	r3, [r7, #4]
 80053e6:	3301      	adds	r3, #1
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	4619      	mov	r1, r3
 80053ee:	f7fe fb49 	bl	8003a84 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	3301      	adds	r3, #1
 80053f6:	b298      	uxth	r0, r3
 80053f8:	88bb      	ldrh	r3, [r7, #4]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	887a      	ldrh	r2, [r7, #2]
 8005400:	4619      	mov	r1, r3
 8005402:	f7fe fb3f 	bl	8003a84 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	3b01      	subs	r3, #1
 800540a:	b298      	uxth	r0, r3
 800540c:	88bb      	ldrh	r3, [r7, #4]
 800540e:	3b01      	subs	r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	887a      	ldrh	r2, [r7, #2]
 8005414:	4619      	mov	r1, r3
 8005416:	f7fe fb35 	bl	8003a84 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 800541a:	88f8      	ldrh	r0, [r7, #6]
 800541c:	88b9      	ldrh	r1, [r7, #4]
 800541e:	887a      	ldrh	r2, [r7, #2]
 8005420:	2300      	movs	r3, #0
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	2306      	movs	r3, #6
 8005426:	f7fe ffce 	bl	80043c6 <lcd_DrawCircle>
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bd90      	pop	{r4, r7, pc}
	...

08005434 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 800543e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005442:	4843      	ldr	r0, [pc, #268]	@ (8005550 <TP_Scan+0x11c>)
 8005444:	f002 fdcc 	bl	8007fe0 <HAL_GPIO_ReadPin>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d157      	bne.n	80054fe <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <TP_Scan+0x2a>
 8005454:	493f      	ldr	r1, [pc, #252]	@ (8005554 <TP_Scan+0x120>)
 8005456:	4840      	ldr	r0, [pc, #256]	@ (8005558 <TP_Scan+0x124>)
 8005458:	f7ff ff32 	bl	80052c0 <TP_Read_XY2>
 800545c:	e03c      	b.n	80054d8 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 800545e:	493d      	ldr	r1, [pc, #244]	@ (8005554 <TP_Scan+0x120>)
 8005460:	483d      	ldr	r0, [pc, #244]	@ (8005558 <TP_Scan+0x124>)
 8005462:	f7ff ff2d 	bl	80052c0 <TP_Read_XY2>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d035      	beq.n	80054d8 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 800546c:	4b3b      	ldr	r3, [pc, #236]	@ (800555c <TP_Scan+0x128>)
 800546e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005472:	4b3a      	ldr	r3, [pc, #232]	@ (800555c <TP_Scan+0x128>)
 8005474:	899b      	ldrh	r3, [r3, #12]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800547e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005482:	4b36      	ldr	r3, [pc, #216]	@ (800555c <TP_Scan+0x128>)
 8005484:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8005488:	ee07 3a90 	vmov	s15, r3
 800548c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005498:	ee17 3a90 	vmov	r3, s15
 800549c:	b29a      	uxth	r2, r3
 800549e:	4b2f      	ldr	r3, [pc, #188]	@ (800555c <TP_Scan+0x128>)
 80054a0:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 80054a2:	4b2e      	ldr	r3, [pc, #184]	@ (800555c <TP_Scan+0x128>)
 80054a4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80054a8:	4b2c      	ldr	r3, [pc, #176]	@ (800555c <TP_Scan+0x128>)
 80054aa:	8adb      	ldrh	r3, [r3, #22]
 80054ac:	ee07 3a90 	vmov	s15, r3
 80054b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054b8:	4b28      	ldr	r3, [pc, #160]	@ (800555c <TP_Scan+0x128>)
 80054ba:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ce:	ee17 3a90 	vmov	r3, s15
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	4b21      	ldr	r3, [pc, #132]	@ (800555c <TP_Scan+0x128>)
 80054d6:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 80054d8:	4b20      	ldr	r3, [pc, #128]	@ (800555c <TP_Scan+0x128>)
 80054da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054de:	b25b      	sxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	db2a      	blt.n	800553a <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 80054e4:	4b1d      	ldr	r3, [pc, #116]	@ (800555c <TP_Scan+0x128>)
 80054e6:	22c0      	movs	r2, #192	@ 0xc0
 80054e8:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 80054ec:	4b1b      	ldr	r3, [pc, #108]	@ (800555c <TP_Scan+0x128>)
 80054ee:	899a      	ldrh	r2, [r3, #12]
 80054f0:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <TP_Scan+0x128>)
 80054f2:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 80054f4:	4b19      	ldr	r3, [pc, #100]	@ (800555c <TP_Scan+0x128>)
 80054f6:	8ada      	ldrh	r2, [r3, #22]
 80054f8:	4b18      	ldr	r3, [pc, #96]	@ (800555c <TP_Scan+0x128>)
 80054fa:	83da      	strh	r2, [r3, #30]
 80054fc:	e01d      	b.n	800553a <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 80054fe:	4b17      	ldr	r3, [pc, #92]	@ (800555c <TP_Scan+0x128>)
 8005500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005504:	b25b      	sxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	da09      	bge.n	800551e <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 800550a:	4b14      	ldr	r3, [pc, #80]	@ (800555c <TP_Scan+0x128>)
 800550c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005514:	b2da      	uxtb	r2, r3
 8005516:	4b11      	ldr	r3, [pc, #68]	@ (800555c <TP_Scan+0x128>)
 8005518:	f883 2020 	strb.w	r2, [r3, #32]
 800551c:	e00d      	b.n	800553a <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 800551e:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <TP_Scan+0x128>)
 8005520:	2200      	movs	r2, #0
 8005522:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8005524:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <TP_Scan+0x128>)
 8005526:	2200      	movs	r2, #0
 8005528:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 800552a:	4b0c      	ldr	r3, [pc, #48]	@ (800555c <TP_Scan+0x128>)
 800552c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005530:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8005532:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <TP_Scan+0x128>)
 8005534:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005538:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800553a:	4b08      	ldr	r3, [pc, #32]	@ (800555c <TP_Scan+0x128>)
 800553c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005540:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005544:	b2db      	uxtb	r3, r3
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40020800 	.word	0x40020800
 8005554:	2000002a 	.word	0x2000002a
 8005558:	20000020 	.word	0x20000020
 800555c:	20000014 	.word	0x20000014

08005560 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005564:	220e      	movs	r2, #14
 8005566:	4905      	ldr	r1, [pc, #20]	@ (800557c <TP_Save_Adjdata+0x1c>)
 8005568:	2000      	movs	r0, #0
 800556a:	f7fb fdd1 	bl	8001110 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 800556e:	2100      	movs	r1, #0
 8005570:	200e      	movs	r0, #14
 8005572:	f7fb fd6d 	bl	8001050 <at24c_WriteOneByte>
}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000038 	.word	0x20000038

08005580 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 800558a:	200e      	movs	r0, #14
 800558c:	f7fb fd44 	bl	8001018 <at24c_ReadOneByte>
 8005590:	4603      	mov	r3, r0
 8005592:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 800559a:	220e      	movs	r2, #14
 800559c:	4905      	ldr	r1, [pc, #20]	@ (80055b4 <TP_Get_Adjdata+0x34>)
 800559e:	2000      	movs	r0, #0
 80055a0:	f7fb fd97 	bl	80010d2 <at24c_Read>
		return 1;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <TP_Get_Adjdata+0x2a>
	}
	return 0;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000038 	.word	0x20000038

080055b8 <touch_Adjust>:


void touch_Adjust(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08e      	sub	sp, #56	@ 0x38
 80055bc:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 80055be:	2300      	movs	r3, #0
 80055c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 80055ca:	4bb5      	ldr	r3, [pc, #724]	@ (80058a0 <touch_Adjust+0x2e8>)
 80055cc:	881a      	ldrh	r2, [r3, #0]
 80055ce:	4bb4      	ldr	r3, [pc, #720]	@ (80058a0 <touch_Adjust+0x2e8>)
 80055d0:	885b      	ldrh	r3, [r3, #2]
 80055d2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80055d6:	9100      	str	r1, [sp, #0]
 80055d8:	2100      	movs	r1, #0
 80055da:	2000      	movs	r0, #0
 80055dc:	f7fe fa1c 	bl	8003a18 <lcd_Fill>
	lcd_ShowStr(5,40,"Please adjustment the screen.",RED,WHITE,16,0);
 80055e0:	2300      	movs	r3, #0
 80055e2:	9302      	str	r3, [sp, #8]
 80055e4:	2310      	movs	r3, #16
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80055f2:	4aac      	ldr	r2, [pc, #688]	@ (80058a4 <touch_Adjust+0x2ec>)
 80055f4:	2128      	movs	r1, #40	@ 0x28
 80055f6:	2005      	movs	r0, #5
 80055f8:	f7fe ff52 	bl	80044a0 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 80055fc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005600:	2114      	movs	r1, #20
 8005602:	2014      	movs	r0, #20
 8005604:	f7ff febe 	bl	8005384 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8005608:	4ba7      	ldr	r3, [pc, #668]	@ (80058a8 <touch_Adjust+0x2f0>)
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8005610:	4ba5      	ldr	r3, [pc, #660]	@ (80058a8 <touch_Adjust+0x2f0>)
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	625a      	str	r2, [r3, #36]	@ 0x24
	while(1)
	{
		HAL_Delay(50);
 8005618:	2032      	movs	r0, #50	@ 0x32
 800561a:	f001 fc31 	bl	8006e80 <HAL_Delay>
		tp_dev.scan(1);
 800561e:	4ba2      	ldr	r3, [pc, #648]	@ (80058a8 <touch_Adjust+0x2f0>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2001      	movs	r0, #1
 8005624:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8005626:	4ba0      	ldr	r3, [pc, #640]	@ (80058a8 <touch_Adjust+0x2f0>)
 8005628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800562c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005630:	2b40      	cmp	r3, #64	@ 0x40
 8005632:	d1f1      	bne.n	8005618 <touch_Adjust+0x60>
		{
			tp_dev.sta&=~(1<<6);
 8005634:	4b9c      	ldr	r3, [pc, #624]	@ (80058a8 <touch_Adjust+0x2f0>)
 8005636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800563a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563e:	b2da      	uxtb	r2, r3
 8005640:	4b99      	ldr	r3, [pc, #612]	@ (80058a8 <touch_Adjust+0x2f0>)
 8005642:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8005646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800564a:	4a97      	ldr	r2, [pc, #604]	@ (80058a8 <touch_Adjust+0x2f0>)
 800564c:	8992      	ldrh	r2, [r2, #12]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	3328      	adds	r3, #40	@ 0x28
 8005652:	443b      	add	r3, r7
 8005654:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8005658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800565c:	4a92      	ldr	r2, [pc, #584]	@ (80058a8 <touch_Adjust+0x2f0>)
 800565e:	8ad2      	ldrh	r2, [r2, #22]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	3328      	adds	r3, #40	@ 0x28
 8005664:	443b      	add	r3, r7
 8005666:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 800566a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800566e:	3301      	adds	r3, #1
 8005670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			switch(cnt)
 8005674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005678:	3b01      	subs	r3, #1
 800567a:	2b03      	cmp	r3, #3
 800567c:	d8cc      	bhi.n	8005618 <touch_Adjust+0x60>
 800567e:	a201      	add	r2, pc, #4	@ (adr r2, 8005684 <touch_Adjust+0xcc>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	08005695 	.word	0x08005695
 8005688:	080056b7 	.word	0x080056b7
 800568c:	080056e1 	.word	0x080056e1
 8005690:	08005711 	.word	0x08005711
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8005694:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005698:	2114      	movs	r1, #20
 800569a:	2014      	movs	r0, #20
 800569c:	f7ff fe72 	bl	8005384 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 80056a0:	4b7f      	ldr	r3, [pc, #508]	@ (80058a0 <touch_Adjust+0x2e8>)
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	3b14      	subs	r3, #20
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80056ac:	2114      	movs	r1, #20
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fe68 	bl	8005384 <TP_Drow_Touch_Point>
					break;
 80056b4:	e322      	b.n	8005cfc <touch_Adjust+0x744>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80056b6:	4b7a      	ldr	r3, [pc, #488]	@ (80058a0 <touch_Adjust+0x2e8>)
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	3b14      	subs	r3, #20
 80056bc:	b29b      	uxth	r3, r3
 80056be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056c2:	2114      	movs	r1, #20
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fe5d 	bl	8005384 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 80056ca:	4b75      	ldr	r3, [pc, #468]	@ (80058a0 <touch_Adjust+0x2e8>)
 80056cc:	885b      	ldrh	r3, [r3, #2]
 80056ce:	3b14      	subs	r3, #20
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80056d6:	4619      	mov	r1, r3
 80056d8:	2014      	movs	r0, #20
 80056da:	f7ff fe53 	bl	8005384 <TP_Drow_Touch_Point>
					break;
 80056de:	e30d      	b.n	8005cfc <touch_Adjust+0x744>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 80056e0:	4b6f      	ldr	r3, [pc, #444]	@ (80058a0 <touch_Adjust+0x2e8>)
 80056e2:	885b      	ldrh	r3, [r3, #2]
 80056e4:	3b14      	subs	r3, #20
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056ec:	4619      	mov	r1, r3
 80056ee:	2014      	movs	r0, #20
 80056f0:	f7ff fe48 	bl	8005384 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 80056f4:	4b6a      	ldr	r3, [pc, #424]	@ (80058a0 <touch_Adjust+0x2e8>)
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	3b14      	subs	r3, #20
 80056fa:	b298      	uxth	r0, r3
 80056fc:	4b68      	ldr	r3, [pc, #416]	@ (80058a0 <touch_Adjust+0x2e8>)
 80056fe:	885b      	ldrh	r3, [r3, #2]
 8005700:	3b14      	subs	r3, #20
 8005702:	b29b      	uxth	r3, r3
 8005704:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005708:	4619      	mov	r1, r3
 800570a:	f7ff fe3b 	bl	8005384 <TP_Drow_Touch_Point>
					break;
 800570e:	e2f5      	b.n	8005cfc <touch_Adjust+0x744>
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8005710:	883b      	ldrh	r3, [r7, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	88bb      	ldrh	r3, [r7, #4]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	bfb8      	it	lt
 800571c:	425b      	neglt	r3, r3
 800571e:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8005720:	887b      	ldrh	r3, [r7, #2]
 8005722:	461a      	mov	r2, r3
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfb8      	it	lt
 800572c:	425b      	neglt	r3, r3
 800572e:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	fb03 f303 	mul.w	r3, r3, r3
 8005736:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	fb03 f303 	mul.w	r3, r3, r3
 800573e:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f7fa fe80 	bl	800044c <__aeabi_ui2d>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	ec43 2b10 	vmov	d0, r2, r3
 8005754:	f007 f8ee 	bl	800c934 <sqrt>
 8005758:	ec53 2b10 	vmov	r2, r3, d0
 800575c:	4610      	mov	r0, r2
 800575e:	4619      	mov	r1, r3
 8005760:	f7fb f99e 	bl	8000aa0 <__aeabi_d2uiz>
 8005764:	4603      	mov	r3, r0
 8005766:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8005768:	893b      	ldrh	r3, [r7, #8]
 800576a:	461a      	mov	r2, r3
 800576c:	89bb      	ldrh	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	bfb8      	it	lt
 8005774:	425b      	neglt	r3, r3
 8005776:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8005778:	897b      	ldrh	r3, [r7, #10]
 800577a:	461a      	mov	r2, r3
 800577c:	89fb      	ldrh	r3, [r7, #14]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	bfb8      	it	lt
 8005784:	425b      	neglt	r3, r3
 8005786:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	fb03 f303 	mul.w	r3, r3, r3
 800578e:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	fb03 f303 	mul.w	r3, r3, r3
 8005796:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005798:	6a3a      	ldr	r2, [r7, #32]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fe54 	bl	800044c <__aeabi_ui2d>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	ec43 2b10 	vmov	d0, r2, r3
 80057ac:	f007 f8c2 	bl	800c934 <sqrt>
 80057b0:	ec53 2b10 	vmov	r2, r3, d0
 80057b4:	4610      	mov	r0, r2
 80057b6:	4619      	mov	r1, r3
 80057b8:	f7fb f972 	bl	8000aa0 <__aeabi_d2uiz>
 80057bc:	4603      	mov	r3, r0
 80057be:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80057c0:	8b7b      	ldrh	r3, [r7, #26]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057ca:	8b3b      	ldrh	r3, [r7, #24]
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057d8:	ee16 0a90 	vmov	r0, s13
 80057dc:	f7fa fe58 	bl	8000490 <__aeabi_f2d>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 80057e8:	a329      	add	r3, pc, #164	@ (adr r3, 8005890 <touch_Adjust+0x2d8>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80057f2:	f7fb f917 	bl	8000a24 <__aeabi_dcmplt>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <touch_Adjust+0x264>
 80057fc:	a326      	add	r3, pc, #152	@ (adr r3, 8005898 <touch_Adjust+0x2e0>)
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005806:	f7fb f92b 	bl	8000a60 <__aeabi_dcmpgt>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <touch_Adjust+0x264>
 8005810:	8b7b      	ldrh	r3, [r7, #26]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <touch_Adjust+0x264>
 8005816:	8b3b      	ldrh	r3, [r7, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d14b      	bne.n	80058b4 <touch_Adjust+0x2fc>
					{
						cnt=0;
 800581c:	2300      	movs	r3, #0
 800581e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005822:	4b1f      	ldr	r3, [pc, #124]	@ (80058a0 <touch_Adjust+0x2e8>)
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	3b14      	subs	r3, #20
 8005828:	b298      	uxth	r0, r3
 800582a:	4b1d      	ldr	r3, [pc, #116]	@ (80058a0 <touch_Adjust+0x2e8>)
 800582c:	885b      	ldrh	r3, [r3, #2]
 800582e:	3b14      	subs	r3, #20
 8005830:	b29b      	uxth	r3, r3
 8005832:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005836:	4619      	mov	r1, r3
 8005838:	f7ff fda4 	bl	8005384 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 800583c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005840:	2114      	movs	r1, #20
 8005842:	2014      	movs	r0, #20
 8005844:	f7ff fd9e 	bl	8005384 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Filed!          ",RED,WHITE,16,0);
 8005848:	2300      	movs	r3, #0
 800584a:	9302      	str	r3, [sp, #8]
 800584c:	2310      	movs	r3, #16
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800585a:	4a14      	ldr	r2, [pc, #80]	@ (80058ac <touch_Adjust+0x2f4>)
 800585c:	2128      	movs	r1, #40	@ 0x28
 800585e:	2005      	movs	r0, #5
 8005860:	f7fe fe1e 	bl	80044a0 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005864:	2300      	movs	r3, #0
 8005866:	9302      	str	r3, [sp, #8]
 8005868:	2310      	movs	r3, #16
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005876:	4a0e      	ldr	r2, [pc, #56]	@ (80058b0 <touch_Adjust+0x2f8>)
 8005878:	213c      	movs	r1, #60	@ 0x3c
 800587a:	2005      	movs	r0, #5
 800587c:	f7fe fe10 	bl	80044a0 <lcd_ShowStr>
						HAL_Delay(1000);
 8005880:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005884:	f001 fafc 	bl	8006e80 <HAL_Delay>
 						continue;
 8005888:	e238      	b.n	8005cfc <touch_Adjust+0x744>
 800588a:	bf00      	nop
 800588c:	f3af 8000 	nop.w
 8005890:	66666666 	.word	0x66666666
 8005894:	3fee6666 	.word	0x3fee6666
 8005898:	cccccccd 	.word	0xcccccccd
 800589c:	3ff0cccc 	.word	0x3ff0cccc
 80058a0:	200002bc 	.word	0x200002bc
 80058a4:	0800cbb4 	.word	0x0800cbb4
 80058a8:	20000014 	.word	0x20000014
 80058ac:	0800cbd4 	.word	0x0800cbd4
 80058b0:	0800cbf4 	.word	0x0800cbf4
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 80058b4:	883b      	ldrh	r3, [r7, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	893b      	ldrh	r3, [r7, #8]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bfb8      	it	lt
 80058c0:	425b      	neglt	r3, r3
 80058c2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	461a      	mov	r2, r3
 80058c8:	897b      	ldrh	r3, [r7, #10]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bfb8      	it	lt
 80058d0:	425b      	neglt	r3, r3
 80058d2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	fb03 f303 	mul.w	r3, r3, r3
 80058da:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	fb03 f303 	mul.w	r3, r3, r3
 80058e2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80058e4:	6a3a      	ldr	r2, [r7, #32]
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fa fdae 	bl	800044c <__aeabi_ui2d>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	ec43 2b10 	vmov	d0, r2, r3
 80058f8:	f007 f81c 	bl	800c934 <sqrt>
 80058fc:	ec53 2b10 	vmov	r2, r3, d0
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	f7fb f8cc 	bl	8000aa0 <__aeabi_d2uiz>
 8005908:	4603      	mov	r3, r0
 800590a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 800590c:	88bb      	ldrh	r3, [r7, #4]
 800590e:	461a      	mov	r2, r3
 8005910:	89bb      	ldrh	r3, [r7, #12]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	bfb8      	it	lt
 8005918:	425b      	neglt	r3, r3
 800591a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	461a      	mov	r2, r3
 8005920:	89fb      	ldrh	r3, [r7, #14]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	bfb8      	it	lt
 8005928:	425b      	neglt	r3, r3
 800592a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	fb03 f303 	mul.w	r3, r3, r3
 8005932:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	fb03 f303 	mul.w	r3, r3, r3
 800593a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f7fa fd82 	bl	800044c <__aeabi_ui2d>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	ec43 2b10 	vmov	d0, r2, r3
 8005950:	f006 fff0 	bl	800c934 <sqrt>
 8005954:	ec53 2b10 	vmov	r2, r3, d0
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	f7fb f8a0 	bl	8000aa0 <__aeabi_d2uiz>
 8005960:	4603      	mov	r3, r0
 8005962:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005964:	8b7b      	ldrh	r3, [r7, #26]
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800596e:	8b3b      	ldrh	r3, [r7, #24]
 8005970:	ee07 3a90 	vmov	s15, r3
 8005974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005978:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800597c:	ee16 0a90 	vmov	r0, s13
 8005980:	f7fa fd86 	bl	8000490 <__aeabi_f2d>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 800598c:	a380      	add	r3, pc, #512	@ (adr r3, 8005b90 <touch_Adjust+0x5d8>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005996:	f7fb f845 	bl	8000a24 <__aeabi_dcmplt>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <touch_Adjust+0x3fc>
 80059a0:	a37d      	add	r3, pc, #500	@ (adr r3, 8005b98 <touch_Adjust+0x5e0>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059aa:	f7fb f859 	bl	8000a60 <__aeabi_dcmpgt>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d036      	beq.n	8005a22 <touch_Adjust+0x46a>
					{
						cnt=0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80059ba:	4b79      	ldr	r3, [pc, #484]	@ (8005ba0 <touch_Adjust+0x5e8>)
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	3b14      	subs	r3, #20
 80059c0:	b298      	uxth	r0, r3
 80059c2:	4b77      	ldr	r3, [pc, #476]	@ (8005ba0 <touch_Adjust+0x5e8>)
 80059c4:	885b      	ldrh	r3, [r3, #2]
 80059c6:	3b14      	subs	r3, #20
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059ce:	4619      	mov	r1, r3
 80059d0:	f7ff fcd8 	bl	8005384 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80059d4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80059d8:	2114      	movs	r1, #20
 80059da:	2014      	movs	r0, #20
 80059dc:	f7ff fcd2 	bl	8005384 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Filed!          ",RED,WHITE,16,0);
 80059e0:	2300      	movs	r3, #0
 80059e2:	9302      	str	r3, [sp, #8]
 80059e4:	2310      	movs	r3, #16
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80059f2:	4a6c      	ldr	r2, [pc, #432]	@ (8005ba4 <touch_Adjust+0x5ec>)
 80059f4:	2128      	movs	r1, #40	@ 0x28
 80059f6:	2005      	movs	r0, #5
 80059f8:	f7fe fd52 	bl	80044a0 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80059fc:	2300      	movs	r3, #0
 80059fe:	9302      	str	r3, [sp, #8]
 8005a00:	2310      	movs	r3, #16
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005a0e:	4a66      	ldr	r2, [pc, #408]	@ (8005ba8 <touch_Adjust+0x5f0>)
 8005a10:	213c      	movs	r1, #60	@ 0x3c
 8005a12:	2005      	movs	r0, #5
 8005a14:	f7fe fd44 	bl	80044a0 <lcd_ShowStr>
						HAL_Delay(1000);
 8005a18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a1c:	f001 fa30 	bl	8006e80 <HAL_Delay>
						continue;
 8005a20:	e16c      	b.n	8005cfc <touch_Adjust+0x744>
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8005a22:	88bb      	ldrh	r3, [r7, #4]
 8005a24:	461a      	mov	r2, r3
 8005a26:	893b      	ldrh	r3, [r7, #8]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfb8      	it	lt
 8005a2e:	425b      	neglt	r3, r3
 8005a30:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	461a      	mov	r2, r3
 8005a36:	897b      	ldrh	r3, [r7, #10]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfb8      	it	lt
 8005a3e:	425b      	neglt	r3, r3
 8005a40:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	fb03 f303 	mul.w	r3, r3, r3
 8005a48:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	fb03 f303 	mul.w	r3, r3, r3
 8005a50:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005a52:	6a3a      	ldr	r2, [r7, #32]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fa fcf7 	bl	800044c <__aeabi_ui2d>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	ec43 2b10 	vmov	d0, r2, r3
 8005a66:	f006 ff65 	bl	800c934 <sqrt>
 8005a6a:	ec53 2b10 	vmov	r2, r3, d0
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7fb f815 	bl	8000aa0 <__aeabi_d2uiz>
 8005a76:	4603      	mov	r3, r0
 8005a78:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8005a7a:	883b      	ldrh	r3, [r7, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	89bb      	ldrh	r3, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bfb8      	it	lt
 8005a86:	425b      	neglt	r3, r3
 8005a88:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8005a8a:	887b      	ldrh	r3, [r7, #2]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	89fb      	ldrh	r3, [r7, #14]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bfb8      	it	lt
 8005a96:	425b      	neglt	r3, r3
 8005a98:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	fb03 f303 	mul.w	r3, r3, r3
 8005aa0:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	fb03 f303 	mul.w	r3, r3, r3
 8005aa8:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005aaa:	6a3a      	ldr	r2, [r7, #32]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fa fccb 	bl	800044c <__aeabi_ui2d>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	ec43 2b10 	vmov	d0, r2, r3
 8005abe:	f006 ff39 	bl	800c934 <sqrt>
 8005ac2:	ec53 2b10 	vmov	r2, r3, d0
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f7fa ffe9 	bl	8000aa0 <__aeabi_d2uiz>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005ad2:	8b7b      	ldrh	r3, [r7, #26]
 8005ad4:	ee07 3a90 	vmov	s15, r3
 8005ad8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005adc:	8b3b      	ldrh	r3, [r7, #24]
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005aea:	ee16 0a90 	vmov	r0, s13
 8005aee:	f7fa fccf 	bl	8000490 <__aeabi_f2d>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005afa:	a325      	add	r3, pc, #148	@ (adr r3, 8005b90 <touch_Adjust+0x5d8>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b04:	f7fa ff8e 	bl	8000a24 <__aeabi_dcmplt>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <touch_Adjust+0x56a>
 8005b0e:	a322      	add	r3, pc, #136	@ (adr r3, 8005b98 <touch_Adjust+0x5e0>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b18:	f7fa ffa2 	bl	8000a60 <__aeabi_dcmpgt>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d044      	beq.n	8005bac <touch_Adjust+0x5f4>
					{
						cnt=0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005b28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba0 <touch_Adjust+0x5e8>)
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	3b14      	subs	r3, #20
 8005b2e:	b298      	uxth	r0, r3
 8005b30:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba0 <touch_Adjust+0x5e8>)
 8005b32:	885b      	ldrh	r3, [r3, #2]
 8005b34:	3b14      	subs	r3, #20
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f7ff fc21 	bl	8005384 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005b42:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005b46:	2114      	movs	r1, #20
 8005b48:	2014      	movs	r0, #20
 8005b4a:	f7ff fc1b 	bl	8005384 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Filed!          ",RED,WHITE,16,0);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9302      	str	r3, [sp, #8]
 8005b52:	2310      	movs	r3, #16
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005b60:	4a10      	ldr	r2, [pc, #64]	@ (8005ba4 <touch_Adjust+0x5ec>)
 8005b62:	2128      	movs	r1, #40	@ 0x28
 8005b64:	2005      	movs	r0, #5
 8005b66:	f7fe fc9b 	bl	80044a0 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9302      	str	r3, [sp, #8]
 8005b6e:	2310      	movs	r3, #16
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba8 <touch_Adjust+0x5f0>)
 8005b7e:	213c      	movs	r1, #60	@ 0x3c
 8005b80:	2005      	movs	r0, #5
 8005b82:	f7fe fc8d 	bl	80044a0 <lcd_ShowStr>

						HAL_Delay(1000);
 8005b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b8a:	f001 f979 	bl	8006e80 <HAL_Delay>
 							continue;
 8005b8e:	e0b5      	b.n	8005cfc <touch_Adjust+0x744>
 8005b90:	66666666 	.word	0x66666666
 8005b94:	3fee6666 	.word	0x3fee6666
 8005b98:	cccccccd 	.word	0xcccccccd
 8005b9c:	3ff0cccc 	.word	0x3ff0cccc
 8005ba0:	200002bc 	.word	0x200002bc
 8005ba4:	0800cbd4 	.word	0x0800cbd4
 8005ba8:	0800cbf4 	.word	0x0800cbf4
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8005bac:	4b55      	ldr	r3, [pc, #340]	@ (8005d04 <touch_Adjust+0x74c>)
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	3b28      	subs	r3, #40	@ 0x28
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005bba:	88bb      	ldrh	r3, [r7, #4]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	883b      	ldrh	r3, [r7, #0]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bce:	4b4e      	ldr	r3, [pc, #312]	@ (8005d08 <touch_Adjust+0x750>)
 8005bd0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8005bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8005d04 <touch_Adjust+0x74c>)
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005be0:	4b49      	ldr	r3, [pc, #292]	@ (8005d08 <touch_Adjust+0x750>)
 8005be2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005be6:	88bb      	ldrh	r3, [r7, #4]
 8005be8:	461a      	mov	r2, r3
 8005bea:	883b      	ldrh	r3, [r7, #0]
 8005bec:	4413      	add	r3, r2
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bfe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c0a:	ee17 3a90 	vmov	r3, s15
 8005c0e:	b21a      	sxth	r2, r3
 8005c10:	4b3d      	ldr	r3, [pc, #244]	@ (8005d08 <touch_Adjust+0x750>)
 8005c12:	859a      	strh	r2, [r3, #44]	@ 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8005c14:	4b3b      	ldr	r3, [pc, #236]	@ (8005d04 <touch_Adjust+0x74c>)
 8005c16:	885b      	ldrh	r3, [r3, #2]
 8005c18:	3b28      	subs	r3, #40	@ 0x28
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005c22:	897b      	ldrh	r3, [r7, #10]
 8005c24:	461a      	mov	r2, r3
 8005c26:	887b      	ldrh	r3, [r7, #2]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c36:	4b34      	ldr	r3, [pc, #208]	@ (8005d08 <touch_Adjust+0x750>)
 8005c38:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8005c3c:	4b31      	ldr	r3, [pc, #196]	@ (8005d04 <touch_Adjust+0x74c>)
 8005c3e:	885b      	ldrh	r3, [r3, #2]
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c48:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <touch_Adjust+0x750>)
 8005c4a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8005c4e:	897b      	ldrh	r3, [r7, #10]
 8005c50:	461a      	mov	r2, r3
 8005c52:	887b      	ldrh	r3, [r7, #2]
 8005c54:	4413      	add	r3, r2
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c66:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c72:	ee17 3a90 	vmov	r3, s15
 8005c76:	b21a      	sxth	r2, r3
 8005c78:	4b23      	ldr	r3, [pc, #140]	@ (8005d08 <touch_Adjust+0x750>)
 8005c7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005c7c:	4b21      	ldr	r3, [pc, #132]	@ (8005d04 <touch_Adjust+0x74c>)
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	3b14      	subs	r3, #20
 8005c82:	b298      	uxth	r0, r3
 8005c84:	4b1f      	ldr	r3, [pc, #124]	@ (8005d04 <touch_Adjust+0x74c>)
 8005c86:	885b      	ldrh	r3, [r3, #2]
 8005c88:	3b14      	subs	r3, #20
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c90:	4619      	mov	r1, r3
 8005c92:	f7ff fb77 	bl	8005384 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8005c96:	2300      	movs	r3, #0
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	2310      	movs	r3, #16
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005ca8:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <touch_Adjust+0x754>)
 8005caa:	2128      	movs	r1, #40	@ 0x28
 8005cac:	2005      	movs	r0, #5
 8005cae:	f7fe fbf7 	bl	80044a0 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005cc4:	4a12      	ldr	r2, [pc, #72]	@ (8005d10 <touch_Adjust+0x758>)
 8005cc6:	213c      	movs	r1, #60	@ 0x3c
 8005cc8:	2005      	movs	r0, #5
 8005cca:	f7fe fbe9 	bl	80044a0 <lcd_ShowStr>
					HAL_Delay(1000);
 8005cce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005cd2:	f001 f8d5 	bl	8006e80 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9302      	str	r3, [sp, #8]
 8005cda:	2310      	movs	r3, #16
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8005d14 <touch_Adjust+0x75c>)
 8005cea:	2128      	movs	r1, #40	@ 0x28
 8005cec:	2005      	movs	r0, #5
 8005cee:	f7fe fbd7 	bl	80044a0 <lcd_ShowStr>
					TP_Save_Adjdata();
 8005cf2:	f7ff fc35 	bl	8005560 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8005cf6:	f7ff fc43 	bl	8005580 <TP_Get_Adjdata>
					return;
 8005cfa:	e000      	b.n	8005cfe <touch_Adjust+0x746>
		HAL_Delay(50);
 8005cfc:	e48c      	b.n	8005618 <touch_Adjust+0x60>
			}
		}
 	}
}
 8005cfe:	3728      	adds	r7, #40	@ 0x28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	200002bc 	.word	0x200002bc
 8005d08:	20000014 	.word	0x20000014
 8005d0c:	0800cc14 	.word	0x0800cc14
 8005d10:	0800cc34 	.word	0x0800cc34
 8005d14:	0800cc54 	.word	0x0800cc54

08005d18 <touch_init>:

void touch_init(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8005d1c:	4904      	ldr	r1, [pc, #16]	@ (8005d30 <touch_init+0x18>)
 8005d1e:	4805      	ldr	r0, [pc, #20]	@ (8005d34 <touch_init+0x1c>)
 8005d20:	f7ff faac 	bl	800527c <TP_Read_XY>
	at24c_init();
 8005d24:	f7fb f972 	bl	800100c <at24c_init>
	TP_Get_Adjdata();
 8005d28:	f7ff fc2a 	bl	8005580 <TP_Get_Adjdata>
}
 8005d2c:	bf00      	nop
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	2000002a 	.word	0x2000002a
 8005d34:	20000020 	.word	0x20000020

08005d38 <touch_Scan>:

void touch_Scan(){
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8005d3c:	4b02      	ldr	r3, [pc, #8]	@ (8005d48 <touch_Scan+0x10>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2000      	movs	r0, #0
 8005d42:	4798      	blx	r3
}
 8005d44:	bf00      	nop
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000014 	.word	0x20000014

08005d4c <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8005d50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d54:	4805      	ldr	r0, [pc, #20]	@ (8005d6c <touch_IsTouched+0x20>)
 8005d56:	f002 f943 	bl	8007fe0 <HAL_GPIO_ReadPin>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40020800 	.word	0x40020800

08005d70 <touch_GetX>:

uint16_t touch_GetX(){
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8005d74:	4b03      	ldr	r3, [pc, #12]	@ (8005d84 <touch_GetX+0x14>)
 8005d76:	899b      	ldrh	r3, [r3, #12]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	20000014 	.word	0x20000014

08005d88 <touch_GetY>:

uint16_t touch_GetY(){
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8005d8c:	4b03      	ldr	r3, [pc, #12]	@ (8005d9c <touch_GetY+0x14>)
 8005d8e:	8adb      	ldrh	r3, [r3, #22]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000014 	.word	0x20000014

08005da0 <is_touch_second>:
			&& touch_GetX() < POS_X_FIRST + WIDTH
			&& touch_GetY() > POS_Y_FIRST
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
}

int is_touch_second(){
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8005da4:	f7ff ffd2 	bl	8005d4c <touch_IsTouched>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <is_touch_second+0x12>
 8005dae:	2300      	movs	r3, #0
 8005db0:	e016      	b.n	8005de0 <is_touch_second+0x40>
	return (touch_GetX() > POS_X_SECOND
 8005db2:	f7ff ffdd 	bl	8005d70 <touch_GetX>
 8005db6:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8005db8:	2b41      	cmp	r3, #65	@ 0x41
 8005dba:	d910      	bls.n	8005dde <is_touch_second+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8005dbc:	f7ff ffd8 	bl	8005d70 <touch_GetX>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2bb8      	cmp	r3, #184	@ 0xb8
 8005dc4:	d80b      	bhi.n	8005dde <is_touch_second+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8005dc6:	f7ff ffdf 	bl	8005d88 <touch_GetY>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b96      	cmp	r3, #150	@ 0x96
 8005dce:	d906      	bls.n	8005dde <is_touch_second+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8005dd0:	f7ff ffda 	bl	8005d88 <touch_GetY>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2bb8      	cmp	r3, #184	@ 0xb8
 8005dd8:	d801      	bhi.n	8005dde <is_touch_second+0x3e>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <is_touch_second+0x40>
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <is_touch_third>:

int is_touch_third(){
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8005de8:	f7ff ffb0 	bl	8005d4c <touch_IsTouched>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <is_touch_third+0x12>
 8005df2:	2300      	movs	r3, #0
 8005df4:	e016      	b.n	8005e24 <is_touch_third+0x40>
	return (touch_GetX() > POS_X_THIRD
 8005df6:	f7ff ffbb 	bl	8005d70 <touch_GetX>
 8005dfa:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8005dfc:	2b41      	cmp	r3, #65	@ 0x41
 8005dfe:	d910      	bls.n	8005e22 <is_touch_third+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8005e00:	f7ff ffb6 	bl	8005d70 <touch_GetX>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2bb8      	cmp	r3, #184	@ 0xb8
 8005e08:	d80b      	bhi.n	8005e22 <is_touch_third+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8005e0a:	f7ff ffbd 	bl	8005d88 <touch_GetY>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2bc8      	cmp	r3, #200	@ 0xc8
 8005e12:	d906      	bls.n	8005e22 <is_touch_third+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8005e14:	f7ff ffb8 	bl	8005d88 <touch_GetY>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2bea      	cmp	r3, #234	@ 0xea
 8005e1c:	d801      	bhi.n	8005e22 <is_touch_third+0x3e>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <is_touch_third+0x40>
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <is_touch_fouth>:

int is_touch_fouth(){
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8005e2c:	f7ff ff8e 	bl	8005d4c <touch_IsTouched>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <is_touch_fouth+0x12>
 8005e36:	2300      	movs	r3, #0
 8005e38:	e017      	b.n	8005e6a <is_touch_fouth+0x42>
	return (touch_GetX() > POS_X_FORTH
 8005e3a:	f7ff ff99 	bl	8005d70 <touch_GetX>
 8005e3e:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8005e40:	2b41      	cmp	r3, #65	@ 0x41
 8005e42:	d911      	bls.n	8005e68 <is_touch_fouth+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8005e44:	f7ff ff94 	bl	8005d70 <touch_GetX>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2bb8      	cmp	r3, #184	@ 0xb8
 8005e4c:	d80c      	bhi.n	8005e68 <is_touch_fouth+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8005e4e:	f7ff ff9b 	bl	8005d88 <touch_GetY>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2bfa      	cmp	r3, #250	@ 0xfa
 8005e56:	d907      	bls.n	8005e68 <is_touch_fouth+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8005e58:	f7ff ff96 	bl	8005d88 <touch_GetY>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8005e62:	d801      	bhi.n	8005e68 <is_touch_fouth+0x40>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <is_touch_fouth+0x42>
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <is_touch_time_1>:

int is_touch_time_1(){
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8005e72:	f7ff ff6b 	bl	8005d4c <touch_IsTouched>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <is_touch_time_1+0x12>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e016      	b.n	8005eae <is_touch_time_1+0x40>
	return (touch_GetX() > 75
 8005e80:	f7ff ff76 	bl	8005d70 <touch_GetX>
 8005e84:	4603      	mov	r3, r0
			&& touch_GetX() < 75 + 25
			&& touch_GetY() > 70
			&& touch_GetY() < 70 + 25);
 8005e86:	2b4b      	cmp	r3, #75	@ 0x4b
 8005e88:	d910      	bls.n	8005eac <is_touch_time_1+0x3e>
			&& touch_GetX() < 75 + 25
 8005e8a:	f7ff ff71 	bl	8005d70 <touch_GetX>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b63      	cmp	r3, #99	@ 0x63
 8005e92:	d80b      	bhi.n	8005eac <is_touch_time_1+0x3e>
			&& touch_GetY() > 70
 8005e94:	f7ff ff78 	bl	8005d88 <touch_GetY>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b46      	cmp	r3, #70	@ 0x46
 8005e9c:	d906      	bls.n	8005eac <is_touch_time_1+0x3e>
			&& touch_GetY() < 70 + 25);
 8005e9e:	f7ff ff73 	bl	8005d88 <touch_GetY>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b5e      	cmp	r3, #94	@ 0x5e
 8005ea6:	d801      	bhi.n	8005eac <is_touch_time_1+0x3e>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <is_touch_time_1+0x40>
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <is_touch_time_2>:

int is_touch_time_2(){
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8005eb6:	f7ff ff49 	bl	8005d4c <touch_IsTouched>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <is_touch_time_2+0x12>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e016      	b.n	8005ef2 <is_touch_time_2+0x40>
	return (touch_GetX() > 110
 8005ec4:	f7ff ff54 	bl	8005d70 <touch_GetX>
 8005ec8:	4603      	mov	r3, r0
			&& touch_GetX() < 110 + 25
			&& touch_GetY() > 70
			&& touch_GetY() < 70 + 25);
 8005eca:	2b6e      	cmp	r3, #110	@ 0x6e
 8005ecc:	d910      	bls.n	8005ef0 <is_touch_time_2+0x3e>
			&& touch_GetX() < 110 + 25
 8005ece:	f7ff ff4f 	bl	8005d70 <touch_GetX>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b86      	cmp	r3, #134	@ 0x86
 8005ed6:	d80b      	bhi.n	8005ef0 <is_touch_time_2+0x3e>
			&& touch_GetY() > 70
 8005ed8:	f7ff ff56 	bl	8005d88 <touch_GetY>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b46      	cmp	r3, #70	@ 0x46
 8005ee0:	d906      	bls.n	8005ef0 <is_touch_time_2+0x3e>
			&& touch_GetY() < 70 + 25);
 8005ee2:	f7ff ff51 	bl	8005d88 <touch_GetY>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b5e      	cmp	r3, #94	@ 0x5e
 8005eea:	d801      	bhi.n	8005ef0 <is_touch_time_2+0x3e>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <is_touch_time_2+0x40>
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <is_touch_time_3>:

int is_touch_time_3(){
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8005efa:	f7ff ff27 	bl	8005d4c <touch_IsTouched>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <is_touch_time_3+0x12>
 8005f04:	2300      	movs	r3, #0
 8005f06:	e016      	b.n	8005f36 <is_touch_time_3+0x40>
	return (touch_GetX() > 150
 8005f08:	f7ff ff32 	bl	8005d70 <touch_GetX>
 8005f0c:	4603      	mov	r3, r0
			&& touch_GetX() < 150 + 25
			&& touch_GetY() > 70
			&& touch_GetY() < 70 + 25);
 8005f0e:	2b96      	cmp	r3, #150	@ 0x96
 8005f10:	d910      	bls.n	8005f34 <is_touch_time_3+0x3e>
			&& touch_GetX() < 150 + 25
 8005f12:	f7ff ff2d 	bl	8005d70 <touch_GetX>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2bae      	cmp	r3, #174	@ 0xae
 8005f1a:	d80b      	bhi.n	8005f34 <is_touch_time_3+0x3e>
			&& touch_GetY() > 70
 8005f1c:	f7ff ff34 	bl	8005d88 <touch_GetY>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b46      	cmp	r3, #70	@ 0x46
 8005f24:	d906      	bls.n	8005f34 <is_touch_time_3+0x3e>
			&& touch_GetY() < 70 + 25);
 8005f26:	f7ff ff2f 	bl	8005d88 <touch_GetY>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b5e      	cmp	r3, #94	@ 0x5e
 8005f2e:	d801      	bhi.n	8005f34 <is_touch_time_3+0x3e>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <is_touch_time_3+0x40>
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <is_touch_time_4>:

int is_touch_time_4(){
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8005f3e:	f7ff ff05 	bl	8005d4c <touch_IsTouched>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <is_touch_time_4+0x12>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e016      	b.n	8005f7a <is_touch_time_4+0x40>
	return (touch_GetX() > 75
 8005f4c:	f7ff ff10 	bl	8005d70 <touch_GetX>
 8005f50:	4603      	mov	r3, r0
			&& touch_GetX() < 75 + 25
			&& touch_GetY() > 100
			&& touch_GetY() < 100 + 25);
 8005f52:	2b4b      	cmp	r3, #75	@ 0x4b
 8005f54:	d910      	bls.n	8005f78 <is_touch_time_4+0x3e>
			&& touch_GetX() < 75 + 25
 8005f56:	f7ff ff0b 	bl	8005d70 <touch_GetX>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b63      	cmp	r3, #99	@ 0x63
 8005f5e:	d80b      	bhi.n	8005f78 <is_touch_time_4+0x3e>
			&& touch_GetY() > 100
 8005f60:	f7ff ff12 	bl	8005d88 <touch_GetY>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b64      	cmp	r3, #100	@ 0x64
 8005f68:	d906      	bls.n	8005f78 <is_touch_time_4+0x3e>
			&& touch_GetY() < 100 + 25);
 8005f6a:	f7ff ff0d 	bl	8005d88 <touch_GetY>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b7c      	cmp	r3, #124	@ 0x7c
 8005f72:	d801      	bhi.n	8005f78 <is_touch_time_4+0x3e>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <is_touch_time_4+0x40>
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <is_touch_time_5>:

int is_touch_time_5(){
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8005f82:	f7ff fee3 	bl	8005d4c <touch_IsTouched>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <is_touch_time_5+0x12>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e016      	b.n	8005fbe <is_touch_time_5+0x40>
	return (touch_GetX() > 110
 8005f90:	f7ff feee 	bl	8005d70 <touch_GetX>
 8005f94:	4603      	mov	r3, r0
			&& touch_GetX() < 110 + 25
			&& touch_GetY() > 100
			&& touch_GetY() < 100 + 25);
 8005f96:	2b6e      	cmp	r3, #110	@ 0x6e
 8005f98:	d910      	bls.n	8005fbc <is_touch_time_5+0x3e>
			&& touch_GetX() < 110 + 25
 8005f9a:	f7ff fee9 	bl	8005d70 <touch_GetX>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b86      	cmp	r3, #134	@ 0x86
 8005fa2:	d80b      	bhi.n	8005fbc <is_touch_time_5+0x3e>
			&& touch_GetY() > 100
 8005fa4:	f7ff fef0 	bl	8005d88 <touch_GetY>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b64      	cmp	r3, #100	@ 0x64
 8005fac:	d906      	bls.n	8005fbc <is_touch_time_5+0x3e>
			&& touch_GetY() < 100 + 25);
 8005fae:	f7ff feeb 	bl	8005d88 <touch_GetY>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b7c      	cmp	r3, #124	@ 0x7c
 8005fb6:	d801      	bhi.n	8005fbc <is_touch_time_5+0x3e>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <is_touch_time_5+0x40>
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <is_touch_time_6>:

int is_touch_time_6(){
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8005fc6:	f7ff fec1 	bl	8005d4c <touch_IsTouched>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <is_touch_time_6+0x12>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e016      	b.n	8006002 <is_touch_time_6+0x40>
	return (touch_GetX() > 150
 8005fd4:	f7ff fecc 	bl	8005d70 <touch_GetX>
 8005fd8:	4603      	mov	r3, r0
			&& touch_GetX() < 150 + 25
			&& touch_GetY() > 100
			&& touch_GetY() < 100 + 25);
 8005fda:	2b96      	cmp	r3, #150	@ 0x96
 8005fdc:	d910      	bls.n	8006000 <is_touch_time_6+0x3e>
			&& touch_GetX() < 150 + 25
 8005fde:	f7ff fec7 	bl	8005d70 <touch_GetX>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2bae      	cmp	r3, #174	@ 0xae
 8005fe6:	d80b      	bhi.n	8006000 <is_touch_time_6+0x3e>
			&& touch_GetY() > 100
 8005fe8:	f7ff fece 	bl	8005d88 <touch_GetY>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b64      	cmp	r3, #100	@ 0x64
 8005ff0:	d906      	bls.n	8006000 <is_touch_time_6+0x3e>
			&& touch_GetY() < 100 + 25);
 8005ff2:	f7ff fec9 	bl	8005d88 <touch_GetY>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b7c      	cmp	r3, #124	@ 0x7c
 8005ffa:	d801      	bhi.n	8006000 <is_touch_time_6+0x3e>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <is_touch_time_6+0x40>
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <touch_change_pos_time>:
void touch_change_pos_time(){
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
	if (is_touch_time_1() == 1){
 800600c:	f7ff ff2f 	bl	8005e6e <is_touch_time_1>
 8006010:	4603      	mov	r3, r0
 8006012:	2b01      	cmp	r3, #1
 8006014:	d109      	bne.n	800602a <touch_change_pos_time+0x22>
		pos = 1;
 8006016:	4b2b      	ldr	r3, [pc, #172]	@ (80060c4 <touch_change_pos_time+0xbc>)
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]
		check_time();
 800601c:	f7fb fcbe 	bl	800199c <check_time>
		bool_key_touch++;
 8006020:	4b29      	ldr	r3, [pc, #164]	@ (80060c8 <touch_change_pos_time+0xc0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3301      	adds	r3, #1
 8006026:	4a28      	ldr	r2, [pc, #160]	@ (80060c8 <touch_change_pos_time+0xc0>)
 8006028:	6013      	str	r3, [r2, #0]
	}
	if (is_touch_time_2() == 1){
 800602a:	f7ff ff42 	bl	8005eb2 <is_touch_time_2>
 800602e:	4603      	mov	r3, r0
 8006030:	2b01      	cmp	r3, #1
 8006032:	d109      	bne.n	8006048 <touch_change_pos_time+0x40>
		pos = 2;
 8006034:	4b23      	ldr	r3, [pc, #140]	@ (80060c4 <touch_change_pos_time+0xbc>)
 8006036:	2202      	movs	r2, #2
 8006038:	601a      	str	r2, [r3, #0]
		check_time();
 800603a:	f7fb fcaf 	bl	800199c <check_time>
		bool_key_touch++;
 800603e:	4b22      	ldr	r3, [pc, #136]	@ (80060c8 <touch_change_pos_time+0xc0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3301      	adds	r3, #1
 8006044:	4a20      	ldr	r2, [pc, #128]	@ (80060c8 <touch_change_pos_time+0xc0>)
 8006046:	6013      	str	r3, [r2, #0]
	}
	if (is_touch_time_3() == 1){
 8006048:	f7ff ff55 	bl	8005ef6 <is_touch_time_3>
 800604c:	4603      	mov	r3, r0
 800604e:	2b01      	cmp	r3, #1
 8006050:	d109      	bne.n	8006066 <touch_change_pos_time+0x5e>
		pos = 3;
 8006052:	4b1c      	ldr	r3, [pc, #112]	@ (80060c4 <touch_change_pos_time+0xbc>)
 8006054:	2203      	movs	r2, #3
 8006056:	601a      	str	r2, [r3, #0]
		check_time();
 8006058:	f7fb fca0 	bl	800199c <check_time>
		bool_key_touch++;
 800605c:	4b1a      	ldr	r3, [pc, #104]	@ (80060c8 <touch_change_pos_time+0xc0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <touch_change_pos_time+0xc0>)
 8006064:	6013      	str	r3, [r2, #0]
	}
	if (is_touch_time_4() == 1){
 8006066:	f7ff ff68 	bl	8005f3a <is_touch_time_4>
 800606a:	4603      	mov	r3, r0
 800606c:	2b01      	cmp	r3, #1
 800606e:	d109      	bne.n	8006084 <touch_change_pos_time+0x7c>
		pos = 4;
 8006070:	4b14      	ldr	r3, [pc, #80]	@ (80060c4 <touch_change_pos_time+0xbc>)
 8006072:	2204      	movs	r2, #4
 8006074:	601a      	str	r2, [r3, #0]
		check_time();
 8006076:	f7fb fc91 	bl	800199c <check_time>
		bool_key_touch++;
 800607a:	4b13      	ldr	r3, [pc, #76]	@ (80060c8 <touch_change_pos_time+0xc0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	4a11      	ldr	r2, [pc, #68]	@ (80060c8 <touch_change_pos_time+0xc0>)
 8006082:	6013      	str	r3, [r2, #0]
	}
	if (is_touch_time_5() == 1){
 8006084:	f7ff ff7b 	bl	8005f7e <is_touch_time_5>
 8006088:	4603      	mov	r3, r0
 800608a:	2b01      	cmp	r3, #1
 800608c:	d109      	bne.n	80060a2 <touch_change_pos_time+0x9a>
		pos = 5;
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <touch_change_pos_time+0xbc>)
 8006090:	2205      	movs	r2, #5
 8006092:	601a      	str	r2, [r3, #0]
		check_time();
 8006094:	f7fb fc82 	bl	800199c <check_time>
		bool_key_touch++;
 8006098:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <touch_change_pos_time+0xc0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	4a0a      	ldr	r2, [pc, #40]	@ (80060c8 <touch_change_pos_time+0xc0>)
 80060a0:	6013      	str	r3, [r2, #0]
	}
	if (is_touch_time_6() == 1){
 80060a2:	f7ff ff8e 	bl	8005fc2 <is_touch_time_6>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d109      	bne.n	80060c0 <touch_change_pos_time+0xb8>
		pos = 6;
 80060ac:	4b05      	ldr	r3, [pc, #20]	@ (80060c4 <touch_change_pos_time+0xbc>)
 80060ae:	2206      	movs	r2, #6
 80060b0:	601a      	str	r2, [r3, #0]
		check_time();
 80060b2:	f7fb fc73 	bl	800199c <check_time>
		bool_key_touch++;
 80060b6:	4b04      	ldr	r3, [pc, #16]	@ (80060c8 <touch_change_pos_time+0xc0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	4a02      	ldr	r2, [pc, #8]	@ (80060c8 <touch_change_pos_time+0xc0>)
 80060be:	6013      	str	r3, [r2, #0]
	}
}
 80060c0:	bf00      	nop
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	200001c4 	.word	0x200001c4
 80060c8:	2000040c 	.word	0x2000040c

080060cc <is_touch_off_alarm>:

int is_touch_off_alarm(){
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80060d0:	f7ff fe3c 	bl	8005d4c <touch_IsTouched>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <is_touch_off_alarm+0x12>
 80060da:	2300      	movs	r3, #0
 80060dc:	e016      	b.n	800610c <is_touch_off_alarm+0x40>
	return (touch_GetX() > 10
 80060de:	f7ff fe47 	bl	8005d70 <touch_GetX>
 80060e2:	4603      	mov	r3, r0
			&& touch_GetX() < 60
			&& touch_GetY() > 10
			&& touch_GetY() < 60);
 80060e4:	2b0a      	cmp	r3, #10
 80060e6:	d910      	bls.n	800610a <is_touch_off_alarm+0x3e>
			&& touch_GetX() < 60
 80060e8:	f7ff fe42 	bl	8005d70 <touch_GetX>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80060f0:	d80b      	bhi.n	800610a <is_touch_off_alarm+0x3e>
			&& touch_GetY() > 10
 80060f2:	f7ff fe49 	bl	8005d88 <touch_GetY>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b0a      	cmp	r3, #10
 80060fa:	d906      	bls.n	800610a <is_touch_off_alarm+0x3e>
			&& touch_GetY() < 60);
 80060fc:	f7ff fe44 	bl	8005d88 <touch_GetY>
 8006100:	4603      	mov	r3, r0
 8006102:	2b3b      	cmp	r3, #59	@ 0x3b
 8006104:	d801      	bhi.n	800610a <is_touch_off_alarm+0x3e>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <is_touch_off_alarm+0x40>
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	bd80      	pop	{r7, pc}

08006110 <is_touch_key_1>:

int is_touch_key_1(){
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8006114:	f7ff fe1a 	bl	8005d4c <touch_IsTouched>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <is_touch_key_1+0x12>
 800611e:	2300      	movs	r3, #0
 8006120:	e016      	b.n	8006150 <is_touch_key_1+0x40>
	return (touch_GetX() > 0
 8006122:	f7ff fe25 	bl	8005d70 <touch_GetX>
 8006126:	4603      	mov	r3, r0
			&& touch_GetX() < 60
			&& touch_GetY() > 170
			&& touch_GetY() < 220);
 8006128:	2b00      	cmp	r3, #0
 800612a:	d010      	beq.n	800614e <is_touch_key_1+0x3e>
			&& touch_GetX() < 60
 800612c:	f7ff fe20 	bl	8005d70 <touch_GetX>
 8006130:	4603      	mov	r3, r0
 8006132:	2b3b      	cmp	r3, #59	@ 0x3b
 8006134:	d80b      	bhi.n	800614e <is_touch_key_1+0x3e>
			&& touch_GetY() > 170
 8006136:	f7ff fe27 	bl	8005d88 <touch_GetY>
 800613a:	4603      	mov	r3, r0
 800613c:	2baa      	cmp	r3, #170	@ 0xaa
 800613e:	d906      	bls.n	800614e <is_touch_key_1+0x3e>
			&& touch_GetY() < 220);
 8006140:	f7ff fe22 	bl	8005d88 <touch_GetY>
 8006144:	4603      	mov	r3, r0
 8006146:	2bdb      	cmp	r3, #219	@ 0xdb
 8006148:	d801      	bhi.n	800614e <is_touch_key_1+0x3e>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <is_touch_key_1+0x40>
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	bd80      	pop	{r7, pc}

08006154 <is_touch_key_2>:

int is_touch_key_2(){
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8006158:	f7ff fdf8 	bl	8005d4c <touch_IsTouched>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <is_touch_key_2+0x12>
 8006162:	2300      	movs	r3, #0
 8006164:	e016      	b.n	8006194 <is_touch_key_2+0x40>
	return (touch_GetX() > 60
 8006166:	f7ff fe03 	bl	8005d70 <touch_GetX>
 800616a:	4603      	mov	r3, r0
			&& touch_GetX() < 120
			&& touch_GetY() > 170
			&& touch_GetY() < 220);
 800616c:	2b3c      	cmp	r3, #60	@ 0x3c
 800616e:	d910      	bls.n	8006192 <is_touch_key_2+0x3e>
			&& touch_GetX() < 120
 8006170:	f7ff fdfe 	bl	8005d70 <touch_GetX>
 8006174:	4603      	mov	r3, r0
 8006176:	2b77      	cmp	r3, #119	@ 0x77
 8006178:	d80b      	bhi.n	8006192 <is_touch_key_2+0x3e>
			&& touch_GetY() > 170
 800617a:	f7ff fe05 	bl	8005d88 <touch_GetY>
 800617e:	4603      	mov	r3, r0
 8006180:	2baa      	cmp	r3, #170	@ 0xaa
 8006182:	d906      	bls.n	8006192 <is_touch_key_2+0x3e>
			&& touch_GetY() < 220);
 8006184:	f7ff fe00 	bl	8005d88 <touch_GetY>
 8006188:	4603      	mov	r3, r0
 800618a:	2bdb      	cmp	r3, #219	@ 0xdb
 800618c:	d801      	bhi.n	8006192 <is_touch_key_2+0x3e>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <is_touch_key_2+0x40>
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	bd80      	pop	{r7, pc}

08006198 <is_touch_key_3>:

int is_touch_key_3(){
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800619c:	f7ff fdd6 	bl	8005d4c <touch_IsTouched>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <is_touch_key_3+0x12>
 80061a6:	2300      	movs	r3, #0
 80061a8:	e016      	b.n	80061d8 <is_touch_key_3+0x40>
	return (touch_GetX() > 120
 80061aa:	f7ff fde1 	bl	8005d70 <touch_GetX>
 80061ae:	4603      	mov	r3, r0
			&& touch_GetX() < 180
			&& touch_GetY() > 170
			&& touch_GetY() < 220);
 80061b0:	2b78      	cmp	r3, #120	@ 0x78
 80061b2:	d910      	bls.n	80061d6 <is_touch_key_3+0x3e>
			&& touch_GetX() < 180
 80061b4:	f7ff fddc 	bl	8005d70 <touch_GetX>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2bb3      	cmp	r3, #179	@ 0xb3
 80061bc:	d80b      	bhi.n	80061d6 <is_touch_key_3+0x3e>
			&& touch_GetY() > 170
 80061be:	f7ff fde3 	bl	8005d88 <touch_GetY>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2baa      	cmp	r3, #170	@ 0xaa
 80061c6:	d906      	bls.n	80061d6 <is_touch_key_3+0x3e>
			&& touch_GetY() < 220);
 80061c8:	f7ff fdde 	bl	8005d88 <touch_GetY>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2bdb      	cmp	r3, #219	@ 0xdb
 80061d0:	d801      	bhi.n	80061d6 <is_touch_key_3+0x3e>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <is_touch_key_3+0x40>
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}

080061dc <is_touch_key_X>:

int is_touch_key_X(){
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80061e0:	f7ff fdb4 	bl	8005d4c <touch_IsTouched>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <is_touch_key_X+0x12>
 80061ea:	2300      	movs	r3, #0
 80061ec:	e016      	b.n	800621c <is_touch_key_X+0x40>
	return (touch_GetX() > 180
 80061ee:	f7ff fdbf 	bl	8005d70 <touch_GetX>
 80061f2:	4603      	mov	r3, r0
			&& touch_GetX() < 240
			&& touch_GetY() > 170
			&& touch_GetY() < 220);
 80061f4:	2bb4      	cmp	r3, #180	@ 0xb4
 80061f6:	d910      	bls.n	800621a <is_touch_key_X+0x3e>
			&& touch_GetX() < 240
 80061f8:	f7ff fdba 	bl	8005d70 <touch_GetX>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2bef      	cmp	r3, #239	@ 0xef
 8006200:	d80b      	bhi.n	800621a <is_touch_key_X+0x3e>
			&& touch_GetY() > 170
 8006202:	f7ff fdc1 	bl	8005d88 <touch_GetY>
 8006206:	4603      	mov	r3, r0
 8006208:	2baa      	cmp	r3, #170	@ 0xaa
 800620a:	d906      	bls.n	800621a <is_touch_key_X+0x3e>
			&& touch_GetY() < 220);
 800620c:	f7ff fdbc 	bl	8005d88 <touch_GetY>
 8006210:	4603      	mov	r3, r0
 8006212:	2bdb      	cmp	r3, #219	@ 0xdb
 8006214:	d801      	bhi.n	800621a <is_touch_key_X+0x3e>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <is_touch_key_X+0x40>
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	bd80      	pop	{r7, pc}

08006220 <is_touch_key_4>:

int is_touch_key_4(){
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8006224:	f7ff fd92 	bl	8005d4c <touch_IsTouched>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <is_touch_key_4+0x12>
 800622e:	2300      	movs	r3, #0
 8006230:	e017      	b.n	8006262 <is_touch_key_4+0x42>
	return (touch_GetX() > 0
 8006232:	f7ff fd9d 	bl	8005d70 <touch_GetX>
 8006236:	4603      	mov	r3, r0
			&& touch_GetX() < 60
			&& touch_GetY() > 220
			&& touch_GetY() < 270);
 8006238:	2b00      	cmp	r3, #0
 800623a:	d011      	beq.n	8006260 <is_touch_key_4+0x40>
			&& touch_GetX() < 60
 800623c:	f7ff fd98 	bl	8005d70 <touch_GetX>
 8006240:	4603      	mov	r3, r0
 8006242:	2b3b      	cmp	r3, #59	@ 0x3b
 8006244:	d80c      	bhi.n	8006260 <is_touch_key_4+0x40>
			&& touch_GetY() > 220
 8006246:	f7ff fd9f 	bl	8005d88 <touch_GetY>
 800624a:	4603      	mov	r3, r0
 800624c:	2bdc      	cmp	r3, #220	@ 0xdc
 800624e:	d907      	bls.n	8006260 <is_touch_key_4+0x40>
			&& touch_GetY() < 270);
 8006250:	f7ff fd9a 	bl	8005d88 <touch_GetY>
 8006254:	4603      	mov	r3, r0
 8006256:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800625a:	d201      	bcs.n	8006260 <is_touch_key_4+0x40>
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <is_touch_key_4+0x42>
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	bd80      	pop	{r7, pc}

08006266 <is_touch_key_5>:

int is_touch_key_5(){
 8006266:	b580      	push	{r7, lr}
 8006268:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800626a:	f7ff fd6f 	bl	8005d4c <touch_IsTouched>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <is_touch_key_5+0x12>
 8006274:	2300      	movs	r3, #0
 8006276:	e017      	b.n	80062a8 <is_touch_key_5+0x42>
	return (touch_GetX() > 60
 8006278:	f7ff fd7a 	bl	8005d70 <touch_GetX>
 800627c:	4603      	mov	r3, r0
			&& touch_GetX() < 120
			&& touch_GetY() > 220
			&& touch_GetY() < 270);
 800627e:	2b3c      	cmp	r3, #60	@ 0x3c
 8006280:	d911      	bls.n	80062a6 <is_touch_key_5+0x40>
			&& touch_GetX() < 120
 8006282:	f7ff fd75 	bl	8005d70 <touch_GetX>
 8006286:	4603      	mov	r3, r0
 8006288:	2b77      	cmp	r3, #119	@ 0x77
 800628a:	d80c      	bhi.n	80062a6 <is_touch_key_5+0x40>
			&& touch_GetY() > 220
 800628c:	f7ff fd7c 	bl	8005d88 <touch_GetY>
 8006290:	4603      	mov	r3, r0
 8006292:	2bdc      	cmp	r3, #220	@ 0xdc
 8006294:	d907      	bls.n	80062a6 <is_touch_key_5+0x40>
			&& touch_GetY() < 270);
 8006296:	f7ff fd77 	bl	8005d88 <touch_GetY>
 800629a:	4603      	mov	r3, r0
 800629c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80062a0:	d201      	bcs.n	80062a6 <is_touch_key_5+0x40>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <is_touch_key_5+0x42>
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	bd80      	pop	{r7, pc}

080062ac <is_touch_key_6>:

int is_touch_key_6(){
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80062b0:	f7ff fd4c 	bl	8005d4c <touch_IsTouched>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <is_touch_key_6+0x12>
 80062ba:	2300      	movs	r3, #0
 80062bc:	e017      	b.n	80062ee <is_touch_key_6+0x42>
	return (touch_GetX() > 120
 80062be:	f7ff fd57 	bl	8005d70 <touch_GetX>
 80062c2:	4603      	mov	r3, r0
			&& touch_GetX() < 180
			&& touch_GetY() > 220
			&& touch_GetY() < 270);
 80062c4:	2b78      	cmp	r3, #120	@ 0x78
 80062c6:	d911      	bls.n	80062ec <is_touch_key_6+0x40>
			&& touch_GetX() < 180
 80062c8:	f7ff fd52 	bl	8005d70 <touch_GetX>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2bb3      	cmp	r3, #179	@ 0xb3
 80062d0:	d80c      	bhi.n	80062ec <is_touch_key_6+0x40>
			&& touch_GetY() > 220
 80062d2:	f7ff fd59 	bl	8005d88 <touch_GetY>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2bdc      	cmp	r3, #220	@ 0xdc
 80062da:	d907      	bls.n	80062ec <is_touch_key_6+0x40>
			&& touch_GetY() < 270);
 80062dc:	f7ff fd54 	bl	8005d88 <touch_GetY>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80062e6:	d201      	bcs.n	80062ec <is_touch_key_6+0x40>
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <is_touch_key_6+0x42>
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <is_touch_key_0>:

int is_touch_key_0(){
 80062f2:	b580      	push	{r7, lr}
 80062f4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80062f6:	f7ff fd29 	bl	8005d4c <touch_IsTouched>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <is_touch_key_0+0x12>
 8006300:	2300      	movs	r3, #0
 8006302:	e017      	b.n	8006334 <is_touch_key_0+0x42>
	return (touch_GetX() > 180
 8006304:	f7ff fd34 	bl	8005d70 <touch_GetX>
 8006308:	4603      	mov	r3, r0
			&& touch_GetX() < 240
			&& touch_GetY() > 220
			&& touch_GetY() < 270);
 800630a:	2bb4      	cmp	r3, #180	@ 0xb4
 800630c:	d911      	bls.n	8006332 <is_touch_key_0+0x40>
			&& touch_GetX() < 240
 800630e:	f7ff fd2f 	bl	8005d70 <touch_GetX>
 8006312:	4603      	mov	r3, r0
 8006314:	2bef      	cmp	r3, #239	@ 0xef
 8006316:	d80c      	bhi.n	8006332 <is_touch_key_0+0x40>
			&& touch_GetY() > 220
 8006318:	f7ff fd36 	bl	8005d88 <touch_GetY>
 800631c:	4603      	mov	r3, r0
 800631e:	2bdc      	cmp	r3, #220	@ 0xdc
 8006320:	d907      	bls.n	8006332 <is_touch_key_0+0x40>
			&& touch_GetY() < 270);
 8006322:	f7ff fd31 	bl	8005d88 <touch_GetY>
 8006326:	4603      	mov	r3, r0
 8006328:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800632c:	d201      	bcs.n	8006332 <is_touch_key_0+0x40>
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <is_touch_key_0+0x42>
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	bd80      	pop	{r7, pc}

08006338 <is_touch_key_7>:

int is_touch_key_7(){
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 800633c:	f7ff fd06 	bl	8005d4c <touch_IsTouched>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <is_touch_key_7+0x12>
 8006346:	2300      	movs	r3, #0
 8006348:	e018      	b.n	800637c <is_touch_key_7+0x44>
	return (touch_GetX() > 0
 800634a:	f7ff fd11 	bl	8005d70 <touch_GetX>
 800634e:	4603      	mov	r3, r0
			&& touch_GetX() < 60
			&& touch_GetY() > 270
			&& touch_GetY() < 320);
 8006350:	2b00      	cmp	r3, #0
 8006352:	d012      	beq.n	800637a <is_touch_key_7+0x42>
			&& touch_GetX() < 60
 8006354:	f7ff fd0c 	bl	8005d70 <touch_GetX>
 8006358:	4603      	mov	r3, r0
 800635a:	2b3b      	cmp	r3, #59	@ 0x3b
 800635c:	d80d      	bhi.n	800637a <is_touch_key_7+0x42>
			&& touch_GetY() > 270
 800635e:	f7ff fd13 	bl	8005d88 <touch_GetY>
 8006362:	4603      	mov	r3, r0
 8006364:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006368:	d907      	bls.n	800637a <is_touch_key_7+0x42>
			&& touch_GetY() < 320);
 800636a:	f7ff fd0d 	bl	8005d88 <touch_GetY>
 800636e:	4603      	mov	r3, r0
 8006370:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006374:	d201      	bcs.n	800637a <is_touch_key_7+0x42>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <is_touch_key_7+0x44>
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}

08006380 <is_touch_key_8>:

int is_touch_key_8(){
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8006384:	f7ff fce2 	bl	8005d4c <touch_IsTouched>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <is_touch_key_8+0x12>
 800638e:	2300      	movs	r3, #0
 8006390:	e018      	b.n	80063c4 <is_touch_key_8+0x44>
	return (touch_GetX() > 60
 8006392:	f7ff fced 	bl	8005d70 <touch_GetX>
 8006396:	4603      	mov	r3, r0
			&& touch_GetX() < 120
			&& touch_GetY() > 270
			&& touch_GetY() < 320);
 8006398:	2b3c      	cmp	r3, #60	@ 0x3c
 800639a:	d912      	bls.n	80063c2 <is_touch_key_8+0x42>
			&& touch_GetX() < 120
 800639c:	f7ff fce8 	bl	8005d70 <touch_GetX>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b77      	cmp	r3, #119	@ 0x77
 80063a4:	d80d      	bhi.n	80063c2 <is_touch_key_8+0x42>
			&& touch_GetY() > 270
 80063a6:	f7ff fcef 	bl	8005d88 <touch_GetY>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80063b0:	d907      	bls.n	80063c2 <is_touch_key_8+0x42>
			&& touch_GetY() < 320);
 80063b2:	f7ff fce9 	bl	8005d88 <touch_GetY>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063bc:	d201      	bcs.n	80063c2 <is_touch_key_8+0x42>
 80063be:	2301      	movs	r3, #1
 80063c0:	e000      	b.n	80063c4 <is_touch_key_8+0x44>
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <is_touch_key_9>:

int is_touch_key_9(){
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 80063cc:	f7ff fcbe 	bl	8005d4c <touch_IsTouched>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <is_touch_key_9+0x12>
 80063d6:	2300      	movs	r3, #0
 80063d8:	e018      	b.n	800640c <is_touch_key_9+0x44>
	return (touch_GetX() > 120
 80063da:	f7ff fcc9 	bl	8005d70 <touch_GetX>
 80063de:	4603      	mov	r3, r0
			&& touch_GetX() < 180
			&& touch_GetY() > 270
			&& touch_GetY() < 320);
 80063e0:	2b78      	cmp	r3, #120	@ 0x78
 80063e2:	d912      	bls.n	800640a <is_touch_key_9+0x42>
			&& touch_GetX() < 180
 80063e4:	f7ff fcc4 	bl	8005d70 <touch_GetX>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2bb3      	cmp	r3, #179	@ 0xb3
 80063ec:	d80d      	bhi.n	800640a <is_touch_key_9+0x42>
			&& touch_GetY() > 270
 80063ee:	f7ff fccb 	bl	8005d88 <touch_GetY>
 80063f2:	4603      	mov	r3, r0
 80063f4:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80063f8:	d907      	bls.n	800640a <is_touch_key_9+0x42>
			&& touch_GetY() < 320);
 80063fa:	f7ff fcc5 	bl	8005d88 <touch_GetY>
 80063fe:	4603      	mov	r3, r0
 8006400:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006404:	d201      	bcs.n	800640a <is_touch_key_9+0x42>
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <is_touch_key_9+0x44>
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	bd80      	pop	{r7, pc}

08006410 <is_touch_key_E>:

int is_touch_key_E(){
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8006414:	f7ff fc9a 	bl	8005d4c <touch_IsTouched>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <is_touch_key_E+0x12>
 800641e:	2300      	movs	r3, #0
 8006420:	e018      	b.n	8006454 <is_touch_key_E+0x44>
	return (touch_GetX() > 180
 8006422:	f7ff fca5 	bl	8005d70 <touch_GetX>
 8006426:	4603      	mov	r3, r0
			&& touch_GetX() < 240
			&& touch_GetY() > 270
			&& touch_GetY() < 320);
 8006428:	2bb4      	cmp	r3, #180	@ 0xb4
 800642a:	d912      	bls.n	8006452 <is_touch_key_E+0x42>
			&& touch_GetX() < 240
 800642c:	f7ff fca0 	bl	8005d70 <touch_GetX>
 8006430:	4603      	mov	r3, r0
 8006432:	2bef      	cmp	r3, #239	@ 0xef
 8006434:	d80d      	bhi.n	8006452 <is_touch_key_E+0x42>
			&& touch_GetY() > 270
 8006436:	f7ff fca7 	bl	8005d88 <touch_GetY>
 800643a:	4603      	mov	r3, r0
 800643c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8006440:	d907      	bls.n	8006452 <is_touch_key_E+0x42>
			&& touch_GetY() < 320);
 8006442:	f7ff fca1 	bl	8005d88 <touch_GetY>
 8006446:	4603      	mov	r3, r0
 8006448:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800644c:	d201      	bcs.n	8006452 <is_touch_key_E+0x42>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <is_touch_key_E+0x44>
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	bd80      	pop	{r7, pc}

08006458 <update_key>:

void update_key(int key){
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	switch (pos) {
 8006460:	4b68      	ldr	r3, [pc, #416]	@ (8006604 <update_key+0x1ac>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3b01      	subs	r3, #1
 8006466:	2b05      	cmp	r3, #5
 8006468:	f200 80c4 	bhi.w	80065f4 <update_key+0x19c>
 800646c:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <update_key+0x1c>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	0800648d 	.word	0x0800648d
 8006478:	080064c9 	.word	0x080064c9
 800647c:	08006505 	.word	0x08006505
 8006480:	08006541 	.word	0x08006541
 8006484:	0800657d 	.word	0x0800657d
 8006488:	080065b9 	.word	0x080065b9
		case 1:
			tempHour = tempHour * 10;
 800648c:	4b5e      	ldr	r3, [pc, #376]	@ (8006608 <update_key+0x1b0>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	461a      	mov	r2, r3
 800649a:	4b5b      	ldr	r3, [pc, #364]	@ (8006608 <update_key+0x1b0>)
 800649c:	601a      	str	r2, [r3, #0]
			tempHour += key;
 800649e:	4b5a      	ldr	r3, [pc, #360]	@ (8006608 <update_key+0x1b0>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4413      	add	r3, r2
 80064a6:	4a58      	ldr	r2, [pc, #352]	@ (8006608 <update_key+0x1b0>)
 80064a8:	6013      	str	r3, [r2, #0]
			tempHour = tempHour % 100;
 80064aa:	4b57      	ldr	r3, [pc, #348]	@ (8006608 <update_key+0x1b0>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4b57      	ldr	r3, [pc, #348]	@ (800660c <update_key+0x1b4>)
 80064b0:	fb83 1302 	smull	r1, r3, r3, r2
 80064b4:	1159      	asrs	r1, r3, #5
 80064b6:	17d3      	asrs	r3, r2, #31
 80064b8:	1acb      	subs	r3, r1, r3
 80064ba:	2164      	movs	r1, #100	@ 0x64
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	4a51      	ldr	r2, [pc, #324]	@ (8006608 <update_key+0x1b0>)
 80064c4:	6013      	str	r3, [r2, #0]
			break;
 80064c6:	e096      	b.n	80065f6 <update_key+0x19e>
		case 2:
			tempMin = tempMin * 10;
 80064c8:	4b51      	ldr	r3, [pc, #324]	@ (8006610 <update_key+0x1b8>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	461a      	mov	r2, r3
 80064d6:	4b4e      	ldr	r3, [pc, #312]	@ (8006610 <update_key+0x1b8>)
 80064d8:	601a      	str	r2, [r3, #0]
			tempMin += key;
 80064da:	4b4d      	ldr	r3, [pc, #308]	@ (8006610 <update_key+0x1b8>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	4a4b      	ldr	r2, [pc, #300]	@ (8006610 <update_key+0x1b8>)
 80064e4:	6013      	str	r3, [r2, #0]
			tempMin = tempMin % 100;
 80064e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006610 <update_key+0x1b8>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4b48      	ldr	r3, [pc, #288]	@ (800660c <update_key+0x1b4>)
 80064ec:	fb83 1302 	smull	r1, r3, r3, r2
 80064f0:	1159      	asrs	r1, r3, #5
 80064f2:	17d3      	asrs	r3, r2, #31
 80064f4:	1acb      	subs	r3, r1, r3
 80064f6:	2164      	movs	r1, #100	@ 0x64
 80064f8:	fb01 f303 	mul.w	r3, r1, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	4a44      	ldr	r2, [pc, #272]	@ (8006610 <update_key+0x1b8>)
 8006500:	6013      	str	r3, [r2, #0]
			break;
 8006502:	e078      	b.n	80065f6 <update_key+0x19e>
		case 3:
			tempSec = tempSec * 10;
 8006504:	4b43      	ldr	r3, [pc, #268]	@ (8006614 <update_key+0x1bc>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	461a      	mov	r2, r3
 8006512:	4b40      	ldr	r3, [pc, #256]	@ (8006614 <update_key+0x1bc>)
 8006514:	601a      	str	r2, [r3, #0]
			tempSec += key;
 8006516:	4b3f      	ldr	r3, [pc, #252]	@ (8006614 <update_key+0x1bc>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	4a3d      	ldr	r2, [pc, #244]	@ (8006614 <update_key+0x1bc>)
 8006520:	6013      	str	r3, [r2, #0]
			tempSec = tempSec % 100;
 8006522:	4b3c      	ldr	r3, [pc, #240]	@ (8006614 <update_key+0x1bc>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b39      	ldr	r3, [pc, #228]	@ (800660c <update_key+0x1b4>)
 8006528:	fb83 1302 	smull	r1, r3, r3, r2
 800652c:	1159      	asrs	r1, r3, #5
 800652e:	17d3      	asrs	r3, r2, #31
 8006530:	1acb      	subs	r3, r1, r3
 8006532:	2164      	movs	r1, #100	@ 0x64
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	4a36      	ldr	r2, [pc, #216]	@ (8006614 <update_key+0x1bc>)
 800653c:	6013      	str	r3, [r2, #0]
			break;
 800653e:	e05a      	b.n	80065f6 <update_key+0x19e>
		case 4:
			tempDate = tempDate * 10;
 8006540:	4b35      	ldr	r3, [pc, #212]	@ (8006618 <update_key+0x1c0>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	461a      	mov	r2, r3
 800654e:	4b32      	ldr	r3, [pc, #200]	@ (8006618 <update_key+0x1c0>)
 8006550:	601a      	str	r2, [r3, #0]
			tempDate += key;
 8006552:	4b31      	ldr	r3, [pc, #196]	@ (8006618 <update_key+0x1c0>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4413      	add	r3, r2
 800655a:	4a2f      	ldr	r2, [pc, #188]	@ (8006618 <update_key+0x1c0>)
 800655c:	6013      	str	r3, [r2, #0]
			tempDate = tempDate % 100;
 800655e:	4b2e      	ldr	r3, [pc, #184]	@ (8006618 <update_key+0x1c0>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b2a      	ldr	r3, [pc, #168]	@ (800660c <update_key+0x1b4>)
 8006564:	fb83 1302 	smull	r1, r3, r3, r2
 8006568:	1159      	asrs	r1, r3, #5
 800656a:	17d3      	asrs	r3, r2, #31
 800656c:	1acb      	subs	r3, r1, r3
 800656e:	2164      	movs	r1, #100	@ 0x64
 8006570:	fb01 f303 	mul.w	r3, r1, r3
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	4a28      	ldr	r2, [pc, #160]	@ (8006618 <update_key+0x1c0>)
 8006578:	6013      	str	r3, [r2, #0]
			break;
 800657a:	e03c      	b.n	80065f6 <update_key+0x19e>
		case 5:
			tempMonth = tempMonth * 10;
 800657c:	4b27      	ldr	r3, [pc, #156]	@ (800661c <update_key+0x1c4>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	461a      	mov	r2, r3
 800658a:	4b24      	ldr	r3, [pc, #144]	@ (800661c <update_key+0x1c4>)
 800658c:	601a      	str	r2, [r3, #0]
			tempMonth += key;
 800658e:	4b23      	ldr	r3, [pc, #140]	@ (800661c <update_key+0x1c4>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	4a21      	ldr	r2, [pc, #132]	@ (800661c <update_key+0x1c4>)
 8006598:	6013      	str	r3, [r2, #0]
			tempMonth = tempMonth % 100;
 800659a:	4b20      	ldr	r3, [pc, #128]	@ (800661c <update_key+0x1c4>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b1b      	ldr	r3, [pc, #108]	@ (800660c <update_key+0x1b4>)
 80065a0:	fb83 1302 	smull	r1, r3, r3, r2
 80065a4:	1159      	asrs	r1, r3, #5
 80065a6:	17d3      	asrs	r3, r2, #31
 80065a8:	1acb      	subs	r3, r1, r3
 80065aa:	2164      	movs	r1, #100	@ 0x64
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	4a1a      	ldr	r2, [pc, #104]	@ (800661c <update_key+0x1c4>)
 80065b4:	6013      	str	r3, [r2, #0]
			break;
 80065b6:	e01e      	b.n	80065f6 <update_key+0x19e>
		case 6:
			tempYear = tempYear * 10;
 80065b8:	4b19      	ldr	r3, [pc, #100]	@ (8006620 <update_key+0x1c8>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	461a      	mov	r2, r3
 80065c6:	4b16      	ldr	r3, [pc, #88]	@ (8006620 <update_key+0x1c8>)
 80065c8:	601a      	str	r2, [r3, #0]
			tempYear += key;
 80065ca:	4b15      	ldr	r3, [pc, #84]	@ (8006620 <update_key+0x1c8>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4413      	add	r3, r2
 80065d2:	4a13      	ldr	r2, [pc, #76]	@ (8006620 <update_key+0x1c8>)
 80065d4:	6013      	str	r3, [r2, #0]
			tempYear = tempYear % 100;
 80065d6:	4b12      	ldr	r3, [pc, #72]	@ (8006620 <update_key+0x1c8>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b0c      	ldr	r3, [pc, #48]	@ (800660c <update_key+0x1b4>)
 80065dc:	fb83 1302 	smull	r1, r3, r3, r2
 80065e0:	1159      	asrs	r1, r3, #5
 80065e2:	17d3      	asrs	r3, r2, #31
 80065e4:	1acb      	subs	r3, r1, r3
 80065e6:	2164      	movs	r1, #100	@ 0x64
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006620 <update_key+0x1c8>)
 80065f0:	6013      	str	r3, [r2, #0]
			break;
 80065f2:	e000      	b.n	80065f6 <update_key+0x19e>
		default:
			break;
 80065f4:	bf00      	nop
	}
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	200001c4 	.word	0x200001c4
 8006608:	200001e8 	.word	0x200001e8
 800660c:	51eb851f 	.word	0x51eb851f
 8006610:	200001ec 	.word	0x200001ec
 8006614:	200001f0 	.word	0x200001f0
 8006618:	200001f4 	.word	0x200001f4
 800661c:	200001f8 	.word	0x200001f8
 8006620:	200001fc 	.word	0x200001fc

08006624 <touch_key>:

void touch_key(){
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
	if (is_touch_key_0() == 1){
 8006628:	f7ff fe63 	bl	80062f2 <is_touch_key_0>
 800662c:	4603      	mov	r3, r0
 800662e:	2b01      	cmp	r3, #1
 8006630:	d108      	bne.n	8006644 <touch_key+0x20>
		update_key(0);
 8006632:	2000      	movs	r0, #0
 8006634:	f7ff ff10 	bl	8006458 <update_key>
		while (touch_IsTouched());
 8006638:	bf00      	nop
 800663a:	f7ff fb87 	bl	8005d4c <touch_IsTouched>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1fa      	bne.n	800663a <touch_key+0x16>
	}
	if (is_touch_key_1() == 1){
 8006644:	f7ff fd64 	bl	8006110 <is_touch_key_1>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d108      	bne.n	8006660 <touch_key+0x3c>
		update_key(1);
 800664e:	2001      	movs	r0, #1
 8006650:	f7ff ff02 	bl	8006458 <update_key>
		while (touch_IsTouched());
 8006654:	bf00      	nop
 8006656:	f7ff fb79 	bl	8005d4c <touch_IsTouched>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1fa      	bne.n	8006656 <touch_key+0x32>
	}
	if (is_touch_key_2() == 1){
 8006660:	f7ff fd78 	bl	8006154 <is_touch_key_2>
 8006664:	4603      	mov	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d108      	bne.n	800667c <touch_key+0x58>
		update_key(2);
 800666a:	2002      	movs	r0, #2
 800666c:	f7ff fef4 	bl	8006458 <update_key>
		while (touch_IsTouched());
 8006670:	bf00      	nop
 8006672:	f7ff fb6b 	bl	8005d4c <touch_IsTouched>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1fa      	bne.n	8006672 <touch_key+0x4e>
	}
	if (is_touch_key_3() == 1){
 800667c:	f7ff fd8c 	bl	8006198 <is_touch_key_3>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d108      	bne.n	8006698 <touch_key+0x74>
		update_key(3);
 8006686:	2003      	movs	r0, #3
 8006688:	f7ff fee6 	bl	8006458 <update_key>
		while (touch_IsTouched());
 800668c:	bf00      	nop
 800668e:	f7ff fb5d 	bl	8005d4c <touch_IsTouched>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1fa      	bne.n	800668e <touch_key+0x6a>
	}
	if (is_touch_key_4() == 1){
 8006698:	f7ff fdc2 	bl	8006220 <is_touch_key_4>
 800669c:	4603      	mov	r3, r0
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d108      	bne.n	80066b4 <touch_key+0x90>
		update_key(4);
 80066a2:	2004      	movs	r0, #4
 80066a4:	f7ff fed8 	bl	8006458 <update_key>
		while (touch_IsTouched());
 80066a8:	bf00      	nop
 80066aa:	f7ff fb4f 	bl	8005d4c <touch_IsTouched>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1fa      	bne.n	80066aa <touch_key+0x86>
	}
	if (is_touch_key_5() == 1){
 80066b4:	f7ff fdd7 	bl	8006266 <is_touch_key_5>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d108      	bne.n	80066d0 <touch_key+0xac>
		update_key(5);
 80066be:	2005      	movs	r0, #5
 80066c0:	f7ff feca 	bl	8006458 <update_key>
		while (touch_IsTouched());
 80066c4:	bf00      	nop
 80066c6:	f7ff fb41 	bl	8005d4c <touch_IsTouched>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1fa      	bne.n	80066c6 <touch_key+0xa2>
	}
	if (is_touch_key_6() == 1){
 80066d0:	f7ff fdec 	bl	80062ac <is_touch_key_6>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d108      	bne.n	80066ec <touch_key+0xc8>
		update_key(6);
 80066da:	2006      	movs	r0, #6
 80066dc:	f7ff febc 	bl	8006458 <update_key>
		while (touch_IsTouched());
 80066e0:	bf00      	nop
 80066e2:	f7ff fb33 	bl	8005d4c <touch_IsTouched>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1fa      	bne.n	80066e2 <touch_key+0xbe>
	}
	if (is_touch_key_7() == 1){
 80066ec:	f7ff fe24 	bl	8006338 <is_touch_key_7>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d108      	bne.n	8006708 <touch_key+0xe4>
		update_key(7);
 80066f6:	2007      	movs	r0, #7
 80066f8:	f7ff feae 	bl	8006458 <update_key>
		while (touch_IsTouched());
 80066fc:	bf00      	nop
 80066fe:	f7ff fb25 	bl	8005d4c <touch_IsTouched>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1fa      	bne.n	80066fe <touch_key+0xda>
	}
	if (is_touch_key_8() == 1){
 8006708:	f7ff fe3a 	bl	8006380 <is_touch_key_8>
 800670c:	4603      	mov	r3, r0
 800670e:	2b01      	cmp	r3, #1
 8006710:	d108      	bne.n	8006724 <touch_key+0x100>
		update_key(8);
 8006712:	2008      	movs	r0, #8
 8006714:	f7ff fea0 	bl	8006458 <update_key>
		while (touch_IsTouched());
 8006718:	bf00      	nop
 800671a:	f7ff fb17 	bl	8005d4c <touch_IsTouched>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1fa      	bne.n	800671a <touch_key+0xf6>
	}
	if (is_touch_key_9() == 1){
 8006724:	f7ff fe50 	bl	80063c8 <is_touch_key_9>
 8006728:	4603      	mov	r3, r0
 800672a:	2b01      	cmp	r3, #1
 800672c:	d108      	bne.n	8006740 <touch_key+0x11c>
		update_key(9);
 800672e:	2009      	movs	r0, #9
 8006730:	f7ff fe92 	bl	8006458 <update_key>
		while (touch_IsTouched());
 8006734:	bf00      	nop
 8006736:	f7ff fb09 	bl	8005d4c <touch_IsTouched>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1fa      	bne.n	8006736 <touch_key+0x112>
	}
	if (is_touch_key_X() == 1){
 8006740:	f7ff fd4c 	bl	80061dc <is_touch_key_X>
 8006744:	4603      	mov	r3, r0
 8006746:	2b01      	cmp	r3, #1
 8006748:	d10c      	bne.n	8006764 <touch_key+0x140>
		return_button_off_key();
 800674a:	f7fd f875 	bl	8003838 <return_button_off_key>
		bool_key_touch = 0;
 800674e:	4b15      	ldr	r3, [pc, #84]	@ (80067a4 <touch_key+0x180>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
		check_time();
 8006754:	f7fb f922 	bl	800199c <check_time>
		while (touch_IsTouched());
 8006758:	bf00      	nop
 800675a:	f7ff faf7 	bl	8005d4c <touch_IsTouched>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1fa      	bne.n	800675a <touch_key+0x136>
	}
	if (is_touch_key_E() == 1){
 8006764:	f7ff fe54 	bl	8006410 <is_touch_key_E>
 8006768:	4603      	mov	r3, r0
 800676a:	2b01      	cmp	r3, #1
 800676c:	d118      	bne.n	80067a0 <touch_key+0x17c>
		if (pos == 6){
 800676e:	4b0e      	ldr	r3, [pc, #56]	@ (80067a8 <touch_key+0x184>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b06      	cmp	r3, #6
 8006774:	d107      	bne.n	8006786 <touch_key+0x162>
			return_button_off_key();
 8006776:	f7fd f85f 	bl	8003838 <return_button_off_key>
			bool_key_touch = 0;
 800677a:	4b0a      	ldr	r3, [pc, #40]	@ (80067a4 <touch_key+0x180>)
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
			check_time();
 8006780:	f7fb f90c 	bl	800199c <check_time>
 8006784:	e006      	b.n	8006794 <touch_key+0x170>
		}
		else {
			pos++;
 8006786:	4b08      	ldr	r3, [pc, #32]	@ (80067a8 <touch_key+0x184>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	4a06      	ldr	r2, [pc, #24]	@ (80067a8 <touch_key+0x184>)
 800678e:	6013      	str	r3, [r2, #0]
			check_time();
 8006790:	f7fb f904 	bl	800199c <check_time>
		}
		while (touch_IsTouched());
 8006794:	bf00      	nop
 8006796:	f7ff fad9 	bl	8005d4c <touch_IsTouched>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1fa      	bne.n	8006796 <touch_key+0x172>
	}
}
 80067a0:	bf00      	nop
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	2000040c 	.word	0x2000040c
 80067a8:	200001c4 	.word	0x200001c4

080067ac <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80067b0:	2201      	movs	r2, #1
 80067b2:	4906      	ldr	r1, [pc, #24]	@ (80067cc <uart_init_esp+0x20>)
 80067b4:	4806      	ldr	r0, [pc, #24]	@ (80067d0 <uart_init_esp+0x24>)
 80067b6:	f005 f826 	bl	800b806 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 80067ba:	2201      	movs	r2, #1
 80067bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80067c0:	4804      	ldr	r0, [pc, #16]	@ (80067d4 <uart_init_esp+0x28>)
 80067c2:	f001 fc25 	bl	8008010 <HAL_GPIO_WritePin>
}
 80067c6:	bf00      	nop
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000479 	.word	0x20000479
 80067d0:	200004c0 	.word	0x200004c0
 80067d4:	40021400 	.word	0x40021400

080067d8 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 80067e4:	887a      	ldrh	r2, [r7, #2]
 80067e6:	230a      	movs	r3, #10
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	4803      	ldr	r0, [pc, #12]	@ (80067f8 <uart_EspSendBytes+0x20>)
 80067ec:	f004 ff79 	bl	800b6e2 <HAL_UART_Transmit>
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	200004c0 	.word	0x200004c0

080067fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b092      	sub	sp, #72	@ 0x48
 8006800:	af04      	add	r7, sp, #16
 8006802:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4aa7      	ldr	r2, [pc, #668]	@ (8006aa8 <HAL_UART_RxCpltCallback+0x2ac>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d10a      	bne.n	8006824 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800680e:	230a      	movs	r3, #10
 8006810:	2201      	movs	r2, #1
 8006812:	49a6      	ldr	r1, [pc, #664]	@ (8006aac <HAL_UART_RxCpltCallback+0x2b0>)
 8006814:	48a6      	ldr	r0, [pc, #664]	@ (8006ab0 <HAL_UART_RxCpltCallback+0x2b4>)
 8006816:	f004 ff64 	bl	800b6e2 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800681a:	2201      	movs	r2, #1
 800681c:	49a3      	ldr	r1, [pc, #652]	@ (8006aac <HAL_UART_RxCpltCallback+0x2b0>)
 800681e:	48a4      	ldr	r0, [pc, #656]	@ (8006ab0 <HAL_UART_RxCpltCallback+0x2b4>)
 8006820:	f004 fff1 	bl	800b806 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4aa2      	ldr	r2, [pc, #648]	@ (8006ab4 <HAL_UART_RxCpltCallback+0x2b8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	f040 8161 	bne.w	8006af2 <HAL_UART_RxCpltCallback+0x2f6>
		if (bool_start_time == 1){
 8006830:	4ba1      	ldr	r3, [pc, #644]	@ (8006ab8 <HAL_UART_RxCpltCallback+0x2bc>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d172      	bne.n	800691e <HAL_UART_RxCpltCallback+0x122>
			if (receive_buffer2 == 'E'){
 8006838:	4ba0      	ldr	r3, [pc, #640]	@ (8006abc <HAL_UART_RxCpltCallback+0x2c0>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b45      	cmp	r3, #69	@ 0x45
 800683e:	d161      	bne.n	8006904 <HAL_UART_RxCpltCallback+0x108>
				bool_start_time = 0;
 8006840:	4b9d      	ldr	r3, [pc, #628]	@ (8006ab8 <HAL_UART_RxCpltCallback+0x2bc>)
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
				//xu ly chuoi o day
//				lcd_ShowStr(30, 30, receive_msg, GREEN, GREEN, 24, 1);
//				lcd_ShowChar(10, 10, receive_msg[8], GREEN, GREEN, 24, 1);
		           int year = (receive_msg[2+2] - '0')*10 + (receive_msg[3+2] - '0');
 8006846:	4b9e      	ldr	r3, [pc, #632]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006848:	791b      	ldrb	r3, [r3, #4]
 800684a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	461a      	mov	r2, r3
 8006858:	4b99      	ldr	r3, [pc, #612]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 800685a:	795b      	ldrb	r3, [r3, #5]
 800685c:	3b30      	subs	r3, #48	@ 0x30
 800685e:	4413      	add	r3, r2
 8006860:	637b      	str	r3, [r7, #52]	@ 0x34
		           int month = (receive_msg[5+2] - '0')*10 + (receive_msg[6+2] - '0');
 8006862:	4b97      	ldr	r3, [pc, #604]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006864:	79db      	ldrb	r3, [r3, #7]
 8006866:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	461a      	mov	r2, r3
 8006874:	4b92      	ldr	r3, [pc, #584]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006876:	7a1b      	ldrb	r3, [r3, #8]
 8006878:	3b30      	subs	r3, #48	@ 0x30
 800687a:	4413      	add	r3, r2
 800687c:	633b      	str	r3, [r7, #48]	@ 0x30
		           int date = (receive_msg[8+2] - '0')*10 + (receive_msg[9+2] - '0');
 800687e:	4b90      	ldr	r3, [pc, #576]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006880:	7a9b      	ldrb	r3, [r3, #10]
 8006882:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	461a      	mov	r2, r3
 8006890:	4b8b      	ldr	r3, [pc, #556]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006892:	7adb      	ldrb	r3, [r3, #11]
 8006894:	3b30      	subs	r3, #48	@ 0x30
 8006896:	4413      	add	r3, r2
 8006898:	62fb      	str	r3, [r7, #44]	@ 0x2c
		           int hour = (receive_msg[11+2] - '0')*10 + (receive_msg[12+2] - '0');
 800689a:	4b89      	ldr	r3, [pc, #548]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 800689c:	7b5b      	ldrb	r3, [r3, #13]
 800689e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	461a      	mov	r2, r3
 80068ac:	4b84      	ldr	r3, [pc, #528]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80068ae:	7b9b      	ldrb	r3, [r3, #14]
 80068b0:	3b30      	subs	r3, #48	@ 0x30
 80068b2:	4413      	add	r3, r2
 80068b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		           int min = (receive_msg[14+2] - '0')*10 + (receive_msg[15+2] - '0');
 80068b6:	4b82      	ldr	r3, [pc, #520]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80068b8:	7c1b      	ldrb	r3, [r3, #16]
 80068ba:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	461a      	mov	r2, r3
 80068c8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80068ca:	7c5b      	ldrb	r3, [r3, #17]
 80068cc:	3b30      	subs	r3, #48	@ 0x30
 80068ce:	4413      	add	r3, r2
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
		           int sec = (receive_msg[17+2] - '0')*10 + (receive_msg[18+2] - '0');
 80068d2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80068d4:	7cdb      	ldrb	r3, [r3, #19]
 80068d6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80068da:	4613      	mov	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	461a      	mov	r2, r3
 80068e4:	4b76      	ldr	r3, [pc, #472]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80068e6:	7d1b      	ldrb	r3, [r3, #20]
 80068e8:	3b30      	subs	r3, #48	@ 0x30
 80068ea:	4413      	add	r3, r2
 80068ec:	623b      	str	r3, [r7, #32]
		           updateTime(hour, min, sec, date, month, year);
 80068ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f8:	6a3a      	ldr	r2, [r7, #32]
 80068fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068fe:	f7fa fe35 	bl	800156c <updateTime>
 8006902:	e00c      	b.n	800691e <HAL_UART_RxCpltCallback+0x122>
			}
			else {
				receive_msg[i] = receive_buffer2;
 8006904:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	4b6c      	ldr	r3, [pc, #432]	@ (8006abc <HAL_UART_RxCpltCallback+0x2c0>)
 800690c:	7819      	ldrb	r1, [r3, #0]
 800690e:	4b6c      	ldr	r3, [pc, #432]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006910:	5499      	strb	r1, [r3, r2]
				i++;
 8006912:	4b6c      	ldr	r3, [pc, #432]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	3301      	adds	r3, #1
 8006918:	b2da      	uxtb	r2, r3
 800691a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 800691c:	701a      	strb	r2, [r3, #0]
			}
		}
		if (bool_start_alarm == 1){
 800691e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac8 <HAL_UART_RxCpltCallback+0x2cc>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b01      	cmp	r3, #1
 8006924:	f040 8099 	bne.w	8006a5a <HAL_UART_RxCpltCallback+0x25e>
			if (receive_buffer2 == 'Z'){
 8006928:	4b64      	ldr	r3, [pc, #400]	@ (8006abc <HAL_UART_RxCpltCallback+0x2c0>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b5a      	cmp	r3, #90	@ 0x5a
 800692e:	f040 8087 	bne.w	8006a40 <HAL_UART_RxCpltCallback+0x244>
				bool_start_alarm = 0;
 8006932:	4b65      	ldr	r3, [pc, #404]	@ (8006ac8 <HAL_UART_RxCpltCallback+0x2cc>)
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
				//xu ly
				i = 0;
 8006938:	4b62      	ldr	r3, [pc, #392]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 800693a:	2200      	movs	r2, #0
 800693c:	701a      	strb	r2, [r3, #0]
				lcd_ShowStr(30, 30, receive_msg, GREEN, GREEN, 24, 0);
 800693e:	2300      	movs	r3, #0
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	2318      	movs	r3, #24
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8006950:	4a5b      	ldr	r2, [pc, #364]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006952:	211e      	movs	r1, #30
 8006954:	201e      	movs	r0, #30
 8006956:	f7fd fda3 	bl	80044a0 <lcd_ShowStr>
				while (receive_msg[i] != 'D'){
 800695a:	e005      	b.n	8006968 <HAL_UART_RxCpltCallback+0x16c>
					i++;
 800695c:	4b59      	ldr	r3, [pc, #356]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	4b57      	ldr	r3, [pc, #348]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 8006966:	701a      	strb	r2, [r3, #0]
				while (receive_msg[i] != 'D'){
 8006968:	4b56      	ldr	r3, [pc, #344]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	4b54      	ldr	r3, [pc, #336]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006970:	5c9b      	ldrb	r3, [r3, r2]
 8006972:	2b44      	cmp	r3, #68	@ 0x44
 8006974:	d1f2      	bne.n	800695c <HAL_UART_RxCpltCallback+0x160>
				}
				i++;
 8006976:	4b53      	ldr	r3, [pc, #332]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	b2da      	uxtb	r2, r3
 800697e:	4b51      	ldr	r3, [pc, #324]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 8006980:	701a      	strb	r2, [r3, #0]
		        int year = (receive_msg[2] - '0')*10 + (receive_msg[3] - '0');
 8006982:	4b4f      	ldr	r3, [pc, #316]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006984:	789b      	ldrb	r3, [r3, #2]
 8006986:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	461a      	mov	r2, r3
 8006994:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006996:	78db      	ldrb	r3, [r3, #3]
 8006998:	3b30      	subs	r3, #48	@ 0x30
 800699a:	4413      	add	r3, r2
 800699c:	61fb      	str	r3, [r7, #28]
		        int month = (receive_msg[5] - '0')*10 + (receive_msg[6] - '0');
 800699e:	4b48      	ldr	r3, [pc, #288]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80069a0:	795b      	ldrb	r3, [r3, #5]
 80069a2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	461a      	mov	r2, r3
 80069b0:	4b43      	ldr	r3, [pc, #268]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80069b2:	799b      	ldrb	r3, [r3, #6]
 80069b4:	3b30      	subs	r3, #48	@ 0x30
 80069b6:	4413      	add	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
		        int date = (receive_msg[8] - '0')*10 + (receive_msg[9] - '0');
 80069ba:	4b41      	ldr	r3, [pc, #260]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80069bc:	7a1b      	ldrb	r3, [r3, #8]
 80069be:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	461a      	mov	r2, r3
 80069cc:	4b3c      	ldr	r3, [pc, #240]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80069ce:	7a5b      	ldrb	r3, [r3, #9]
 80069d0:	3b30      	subs	r3, #48	@ 0x30
 80069d2:	4413      	add	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]
		        int hour = (receive_msg[11] - '0')*10 + (receive_msg[12] - '0');
 80069d6:	4b3a      	ldr	r3, [pc, #232]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80069d8:	7adb      	ldrb	r3, [r3, #11]
 80069da:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	461a      	mov	r2, r3
 80069e8:	4b35      	ldr	r3, [pc, #212]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80069ea:	7b1b      	ldrb	r3, [r3, #12]
 80069ec:	3b30      	subs	r3, #48	@ 0x30
 80069ee:	4413      	add	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
		        int min = (receive_msg[14] - '0')*10 + (receive_msg[15] - '0');
 80069f2:	4b33      	ldr	r3, [pc, #204]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 80069f4:	7b9b      	ldrb	r3, [r3, #14]
 80069f6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	461a      	mov	r2, r3
 8006a04:	4b2e      	ldr	r3, [pc, #184]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a06:	7bdb      	ldrb	r3, [r3, #15]
 8006a08:	3b30      	subs	r3, #48	@ 0x30
 8006a0a:	4413      	add	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
		        int sec = (receive_msg[17] - '0')*10 + (receive_msg[18] - '0');
 8006a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a10:	7c5b      	ldrb	r3, [r3, #17]
 8006a12:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	461a      	mov	r2, r3
 8006a20:	4b27      	ldr	r3, [pc, #156]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a22:	7c9b      	ldrb	r3, [r3, #18]
 8006a24:	3b30      	subs	r3, #48	@ 0x30
 8006a26:	4413      	add	r3, r2
 8006a28:	60bb      	str	r3, [r7, #8]
		        updateTime_Alarm(hour, min, sec, date, month, year);
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	68f9      	ldr	r1, [r7, #12]
 8006a38:	6938      	ldr	r0, [r7, #16]
 8006a3a:	f7fa fdc6 	bl	80015ca <updateTime_Alarm>
 8006a3e:	e00c      	b.n	8006a5a <HAL_UART_RxCpltCallback+0x25e>
			}
			else {
				receive_msg[i] = receive_buffer2;
 8006a40:	4b20      	ldr	r3, [pc, #128]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	4b1d      	ldr	r3, [pc, #116]	@ (8006abc <HAL_UART_RxCpltCallback+0x2c0>)
 8006a48:	7819      	ldrb	r1, [r3, #0]
 8006a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac0 <HAL_UART_RxCpltCallback+0x2c4>)
 8006a4c:	5499      	strb	r1, [r3, r2]
				i++;
 8006a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	3301      	adds	r3, #1
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 8006a58:	701a      	strb	r2, [r3, #0]
			}
		}

		if (receive_buffer2 == 'O') check_esp = 1;
 8006a5a:	4b18      	ldr	r3, [pc, #96]	@ (8006abc <HAL_UART_RxCpltCallback+0x2c0>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006a60:	d103      	bne.n	8006a6a <HAL_UART_RxCpltCallback+0x26e>
 8006a62:	4b1a      	ldr	r3, [pc, #104]	@ (8006acc <HAL_UART_RxCpltCallback+0x2d0>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	e03e      	b.n	8006ae8 <HAL_UART_RxCpltCallback+0x2ec>
		else if (receive_buffer2 == 'B'){
 8006a6a:	4b14      	ldr	r3, [pc, #80]	@ (8006abc <HAL_UART_RxCpltCallback+0x2c0>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b42      	cmp	r3, #66	@ 0x42
 8006a70:	d105      	bne.n	8006a7e <HAL_UART_RxCpltCallback+0x282>
//			light_status = 1;
			HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 1);
 8006a72:	2201      	movs	r2, #1
 8006a74:	2140      	movs	r1, #64	@ 0x40
 8006a76:	4816      	ldr	r0, [pc, #88]	@ (8006ad0 <HAL_UART_RxCpltCallback+0x2d4>)
 8006a78:	f001 faca 	bl	8008010 <HAL_GPIO_WritePin>
 8006a7c:	e034      	b.n	8006ae8 <HAL_UART_RxCpltCallback+0x2ec>
		}
		else if (receive_buffer2  == 'b'){
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006abc <HAL_UART_RxCpltCallback+0x2c0>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b62      	cmp	r3, #98	@ 0x62
 8006a84:	d105      	bne.n	8006a92 <HAL_UART_RxCpltCallback+0x296>
//			light_status = 0;
			HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8006a86:	2200      	movs	r2, #0
 8006a88:	2140      	movs	r1, #64	@ 0x40
 8006a8a:	4811      	ldr	r0, [pc, #68]	@ (8006ad0 <HAL_UART_RxCpltCallback+0x2d4>)
 8006a8c:	f001 fac0 	bl	8008010 <HAL_GPIO_WritePin>
 8006a90:	e02a      	b.n	8006ae8 <HAL_UART_RxCpltCallback+0x2ec>
//		}
//		else if (receive_buffer2  == 'a'){
////			light_status = 0;
//			HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
//		}
		else if (receive_buffer2 == 'S'){
 8006a92:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <HAL_UART_RxCpltCallback+0x2c0>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b53      	cmp	r3, #83	@ 0x53
 8006a98:	d11c      	bne.n	8006ad4 <HAL_UART_RxCpltCallback+0x2d8>
			bool_start_time = 1;
 8006a9a:	4b07      	ldr	r3, [pc, #28]	@ (8006ab8 <HAL_UART_RxCpltCallback+0x2bc>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	701a      	strb	r2, [r3, #0]
			i = 0;
 8006aa0:	4b08      	ldr	r3, [pc, #32]	@ (8006ac4 <HAL_UART_RxCpltCallback+0x2c8>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e01f      	b.n	8006ae8 <HAL_UART_RxCpltCallback+0x2ec>
 8006aa8:	40011000 	.word	0x40011000
 8006aac:	20000478 	.word	0x20000478
 8006ab0:	2000047c 	.word	0x2000047c
 8006ab4:	40004400 	.word	0x40004400
 8006ab8:	20000410 	.word	0x20000410
 8006abc:	20000479 	.word	0x20000479
 8006ac0:	20000414 	.word	0x20000414
 8006ac4:	20000412 	.word	0x20000412
 8006ac8:	20000411 	.word	0x20000411
 8006acc:	2000047a 	.word	0x2000047a
 8006ad0:	40021000 	.word	0x40021000
		}
		else if (receive_buffer2 == 'A') {
 8006ad4:	4b09      	ldr	r3, [pc, #36]	@ (8006afc <HAL_UART_RxCpltCallback+0x300>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b41      	cmp	r3, #65	@ 0x41
 8006ada:	d105      	bne.n	8006ae8 <HAL_UART_RxCpltCallback+0x2ec>
//			uart_EspSendBytes("a", 1);
			bool_start_alarm = 1;
 8006adc:	4b08      	ldr	r3, [pc, #32]	@ (8006b00 <HAL_UART_RxCpltCallback+0x304>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
			i = 0;
 8006ae2:	4b08      	ldr	r3, [pc, #32]	@ (8006b04 <HAL_UART_RxCpltCallback+0x308>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4904      	ldr	r1, [pc, #16]	@ (8006afc <HAL_UART_RxCpltCallback+0x300>)
 8006aec:	4806      	ldr	r0, [pc, #24]	@ (8006b08 <HAL_UART_RxCpltCallback+0x30c>)
 8006aee:	f004 fe8a 	bl	800b806 <HAL_UART_Receive_IT>
	}
}
 8006af2:	bf00      	nop
 8006af4:	3738      	adds	r7, #56	@ 0x38
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000479 	.word	0x20000479
 8006b00:	20000411 	.word	0x20000411
 8006b04:	20000412 	.word	0x20000412
 8006b08:	200004c0 	.word	0x200004c0

08006b0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006b10:	4b11      	ldr	r3, [pc, #68]	@ (8006b58 <MX_USART1_UART_Init+0x4c>)
 8006b12:	4a12      	ldr	r2, [pc, #72]	@ (8006b5c <MX_USART1_UART_Init+0x50>)
 8006b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006b16:	4b10      	ldr	r3, [pc, #64]	@ (8006b58 <MX_USART1_UART_Init+0x4c>)
 8006b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b58 <MX_USART1_UART_Init+0x4c>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b24:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <MX_USART1_UART_Init+0x4c>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <MX_USART1_UART_Init+0x4c>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b30:	4b09      	ldr	r3, [pc, #36]	@ (8006b58 <MX_USART1_UART_Init+0x4c>)
 8006b32:	220c      	movs	r2, #12
 8006b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b36:	4b08      	ldr	r3, [pc, #32]	@ (8006b58 <MX_USART1_UART_Init+0x4c>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b3c:	4b06      	ldr	r3, [pc, #24]	@ (8006b58 <MX_USART1_UART_Init+0x4c>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b42:	4805      	ldr	r0, [pc, #20]	@ (8006b58 <MX_USART1_UART_Init+0x4c>)
 8006b44:	f004 fd80 	bl	800b648 <HAL_UART_Init>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006b4e:	f7fd ff3d 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006b52:	bf00      	nop
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	2000047c 	.word	0x2000047c
 8006b5c:	40011000 	.word	0x40011000

08006b60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006b64:	4b11      	ldr	r3, [pc, #68]	@ (8006bac <MX_USART2_UART_Init+0x4c>)
 8006b66:	4a12      	ldr	r2, [pc, #72]	@ (8006bb0 <MX_USART2_UART_Init+0x50>)
 8006b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006b6a:	4b10      	ldr	r3, [pc, #64]	@ (8006bac <MX_USART2_UART_Init+0x4c>)
 8006b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006b72:	4b0e      	ldr	r3, [pc, #56]	@ (8006bac <MX_USART2_UART_Init+0x4c>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006b78:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <MX_USART2_UART_Init+0x4c>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <MX_USART2_UART_Init+0x4c>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006b84:	4b09      	ldr	r3, [pc, #36]	@ (8006bac <MX_USART2_UART_Init+0x4c>)
 8006b86:	220c      	movs	r2, #12
 8006b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b8a:	4b08      	ldr	r3, [pc, #32]	@ (8006bac <MX_USART2_UART_Init+0x4c>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b90:	4b06      	ldr	r3, [pc, #24]	@ (8006bac <MX_USART2_UART_Init+0x4c>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b96:	4805      	ldr	r0, [pc, #20]	@ (8006bac <MX_USART2_UART_Init+0x4c>)
 8006b98:	f004 fd56 	bl	800b648 <HAL_UART_Init>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006ba2:	f7fd ff13 	bl	80049cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006ba6:	bf00      	nop
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	200004c0 	.word	0x200004c0
 8006bb0:	40004400 	.word	0x40004400

08006bb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08c      	sub	sp, #48	@ 0x30
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bbc:	f107 031c 	add.w	r3, r7, #28
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	605a      	str	r2, [r3, #4]
 8006bc6:	609a      	str	r2, [r3, #8]
 8006bc8:	60da      	str	r2, [r3, #12]
 8006bca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a3a      	ldr	r2, [pc, #232]	@ (8006cbc <HAL_UART_MspInit+0x108>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d135      	bne.n	8006c42 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	4b39      	ldr	r3, [pc, #228]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bde:	4a38      	ldr	r2, [pc, #224]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006be0:	f043 0310 	orr.w	r3, r3, #16
 8006be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006be6:	4b36      	ldr	r3, [pc, #216]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bea:	f003 0310 	and.w	r3, r3, #16
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	4b32      	ldr	r3, [pc, #200]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfa:	4a31      	ldr	r2, [pc, #196]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c02:	4b2f      	ldr	r3, [pc, #188]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006c0e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c14:	2302      	movs	r3, #2
 8006c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c20:	2307      	movs	r3, #7
 8006c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c24:	f107 031c 	add.w	r3, r7, #28
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4826      	ldr	r0, [pc, #152]	@ (8006cc4 <HAL_UART_MspInit+0x110>)
 8006c2c:	f001 f83c 	bl	8007ca8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c30:	2200      	movs	r2, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	2025      	movs	r0, #37	@ 0x25
 8006c36:	f000 fc84 	bl	8007542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006c3a:	2025      	movs	r0, #37	@ 0x25
 8006c3c:	f000 fc9d 	bl	800757a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006c40:	e038      	b.n	8006cb4 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a20      	ldr	r2, [pc, #128]	@ (8006cc8 <HAL_UART_MspInit+0x114>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d133      	bne.n	8006cb4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c54:	4a1a      	ldr	r2, [pc, #104]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c5c:	4b18      	ldr	r3, [pc, #96]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	4b14      	ldr	r3, [pc, #80]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c70:	4a13      	ldr	r2, [pc, #76]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c78:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <HAL_UART_MspInit+0x10c>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006c84:	230c      	movs	r3, #12
 8006c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c90:	2303      	movs	r3, #3
 8006c92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006c94:	2307      	movs	r3, #7
 8006c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c98:	f107 031c 	add.w	r3, r7, #28
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4809      	ldr	r0, [pc, #36]	@ (8006cc4 <HAL_UART_MspInit+0x110>)
 8006ca0:	f001 f802 	bl	8007ca8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	2026      	movs	r0, #38	@ 0x26
 8006caa:	f000 fc4a 	bl	8007542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006cae:	2026      	movs	r0, #38	@ 0x26
 8006cb0:	f000 fc63 	bl	800757a <HAL_NVIC_EnableIRQ>
}
 8006cb4:	bf00      	nop
 8006cb6:	3730      	adds	r7, #48	@ 0x30
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40011000 	.word	0x40011000
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	40020000 	.word	0x40020000
 8006cc8:	40004400 	.word	0x40004400

08006ccc <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	091b      	lsrs	r3, r3, #4
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	0092      	lsls	r2, r2, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	4413      	add	r3, r2
 8006cf0:	b2db      	uxtb	r3, r3
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4603      	mov	r3, r0
 8006d08:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d44 <DEC2BCD+0x44>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	08db      	lsrs	r3, r3, #3
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	b258      	sxtb	r0, r3
 8006d1a:	79fa      	ldrb	r2, [r7, #7]
 8006d1c:	4b09      	ldr	r3, [pc, #36]	@ (8006d44 <DEC2BCD+0x44>)
 8006d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d22:	08d9      	lsrs	r1, r3, #3
 8006d24:	460b      	mov	r3, r1
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	4303      	orrs	r3, r0
 8006d34:	b25b      	sxtb	r3, r3
 8006d36:	b2db      	uxtb	r3, r3
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	cccccccd 	.word	0xcccccccd

08006d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006d48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d4c:	480d      	ldr	r0, [pc, #52]	@ (8006d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006d4e:	490e      	ldr	r1, [pc, #56]	@ (8006d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006d50:	4a0e      	ldr	r2, [pc, #56]	@ (8006d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d54:	e002      	b.n	8006d5c <LoopCopyDataInit>

08006d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d5a:	3304      	adds	r3, #4

08006d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d60:	d3f9      	bcc.n	8006d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d62:	4a0b      	ldr	r2, [pc, #44]	@ (8006d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006d64:	4c0b      	ldr	r4, [pc, #44]	@ (8006d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d68:	e001      	b.n	8006d6e <LoopFillZerobss>

08006d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d6c:	3204      	adds	r2, #4

08006d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d70:	d3fb      	bcc.n	8006d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006d72:	f7fd ffd5 	bl	8004d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d76:	f005 fdb9 	bl	800c8ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d7a:	f7fd fd43 	bl	8004804 <main>
  bx  lr    
 8006d7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006d80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d88:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8006d8c:	08010fa4 	.word	0x08010fa4
  ldr r2, =_sbss
 8006d90:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8006d94:	20000640 	.word	0x20000640

08006d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d98:	e7fe      	b.n	8006d98 <ADC_IRQHandler>
	...

08006d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006da0:	4b0e      	ldr	r3, [pc, #56]	@ (8006ddc <HAL_Init+0x40>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a0d      	ldr	r2, [pc, #52]	@ (8006ddc <HAL_Init+0x40>)
 8006da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006dac:	4b0b      	ldr	r3, [pc, #44]	@ (8006ddc <HAL_Init+0x40>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a0a      	ldr	r2, [pc, #40]	@ (8006ddc <HAL_Init+0x40>)
 8006db2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006db8:	4b08      	ldr	r3, [pc, #32]	@ (8006ddc <HAL_Init+0x40>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a07      	ldr	r2, [pc, #28]	@ (8006ddc <HAL_Init+0x40>)
 8006dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006dc4:	2003      	movs	r0, #3
 8006dc6:	f000 fbb1 	bl	800752c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006dca:	200f      	movs	r0, #15
 8006dcc:	f000 f808 	bl	8006de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006dd0:	f7fd ff26 	bl	8004c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40023c00 	.word	0x40023c00

08006de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006de8:	4b12      	ldr	r3, [pc, #72]	@ (8006e34 <HAL_InitTick+0x54>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4b12      	ldr	r3, [pc, #72]	@ (8006e38 <HAL_InitTick+0x58>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	4619      	mov	r1, r3
 8006df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fbc9 	bl	8007596 <HAL_SYSTICK_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e00e      	b.n	8006e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b0f      	cmp	r3, #15
 8006e12:	d80a      	bhi.n	8006e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e14:	2200      	movs	r2, #0
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	f000 fb91 	bl	8007542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e20:	4a06      	ldr	r2, [pc, #24]	@ (8006e3c <HAL_InitTick+0x5c>)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000010 	.word	0x20000010
 8006e38:	20000050 	.word	0x20000050
 8006e3c:	2000004c 	.word	0x2000004c

08006e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e44:	4b06      	ldr	r3, [pc, #24]	@ (8006e60 <HAL_IncTick+0x20>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4b06      	ldr	r3, [pc, #24]	@ (8006e64 <HAL_IncTick+0x24>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4413      	add	r3, r2
 8006e50:	4a04      	ldr	r2, [pc, #16]	@ (8006e64 <HAL_IncTick+0x24>)
 8006e52:	6013      	str	r3, [r2, #0]
}
 8006e54:	bf00      	nop
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20000050 	.word	0x20000050
 8006e64:	20000504 	.word	0x20000504

08006e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8006e6c:	4b03      	ldr	r3, [pc, #12]	@ (8006e7c <HAL_GetTick+0x14>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000504 	.word	0x20000504

08006e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e88:	f7ff ffee 	bl	8006e68 <HAL_GetTick>
 8006e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e98:	d005      	beq.n	8006ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec4 <HAL_Delay+0x44>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006ea6:	bf00      	nop
 8006ea8:	f7ff ffde 	bl	8006e68 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d8f7      	bhi.n	8006ea8 <HAL_Delay+0x28>
  {
  }
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000050 	.word	0x20000050

08006ec8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e033      	b.n	8006f46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d109      	bne.n	8006efa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7f9 fffc 	bl	8000ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	f003 0310 	and.w	r3, r3, #16
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d118      	bne.n	8006f38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006f0e:	f023 0302 	bic.w	r3, r3, #2
 8006f12:	f043 0202 	orr.w	r2, r3, #2
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f93a 	bl	8007194 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	f043 0201 	orr.w	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f36:	e001      	b.n	8006f3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d101      	bne.n	8006f6c <HAL_ADC_ConfigChannel+0x1c>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e105      	b.n	8007178 <HAL_ADC_ConfigChannel+0x228>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	d925      	bls.n	8006fc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68d9      	ldr	r1, [r3, #12]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	3b1e      	subs	r3, #30
 8006f92:	2207      	movs	r2, #7
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	43da      	mvns	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	400a      	ands	r2, r1
 8006fa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68d9      	ldr	r1, [r3, #12]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	4403      	add	r3, r0
 8006fba:	3b1e      	subs	r3, #30
 8006fbc:	409a      	lsls	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	e022      	b.n	800700e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6919      	ldr	r1, [r3, #16]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	4413      	add	r3, r2
 8006fdc:	2207      	movs	r2, #7
 8006fde:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe2:	43da      	mvns	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	400a      	ands	r2, r1
 8006fea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6919      	ldr	r1, [r3, #16]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4403      	add	r3, r0
 8007004:	409a      	lsls	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b06      	cmp	r3, #6
 8007014:	d824      	bhi.n	8007060 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	3b05      	subs	r3, #5
 8007028:	221f      	movs	r2, #31
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	43da      	mvns	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	400a      	ands	r2, r1
 8007036:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	4618      	mov	r0, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	3b05      	subs	r3, #5
 8007052:	fa00 f203 	lsl.w	r2, r0, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	635a      	str	r2, [r3, #52]	@ 0x34
 800705e:	e04c      	b.n	80070fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b0c      	cmp	r3, #12
 8007066:	d824      	bhi.n	80070b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	3b23      	subs	r3, #35	@ 0x23
 800707a:	221f      	movs	r2, #31
 800707c:	fa02 f303 	lsl.w	r3, r2, r3
 8007080:	43da      	mvns	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	400a      	ands	r2, r1
 8007088:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	4618      	mov	r0, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	3b23      	subs	r3, #35	@ 0x23
 80070a4:	fa00 f203 	lsl.w	r2, r0, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80070b0:	e023      	b.n	80070fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	3b41      	subs	r3, #65	@ 0x41
 80070c4:	221f      	movs	r2, #31
 80070c6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ca:	43da      	mvns	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	400a      	ands	r2, r1
 80070d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	4618      	mov	r0, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	3b41      	subs	r3, #65	@ 0x41
 80070ee:	fa00 f203 	lsl.w	r2, r0, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80070fa:	4b22      	ldr	r3, [pc, #136]	@ (8007184 <HAL_ADC_ConfigChannel+0x234>)
 80070fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a21      	ldr	r2, [pc, #132]	@ (8007188 <HAL_ADC_ConfigChannel+0x238>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d109      	bne.n	800711c <HAL_ADC_ConfigChannel+0x1cc>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b12      	cmp	r3, #18
 800710e:	d105      	bne.n	800711c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a19      	ldr	r2, [pc, #100]	@ (8007188 <HAL_ADC_ConfigChannel+0x238>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d123      	bne.n	800716e <HAL_ADC_ConfigChannel+0x21e>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b10      	cmp	r3, #16
 800712c:	d003      	beq.n	8007136 <HAL_ADC_ConfigChannel+0x1e6>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b11      	cmp	r3, #17
 8007134:	d11b      	bne.n	800716e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b10      	cmp	r3, #16
 8007148:	d111      	bne.n	800716e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800714a:	4b10      	ldr	r3, [pc, #64]	@ (800718c <HAL_ADC_ConfigChannel+0x23c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a10      	ldr	r2, [pc, #64]	@ (8007190 <HAL_ADC_ConfigChannel+0x240>)
 8007150:	fba2 2303 	umull	r2, r3, r2, r3
 8007154:	0c9a      	lsrs	r2, r3, #18
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007160:	e002      	b.n	8007168 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	3b01      	subs	r3, #1
 8007166:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f9      	bne.n	8007162 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	40012300 	.word	0x40012300
 8007188:	40012000 	.word	0x40012000
 800718c:	20000010 	.word	0x20000010
 8007190:	431bde83 	.word	0x431bde83

08007194 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800719c:	4b79      	ldr	r3, [pc, #484]	@ (8007384 <ADC_Init+0x1f0>)
 800719e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6859      	ldr	r1, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	021a      	lsls	r2, r3, #8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80071ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6859      	ldr	r1, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800720e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6899      	ldr	r1, [r3, #8]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007226:	4a58      	ldr	r2, [pc, #352]	@ (8007388 <ADC_Init+0x1f4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d022      	beq.n	8007272 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800723a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6899      	ldr	r1, [r3, #8]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800725c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6899      	ldr	r1, [r3, #8]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	609a      	str	r2, [r3, #8]
 8007270:	e00f      	b.n	8007292 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007290:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0202 	bic.w	r2, r2, #2
 80072a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6899      	ldr	r1, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7e1b      	ldrb	r3, [r3, #24]
 80072ac:	005a      	lsls	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01b      	beq.n	80072f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80072de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6859      	ldr	r1, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ea:	3b01      	subs	r3, #1
 80072ec:	035a      	lsls	r2, r3, #13
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
 80072f6:	e007      	b.n	8007308 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007306:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	3b01      	subs	r3, #1
 8007324:	051a      	lsls	r2, r3, #20
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800733c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6899      	ldr	r1, [r3, #8]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800734a:	025a      	lsls	r2, r3, #9
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6899      	ldr	r1, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	029a      	lsls	r2, r3, #10
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	609a      	str	r2, [r3, #8]
}
 8007378:	bf00      	nop
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40012300 	.word	0x40012300
 8007388:	0f000001 	.word	0x0f000001

0800738c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800739c:	4b0c      	ldr	r3, [pc, #48]	@ (80073d0 <__NVIC_SetPriorityGrouping+0x44>)
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80073a8:	4013      	ands	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80073b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073be:	4a04      	ldr	r2, [pc, #16]	@ (80073d0 <__NVIC_SetPriorityGrouping+0x44>)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	60d3      	str	r3, [r2, #12]
}
 80073c4:	bf00      	nop
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	e000ed00 	.word	0xe000ed00

080073d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073d8:	4b04      	ldr	r3, [pc, #16]	@ (80073ec <__NVIC_GetPriorityGrouping+0x18>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	0a1b      	lsrs	r3, r3, #8
 80073de:	f003 0307 	and.w	r3, r3, #7
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	e000ed00 	.word	0xe000ed00

080073f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	db0b      	blt.n	800741a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	f003 021f 	and.w	r2, r3, #31
 8007408:	4907      	ldr	r1, [pc, #28]	@ (8007428 <__NVIC_EnableIRQ+0x38>)
 800740a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	2001      	movs	r0, #1
 8007412:	fa00 f202 	lsl.w	r2, r0, r2
 8007416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	e000e100 	.word	0xe000e100

0800742c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	6039      	str	r1, [r7, #0]
 8007436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800743c:	2b00      	cmp	r3, #0
 800743e:	db0a      	blt.n	8007456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	b2da      	uxtb	r2, r3
 8007444:	490c      	ldr	r1, [pc, #48]	@ (8007478 <__NVIC_SetPriority+0x4c>)
 8007446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800744a:	0112      	lsls	r2, r2, #4
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	440b      	add	r3, r1
 8007450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007454:	e00a      	b.n	800746c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	4908      	ldr	r1, [pc, #32]	@ (800747c <__NVIC_SetPriority+0x50>)
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	3b04      	subs	r3, #4
 8007464:	0112      	lsls	r2, r2, #4
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	440b      	add	r3, r1
 800746a:	761a      	strb	r2, [r3, #24]
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	e000e100 	.word	0xe000e100
 800747c:	e000ed00 	.word	0xe000ed00

08007480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007480:	b480      	push	{r7}
 8007482:	b089      	sub	sp, #36	@ 0x24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f1c3 0307 	rsb	r3, r3, #7
 800749a:	2b04      	cmp	r3, #4
 800749c:	bf28      	it	cs
 800749e:	2304      	movcs	r3, #4
 80074a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	3304      	adds	r3, #4
 80074a6:	2b06      	cmp	r3, #6
 80074a8:	d902      	bls.n	80074b0 <NVIC_EncodePriority+0x30>
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	3b03      	subs	r3, #3
 80074ae:	e000      	b.n	80074b2 <NVIC_EncodePriority+0x32>
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074b4:	f04f 32ff 	mov.w	r2, #4294967295
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	fa02 f303 	lsl.w	r3, r2, r3
 80074be:	43da      	mvns	r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	401a      	ands	r2, r3
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074c8:	f04f 31ff 	mov.w	r1, #4294967295
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	fa01 f303 	lsl.w	r3, r1, r3
 80074d2:	43d9      	mvns	r1, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074d8:	4313      	orrs	r3, r2
         );
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3724      	adds	r7, #36	@ 0x24
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074f8:	d301      	bcc.n	80074fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80074fa:	2301      	movs	r3, #1
 80074fc:	e00f      	b.n	800751e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007528 <SysTick_Config+0x40>)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3b01      	subs	r3, #1
 8007504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007506:	210f      	movs	r1, #15
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	f7ff ff8e 	bl	800742c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <SysTick_Config+0x40>)
 8007512:	2200      	movs	r2, #0
 8007514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007516:	4b04      	ldr	r3, [pc, #16]	@ (8007528 <SysTick_Config+0x40>)
 8007518:	2207      	movs	r2, #7
 800751a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	e000e010 	.word	0xe000e010

0800752c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff ff29 	bl	800738c <__NVIC_SetPriorityGrouping>
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	4603      	mov	r3, r0
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007554:	f7ff ff3e 	bl	80073d4 <__NVIC_GetPriorityGrouping>
 8007558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	6978      	ldr	r0, [r7, #20]
 8007560:	f7ff ff8e 	bl	8007480 <NVIC_EncodePriority>
 8007564:	4602      	mov	r2, r0
 8007566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800756a:	4611      	mov	r1, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff ff5d 	bl	800742c <__NVIC_SetPriority>
}
 8007572:	bf00      	nop
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	4603      	mov	r3, r0
 8007582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff ff31 	bl	80073f0 <__NVIC_EnableIRQ>
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff ffa2 	bl	80074e8 <SysTick_Config>
 80075a4:	4603      	mov	r3, r0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80075bc:	f7ff fc54 	bl	8006e68 <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e099      	b.n	8007700 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0201 	bic.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075ec:	e00f      	b.n	800760e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075ee:	f7ff fc3b 	bl	8006e68 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b05      	cmp	r3, #5
 80075fa:	d908      	bls.n	800760e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2203      	movs	r2, #3
 8007606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e078      	b.n	8007700 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e8      	bne.n	80075ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	4b38      	ldr	r3, [pc, #224]	@ (8007708 <HAL_DMA_Init+0x158>)
 8007628:	4013      	ands	r3, r2
 800762a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800763a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007664:	2b04      	cmp	r3, #4
 8007666:	d107      	bne.n	8007678 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007670:	4313      	orrs	r3, r2
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 0307 	bic.w	r3, r3, #7
 800768e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d117      	bne.n	80076d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fa7b 	bl	8007bb0 <DMA_CheckFifoParam>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d008      	beq.n	80076d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2240      	movs	r2, #64	@ 0x40
 80076c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80076ce:	2301      	movs	r3, #1
 80076d0:	e016      	b.n	8007700 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa32 	bl	8007b44 <DMA_CalcBaseAndBitshift>
 80076e0:	4603      	mov	r3, r0
 80076e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076e8:	223f      	movs	r2, #63	@ 0x3f
 80076ea:	409a      	lsls	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	f010803f 	.word	0xf010803f

0800770c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007718:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800771a:	f7ff fba5 	bl	8006e68 <HAL_GetTick>
 800771e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d008      	beq.n	800773e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2280      	movs	r2, #128	@ 0x80
 8007730:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e052      	b.n	80077e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0216 	bic.w	r2, r2, #22
 800774c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800775c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <HAL_DMA_Abort+0x62>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800776a:	2b00      	cmp	r3, #0
 800776c:	d007      	beq.n	800777e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0208 	bic.w	r2, r2, #8
 800777c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0201 	bic.w	r2, r2, #1
 800778c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800778e:	e013      	b.n	80077b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007790:	f7ff fb6a 	bl	8006e68 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b05      	cmp	r3, #5
 800779c:	d90c      	bls.n	80077b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2203      	movs	r2, #3
 80077a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e015      	b.n	80077e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e4      	bne.n	8007790 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ca:	223f      	movs	r2, #63	@ 0x3f
 80077cc:	409a      	lsls	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d004      	beq.n	800780a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2280      	movs	r2, #128	@ 0x80
 8007804:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e00c      	b.n	8007824 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2205      	movs	r2, #5
 800780e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800783c:	4b8e      	ldr	r3, [pc, #568]	@ (8007a78 <HAL_DMA_IRQHandler+0x248>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a8e      	ldr	r2, [pc, #568]	@ (8007a7c <HAL_DMA_IRQHandler+0x24c>)
 8007842:	fba2 2303 	umull	r2, r3, r2, r3
 8007846:	0a9b      	lsrs	r3, r3, #10
 8007848:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800785a:	2208      	movs	r2, #8
 800785c:	409a      	lsls	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4013      	ands	r3, r2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01a      	beq.n	800789c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d013      	beq.n	800789c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0204 	bic.w	r2, r2, #4
 8007882:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007888:	2208      	movs	r2, #8
 800788a:	409a      	lsls	r2, r3
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007894:	f043 0201 	orr.w	r2, r3, #1
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078a0:	2201      	movs	r2, #1
 80078a2:	409a      	lsls	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4013      	ands	r3, r2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d012      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00b      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078be:	2201      	movs	r2, #1
 80078c0:	409a      	lsls	r2, r3
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ca:	f043 0202 	orr.w	r2, r3, #2
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078d6:	2204      	movs	r2, #4
 80078d8:	409a      	lsls	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4013      	ands	r3, r2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d012      	beq.n	8007908 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00b      	beq.n	8007908 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078f4:	2204      	movs	r2, #4
 80078f6:	409a      	lsls	r2, r3
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007900:	f043 0204 	orr.w	r2, r3, #4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790c:	2210      	movs	r2, #16
 800790e:	409a      	lsls	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4013      	ands	r3, r2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d043      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d03c      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800792a:	2210      	movs	r2, #16
 800792c:	409a      	lsls	r2, r3
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d018      	beq.n	8007972 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d108      	bne.n	8007960 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d024      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
 800795e:	e01f      	b.n	80079a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01b      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
 8007970:	e016      	b.n	80079a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800797c:	2b00      	cmp	r3, #0
 800797e:	d107      	bne.n	8007990 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0208 	bic.w	r2, r2, #8
 800798e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079a4:	2220      	movs	r2, #32
 80079a6:	409a      	lsls	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 808f 	beq.w	8007ad0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0310 	and.w	r3, r3, #16
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8087 	beq.w	8007ad0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c6:	2220      	movs	r2, #32
 80079c8:	409a      	lsls	r2, r3
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d136      	bne.n	8007a48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0216 	bic.w	r2, r2, #22
 80079e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695a      	ldr	r2, [r3, #20]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <HAL_DMA_IRQHandler+0x1da>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d007      	beq.n	8007a1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0208 	bic.w	r2, r2, #8
 8007a18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a1e:	223f      	movs	r2, #63	@ 0x3f
 8007a20:	409a      	lsls	r2, r3
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d07e      	beq.n	8007b3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
        }
        return;
 8007a46:	e079      	b.n	8007b3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d01d      	beq.n	8007a92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10d      	bne.n	8007a80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d031      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
 8007a74:	e02c      	b.n	8007ad0 <HAL_DMA_IRQHandler+0x2a0>
 8007a76:	bf00      	nop
 8007a78:	20000010 	.word	0x20000010
 8007a7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d023      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
 8007a90:	e01e      	b.n	8007ad0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10f      	bne.n	8007ac0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0210 	bic.w	r2, r2, #16
 8007aae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d032      	beq.n	8007b3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d022      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2205      	movs	r2, #5
 8007ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0201 	bic.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60bb      	str	r3, [r7, #8]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d307      	bcc.n	8007b18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f2      	bne.n	8007afc <HAL_DMA_IRQHandler+0x2cc>
 8007b16:	e000      	b.n	8007b1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007b18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
 8007b3a:	e000      	b.n	8007b3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8007b3c:	bf00      	nop
    }
  }
}
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	3b10      	subs	r3, #16
 8007b54:	4a14      	ldr	r2, [pc, #80]	@ (8007ba8 <DMA_CalcBaseAndBitshift+0x64>)
 8007b56:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5a:	091b      	lsrs	r3, r3, #4
 8007b5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007b5e:	4a13      	ldr	r2, [pc, #76]	@ (8007bac <DMA_CalcBaseAndBitshift+0x68>)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d909      	bls.n	8007b86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	1d1a      	adds	r2, r3, #4
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b84:	e007      	b.n	8007b96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	aaaaaaab 	.word	0xaaaaaaab
 8007bac:	08010f8c 	.word	0x08010f8c

08007bb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d11f      	bne.n	8007c0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d856      	bhi.n	8007c7e <DMA_CheckFifoParam+0xce>
 8007bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd8 <DMA_CheckFifoParam+0x28>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007be9 	.word	0x08007be9
 8007bdc:	08007bfb 	.word	0x08007bfb
 8007be0:	08007be9 	.word	0x08007be9
 8007be4:	08007c7f 	.word	0x08007c7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d046      	beq.n	8007c82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bf8:	e043      	b.n	8007c82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007c02:	d140      	bne.n	8007c86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c08:	e03d      	b.n	8007c86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c12:	d121      	bne.n	8007c58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d837      	bhi.n	8007c8a <DMA_CheckFifoParam+0xda>
 8007c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c20 <DMA_CheckFifoParam+0x70>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c37 	.word	0x08007c37
 8007c28:	08007c31 	.word	0x08007c31
 8007c2c:	08007c49 	.word	0x08007c49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	73fb      	strb	r3, [r7, #15]
      break;
 8007c34:	e030      	b.n	8007c98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d025      	beq.n	8007c8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c46:	e022      	b.n	8007c8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007c50:	d11f      	bne.n	8007c92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007c56:	e01c      	b.n	8007c92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d903      	bls.n	8007c66 <DMA_CheckFifoParam+0xb6>
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d003      	beq.n	8007c6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007c64:	e018      	b.n	8007c98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	73fb      	strb	r3, [r7, #15]
      break;
 8007c6a:	e015      	b.n	8007c98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00e      	beq.n	8007c96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7c:	e00b      	b.n	8007c96 <DMA_CheckFifoParam+0xe6>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e00a      	b.n	8007c98 <DMA_CheckFifoParam+0xe8>
      break;
 8007c82:	bf00      	nop
 8007c84:	e008      	b.n	8007c98 <DMA_CheckFifoParam+0xe8>
      break;
 8007c86:	bf00      	nop
 8007c88:	e006      	b.n	8007c98 <DMA_CheckFifoParam+0xe8>
      break;
 8007c8a:	bf00      	nop
 8007c8c:	e004      	b.n	8007c98 <DMA_CheckFifoParam+0xe8>
      break;
 8007c8e:	bf00      	nop
 8007c90:	e002      	b.n	8007c98 <DMA_CheckFifoParam+0xe8>
      break;   
 8007c92:	bf00      	nop
 8007c94:	e000      	b.n	8007c98 <DMA_CheckFifoParam+0xe8>
      break;
 8007c96:	bf00      	nop
    }
  } 
  
  return status; 
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop

08007ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b089      	sub	sp, #36	@ 0x24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	e16b      	b.n	8007f9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	f040 815a 	bne.w	8007f96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f003 0303 	and.w	r3, r3, #3
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d005      	beq.n	8007cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d130      	bne.n	8007d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	2203      	movs	r2, #3
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	43db      	mvns	r3, r3
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	68da      	ldr	r2, [r3, #12]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d30:	2201      	movs	r2, #1
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	43db      	mvns	r3, r3
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	091b      	lsrs	r3, r3, #4
 8007d46:	f003 0201 	and.w	r2, r3, #1
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d017      	beq.n	8007d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	2203      	movs	r2, #3
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f003 0303 	and.w	r3, r3, #3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d123      	bne.n	8007dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	08da      	lsrs	r2, r3, #3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3208      	adds	r2, #8
 8007dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	220f      	movs	r2, #15
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	08da      	lsrs	r2, r3, #3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3208      	adds	r2, #8
 8007de6:	69b9      	ldr	r1, [r7, #24]
 8007de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	2203      	movs	r2, #3
 8007df8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	4013      	ands	r3, r2
 8007e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f003 0203 	and.w	r2, r3, #3
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80b4 	beq.w	8007f96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	4b60      	ldr	r3, [pc, #384]	@ (8007fb4 <HAL_GPIO_Init+0x30c>)
 8007e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e36:	4a5f      	ldr	r2, [pc, #380]	@ (8007fb4 <HAL_GPIO_Init+0x30c>)
 8007e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8007fb4 <HAL_GPIO_Init+0x30c>)
 8007e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8007fb8 <HAL_GPIO_Init+0x310>)
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	089b      	lsrs	r3, r3, #2
 8007e50:	3302      	adds	r3, #2
 8007e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	220f      	movs	r2, #15
 8007e62:	fa02 f303 	lsl.w	r3, r2, r3
 8007e66:	43db      	mvns	r3, r3
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a52      	ldr	r2, [pc, #328]	@ (8007fbc <HAL_GPIO_Init+0x314>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d02b      	beq.n	8007ece <HAL_GPIO_Init+0x226>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a51      	ldr	r2, [pc, #324]	@ (8007fc0 <HAL_GPIO_Init+0x318>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d025      	beq.n	8007eca <HAL_GPIO_Init+0x222>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a50      	ldr	r2, [pc, #320]	@ (8007fc4 <HAL_GPIO_Init+0x31c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d01f      	beq.n	8007ec6 <HAL_GPIO_Init+0x21e>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a4f      	ldr	r2, [pc, #316]	@ (8007fc8 <HAL_GPIO_Init+0x320>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d019      	beq.n	8007ec2 <HAL_GPIO_Init+0x21a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a4e      	ldr	r2, [pc, #312]	@ (8007fcc <HAL_GPIO_Init+0x324>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <HAL_GPIO_Init+0x216>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a4d      	ldr	r2, [pc, #308]	@ (8007fd0 <HAL_GPIO_Init+0x328>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00d      	beq.n	8007eba <HAL_GPIO_Init+0x212>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8007fd4 <HAL_GPIO_Init+0x32c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <HAL_GPIO_Init+0x20e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8007fd8 <HAL_GPIO_Init+0x330>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d101      	bne.n	8007eb2 <HAL_GPIO_Init+0x20a>
 8007eae:	2307      	movs	r3, #7
 8007eb0:	e00e      	b.n	8007ed0 <HAL_GPIO_Init+0x228>
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	e00c      	b.n	8007ed0 <HAL_GPIO_Init+0x228>
 8007eb6:	2306      	movs	r3, #6
 8007eb8:	e00a      	b.n	8007ed0 <HAL_GPIO_Init+0x228>
 8007eba:	2305      	movs	r3, #5
 8007ebc:	e008      	b.n	8007ed0 <HAL_GPIO_Init+0x228>
 8007ebe:	2304      	movs	r3, #4
 8007ec0:	e006      	b.n	8007ed0 <HAL_GPIO_Init+0x228>
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e004      	b.n	8007ed0 <HAL_GPIO_Init+0x228>
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e002      	b.n	8007ed0 <HAL_GPIO_Init+0x228>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e000      	b.n	8007ed0 <HAL_GPIO_Init+0x228>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	f002 0203 	and.w	r2, r2, #3
 8007ed6:	0092      	lsls	r2, r2, #2
 8007ed8:	4093      	lsls	r3, r2
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ee0:	4935      	ldr	r1, [pc, #212]	@ (8007fb8 <HAL_GPIO_Init+0x310>)
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	089b      	lsrs	r3, r3, #2
 8007ee6:	3302      	adds	r3, #2
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007eee:	4b3b      	ldr	r3, [pc, #236]	@ (8007fdc <HAL_GPIO_Init+0x334>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	4013      	ands	r3, r2
 8007efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f12:	4a32      	ldr	r2, [pc, #200]	@ (8007fdc <HAL_GPIO_Init+0x334>)
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f18:	4b30      	ldr	r3, [pc, #192]	@ (8007fdc <HAL_GPIO_Init+0x334>)
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4013      	ands	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f3c:	4a27      	ldr	r2, [pc, #156]	@ (8007fdc <HAL_GPIO_Init+0x334>)
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f42:	4b26      	ldr	r3, [pc, #152]	@ (8007fdc <HAL_GPIO_Init+0x334>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	43db      	mvns	r3, r3
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f66:	4a1d      	ldr	r2, [pc, #116]	@ (8007fdc <HAL_GPIO_Init+0x334>)
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fdc <HAL_GPIO_Init+0x334>)
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	43db      	mvns	r3, r3
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f90:	4a12      	ldr	r2, [pc, #72]	@ (8007fdc <HAL_GPIO_Init+0x334>)
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	2b0f      	cmp	r3, #15
 8007fa0:	f67f ae90 	bls.w	8007cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	3724      	adds	r7, #36	@ 0x24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	40023800 	.word	0x40023800
 8007fb8:	40013800 	.word	0x40013800
 8007fbc:	40020000 	.word	0x40020000
 8007fc0:	40020400 	.word	0x40020400
 8007fc4:	40020800 	.word	0x40020800
 8007fc8:	40020c00 	.word	0x40020c00
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	40021400 	.word	0x40021400
 8007fd4:	40021800 	.word	0x40021800
 8007fd8:	40021c00 	.word	0x40021c00
 8007fdc:	40013c00 	.word	0x40013c00

08007fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	887b      	ldrh	r3, [r7, #2]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	73fb      	strb	r3, [r7, #15]
 8007ffc:	e001      	b.n	8008002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008002:	7bfb      	ldrb	r3, [r7, #15]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	807b      	strh	r3, [r7, #2]
 800801c:	4613      	mov	r3, r2
 800801e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008020:	787b      	ldrb	r3, [r7, #1]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008026:	887a      	ldrh	r2, [r7, #2]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800802c:	e003      	b.n	8008036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800802e:	887b      	ldrh	r3, [r7, #2]
 8008030:	041a      	lsls	r2, r3, #16
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	619a      	str	r2, [r3, #24]
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008054:	887a      	ldrh	r2, [r7, #2]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4013      	ands	r3, r2
 800805a:	041a      	lsls	r2, r3, #16
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	43d9      	mvns	r1, r3
 8008060:	887b      	ldrh	r3, [r7, #2]
 8008062:	400b      	ands	r3, r1
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	619a      	str	r2, [r3, #24]
}
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e12b      	b.n	80082e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fa fd74 	bl	8002b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2224      	movs	r2, #36	@ 0x24
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0201 	bic.w	r2, r2, #1
 80080ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80080dc:	f001 fbfc 	bl	80098d8 <HAL_RCC_GetPCLK1Freq>
 80080e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	4a81      	ldr	r2, [pc, #516]	@ (80082ec <HAL_I2C_Init+0x274>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d807      	bhi.n	80080fc <HAL_I2C_Init+0x84>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4a80      	ldr	r2, [pc, #512]	@ (80082f0 <HAL_I2C_Init+0x278>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	bf94      	ite	ls
 80080f4:	2301      	movls	r3, #1
 80080f6:	2300      	movhi	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	e006      	b.n	800810a <HAL_I2C_Init+0x92>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4a7d      	ldr	r2, [pc, #500]	@ (80082f4 <HAL_I2C_Init+0x27c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	bf94      	ite	ls
 8008104:	2301      	movls	r3, #1
 8008106:	2300      	movhi	r3, #0
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e0e7      	b.n	80082e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4a78      	ldr	r2, [pc, #480]	@ (80082f8 <HAL_I2C_Init+0x280>)
 8008116:	fba2 2303 	umull	r2, r3, r2, r3
 800811a:	0c9b      	lsrs	r3, r3, #18
 800811c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	430a      	orrs	r2, r1
 8008130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6a1b      	ldr	r3, [r3, #32]
 8008138:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	4a6a      	ldr	r2, [pc, #424]	@ (80082ec <HAL_I2C_Init+0x274>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d802      	bhi.n	800814c <HAL_I2C_Init+0xd4>
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	3301      	adds	r3, #1
 800814a:	e009      	b.n	8008160 <HAL_I2C_Init+0xe8>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008152:	fb02 f303 	mul.w	r3, r2, r3
 8008156:	4a69      	ldr	r2, [pc, #420]	@ (80082fc <HAL_I2C_Init+0x284>)
 8008158:	fba2 2303 	umull	r2, r3, r2, r3
 800815c:	099b      	lsrs	r3, r3, #6
 800815e:	3301      	adds	r3, #1
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6812      	ldr	r2, [r2, #0]
 8008164:	430b      	orrs	r3, r1
 8008166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008172:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	495c      	ldr	r1, [pc, #368]	@ (80082ec <HAL_I2C_Init+0x274>)
 800817c:	428b      	cmp	r3, r1
 800817e:	d819      	bhi.n	80081b4 <HAL_I2C_Init+0x13c>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	1e59      	subs	r1, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	fbb1 f3f3 	udiv	r3, r1, r3
 800818e:	1c59      	adds	r1, r3, #1
 8008190:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008194:	400b      	ands	r3, r1
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <HAL_I2C_Init+0x138>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1e59      	subs	r1, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80081a8:	3301      	adds	r3, #1
 80081aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081ae:	e051      	b.n	8008254 <HAL_I2C_Init+0x1dc>
 80081b0:	2304      	movs	r3, #4
 80081b2:	e04f      	b.n	8008254 <HAL_I2C_Init+0x1dc>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d111      	bne.n	80081e0 <HAL_I2C_Init+0x168>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	1e58      	subs	r0, r3, #1
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6859      	ldr	r1, [r3, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	440b      	add	r3, r1
 80081ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80081ce:	3301      	adds	r3, #1
 80081d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bf0c      	ite	eq
 80081d8:	2301      	moveq	r3, #1
 80081da:	2300      	movne	r3, #0
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	e012      	b.n	8008206 <HAL_I2C_Init+0x18e>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	1e58      	subs	r0, r3, #1
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6859      	ldr	r1, [r3, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	0099      	lsls	r1, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80081f6:	3301      	adds	r3, #1
 80081f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	bf0c      	ite	eq
 8008200:	2301      	moveq	r3, #1
 8008202:	2300      	movne	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <HAL_I2C_Init+0x196>
 800820a:	2301      	movs	r3, #1
 800820c:	e022      	b.n	8008254 <HAL_I2C_Init+0x1dc>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10e      	bne.n	8008234 <HAL_I2C_Init+0x1bc>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	1e58      	subs	r0, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6859      	ldr	r1, [r3, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	440b      	add	r3, r1
 8008224:	fbb0 f3f3 	udiv	r3, r0, r3
 8008228:	3301      	adds	r3, #1
 800822a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800822e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008232:	e00f      	b.n	8008254 <HAL_I2C_Init+0x1dc>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	1e58      	subs	r0, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6859      	ldr	r1, [r3, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	0099      	lsls	r1, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	fbb0 f3f3 	udiv	r3, r0, r3
 800824a:	3301      	adds	r3, #1
 800824c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008250:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	6809      	ldr	r1, [r1, #0]
 8008258:	4313      	orrs	r3, r2
 800825a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69da      	ldr	r2, [r3, #28]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	431a      	orrs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008282:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6911      	ldr	r1, [r2, #16]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	68d2      	ldr	r2, [r2, #12]
 800828e:	4311      	orrs	r1, r2
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	430b      	orrs	r3, r1
 8008296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695a      	ldr	r2, [r3, #20]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f042 0201 	orr.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	000186a0 	.word	0x000186a0
 80082f0:	001e847f 	.word	0x001e847f
 80082f4:	003d08ff 	.word	0x003d08ff
 80082f8:	431bde83 	.word	0x431bde83
 80082fc:	10624dd3 	.word	0x10624dd3

08008300 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	af02      	add	r7, sp, #8
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	4608      	mov	r0, r1
 800830a:	4611      	mov	r1, r2
 800830c:	461a      	mov	r2, r3
 800830e:	4603      	mov	r3, r0
 8008310:	817b      	strh	r3, [r7, #10]
 8008312:	460b      	mov	r3, r1
 8008314:	813b      	strh	r3, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800831a:	f7fe fda5 	bl	8006e68 <HAL_GetTick>
 800831e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b20      	cmp	r3, #32
 800832a:	f040 80d9 	bne.w	80084e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	2319      	movs	r3, #25
 8008334:	2201      	movs	r2, #1
 8008336:	496d      	ldr	r1, [pc, #436]	@ (80084ec <HAL_I2C_Mem_Write+0x1ec>)
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fc7f 	bl	8008c3c <I2C_WaitOnFlagUntilTimeout>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008344:	2302      	movs	r3, #2
 8008346:	e0cc      	b.n	80084e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <HAL_I2C_Mem_Write+0x56>
 8008352:	2302      	movs	r3, #2
 8008354:	e0c5      	b.n	80084e2 <HAL_I2C_Mem_Write+0x1e2>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b01      	cmp	r3, #1
 800836a:	d007      	beq.n	800837c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800838a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2221      	movs	r2, #33	@ 0x21
 8008390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2240      	movs	r2, #64	@ 0x40
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a3a      	ldr	r2, [r7, #32]
 80083a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80083ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4a4d      	ldr	r2, [pc, #308]	@ (80084f0 <HAL_I2C_Mem_Write+0x1f0>)
 80083bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083be:	88f8      	ldrh	r0, [r7, #6]
 80083c0:	893a      	ldrh	r2, [r7, #8]
 80083c2:	8979      	ldrh	r1, [r7, #10]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	4603      	mov	r3, r0
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 fab6 	bl	8008940 <I2C_RequestMemoryWrite>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d052      	beq.n	8008480 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e081      	b.n	80084e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fd00 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00d      	beq.n	800840a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d107      	bne.n	8008406 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008404:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e06b      	b.n	80084e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840e:	781a      	ldrb	r2, [r3, #0]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008430:	b29b      	uxth	r3, r3
 8008432:	3b01      	subs	r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b04      	cmp	r3, #4
 8008446:	d11b      	bne.n	8008480 <HAL_I2C_Mem_Write+0x180>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800844c:	2b00      	cmp	r3, #0
 800844e:	d017      	beq.n	8008480 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	781a      	ldrb	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800846a:	3b01      	subs	r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008476:	b29b      	uxth	r3, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1aa      	bne.n	80083de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fcec 	bl	8008e6a <I2C_WaitOnBTFFlagUntilTimeout>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00d      	beq.n	80084b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849c:	2b04      	cmp	r3, #4
 800849e:	d107      	bne.n	80084b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e016      	b.n	80084e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	e000      	b.n	80084e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80084e0:	2302      	movs	r3, #2
  }
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	00100002 	.word	0x00100002
 80084f0:	ffff0000 	.word	0xffff0000

080084f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08c      	sub	sp, #48	@ 0x30
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	4608      	mov	r0, r1
 80084fe:	4611      	mov	r1, r2
 8008500:	461a      	mov	r2, r3
 8008502:	4603      	mov	r3, r0
 8008504:	817b      	strh	r3, [r7, #10]
 8008506:	460b      	mov	r3, r1
 8008508:	813b      	strh	r3, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800850e:	f7fe fcab 	bl	8006e68 <HAL_GetTick>
 8008512:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b20      	cmp	r3, #32
 800851e:	f040 8208 	bne.w	8008932 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	2319      	movs	r3, #25
 8008528:	2201      	movs	r2, #1
 800852a:	497b      	ldr	r1, [pc, #492]	@ (8008718 <HAL_I2C_Mem_Read+0x224>)
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 fb85 	bl	8008c3c <I2C_WaitOnFlagUntilTimeout>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008538:	2302      	movs	r3, #2
 800853a:	e1fb      	b.n	8008934 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008542:	2b01      	cmp	r3, #1
 8008544:	d101      	bne.n	800854a <HAL_I2C_Mem_Read+0x56>
 8008546:	2302      	movs	r3, #2
 8008548:	e1f4      	b.n	8008934 <HAL_I2C_Mem_Read+0x440>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b01      	cmp	r3, #1
 800855e:	d007      	beq.n	8008570 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0201 	orr.w	r2, r2, #1
 800856e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800857e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2222      	movs	r2, #34	@ 0x22
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2240      	movs	r2, #64	@ 0x40
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80085a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a5b      	ldr	r2, [pc, #364]	@ (800871c <HAL_I2C_Mem_Read+0x228>)
 80085b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085b2:	88f8      	ldrh	r0, [r7, #6]
 80085b4:	893a      	ldrh	r2, [r7, #8]
 80085b6:	8979      	ldrh	r1, [r7, #10]
 80085b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	4603      	mov	r3, r0
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 fa52 	bl	8008a6c <I2C_RequestMemoryRead>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e1b0      	b.n	8008934 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d113      	bne.n	8008602 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085da:	2300      	movs	r3, #0
 80085dc:	623b      	str	r3, [r7, #32]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	623b      	str	r3, [r7, #32]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	623b      	str	r3, [r7, #32]
 80085ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	e184      	b.n	800890c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008606:	2b01      	cmp	r3, #1
 8008608:	d11b      	bne.n	8008642 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800861a:	2300      	movs	r3, #0
 800861c:	61fb      	str	r3, [r7, #28]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	61fb      	str	r3, [r7, #28]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	61fb      	str	r3, [r7, #28]
 800862e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	e164      	b.n	800890c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008646:	2b02      	cmp	r3, #2
 8008648:	d11b      	bne.n	8008682 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008658:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008668:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800866a:	2300      	movs	r3, #0
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	e144      	b.n	800890c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	617b      	str	r3, [r7, #20]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008698:	e138      	b.n	800890c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800869e:	2b03      	cmp	r3, #3
 80086a0:	f200 80f1 	bhi.w	8008886 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d123      	bne.n	80086f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 fc1b 	bl	8008eec <I2C_WaitOnRXNEFlagUntilTimeout>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e139      	b.n	8008934 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691a      	ldr	r2, [r3, #16]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ca:	b2d2      	uxtb	r2, r2
 80086cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086f2:	e10b      	b.n	800890c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d14e      	bne.n	800879a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80086fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008702:	2200      	movs	r2, #0
 8008704:	4906      	ldr	r1, [pc, #24]	@ (8008720 <HAL_I2C_Mem_Read+0x22c>)
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fa98 	bl	8008c3c <I2C_WaitOnFlagUntilTimeout>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d008      	beq.n	8008724 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e10e      	b.n	8008934 <HAL_I2C_Mem_Read+0x440>
 8008716:	bf00      	nop
 8008718:	00100002 	.word	0x00100002
 800871c:	ffff0000 	.word	0xffff0000
 8008720:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	691a      	ldr	r2, [r3, #16]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008750:	3b01      	subs	r3, #1
 8008752:	b29a      	uxth	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800875c:	b29b      	uxth	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008782:	3b01      	subs	r3, #1
 8008784:	b29a      	uxth	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008798:	e0b8      	b.n	800890c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a0:	2200      	movs	r2, #0
 80087a2:	4966      	ldr	r1, [pc, #408]	@ (800893c <HAL_I2C_Mem_Read+0x448>)
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fa49 	bl	8008c3c <I2C_WaitOnFlagUntilTimeout>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e0bf      	b.n	8008934 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	2200      	movs	r2, #0
 80087fe:	494f      	ldr	r1, [pc, #316]	@ (800893c <HAL_I2C_Mem_Read+0x448>)
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 fa1b 	bl	8008c3c <I2C_WaitOnFlagUntilTimeout>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e091      	b.n	8008934 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800881e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	691a      	ldr	r2, [r3, #16]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800883c:	3b01      	subs	r3, #1
 800883e:	b29a      	uxth	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	b29a      	uxth	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885c:	b2d2      	uxtb	r2, r2
 800885e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800887a:	b29b      	uxth	r3, r3
 800887c:	3b01      	subs	r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008884:	e042      	b.n	800890c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008888:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 fb2e 	bl	8008eec <I2C_WaitOnRXNEFlagUntilTimeout>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e04c      	b.n	8008934 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	691a      	ldr	r2, [r3, #16]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a4:	b2d2      	uxtb	r2, r2
 80088a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	f003 0304 	and.w	r3, r3, #4
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d118      	bne.n	800890c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e4:	b2d2      	uxtb	r2, r2
 80088e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008902:	b29b      	uxth	r3, r3
 8008904:	3b01      	subs	r3, #1
 8008906:	b29a      	uxth	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008910:	2b00      	cmp	r3, #0
 8008912:	f47f aec2 	bne.w	800869a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2220      	movs	r2, #32
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	e000      	b.n	8008934 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008932:	2302      	movs	r3, #2
  }
}
 8008934:	4618      	mov	r0, r3
 8008936:	3728      	adds	r7, #40	@ 0x28
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	00010004 	.word	0x00010004

08008940 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af02      	add	r7, sp, #8
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	4608      	mov	r0, r1
 800894a:	4611      	mov	r1, r2
 800894c:	461a      	mov	r2, r3
 800894e:	4603      	mov	r3, r0
 8008950:	817b      	strh	r3, [r7, #10]
 8008952:	460b      	mov	r3, r1
 8008954:	813b      	strh	r3, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	2200      	movs	r2, #0
 8008972:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f960 	bl	8008c3c <I2C_WaitOnFlagUntilTimeout>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00d      	beq.n	800899e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800898c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008990:	d103      	bne.n	800899a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008998:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e05f      	b.n	8008a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800899e:	897b      	ldrh	r3, [r7, #10]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80089ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	6a3a      	ldr	r2, [r7, #32]
 80089b2:	492d      	ldr	r1, [pc, #180]	@ (8008a68 <I2C_RequestMemoryWrite+0x128>)
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 f998 	bl	8008cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e04c      	b.n	8008a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089dc:	6a39      	ldr	r1, [r7, #32]
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fa02 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00d      	beq.n	8008a06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d107      	bne.n	8008a02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e02b      	b.n	8008a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a06:	88fb      	ldrh	r3, [r7, #6]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d105      	bne.n	8008a18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a0c:	893b      	ldrh	r3, [r7, #8]
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	611a      	str	r2, [r3, #16]
 8008a16:	e021      	b.n	8008a5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a18:	893b      	ldrh	r3, [r7, #8]
 8008a1a:	0a1b      	lsrs	r3, r3, #8
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a28:	6a39      	ldr	r1, [r7, #32]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 f9dc 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00d      	beq.n	8008a52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d107      	bne.n	8008a4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e005      	b.n	8008a5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a52:	893b      	ldrh	r3, [r7, #8]
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	00010002 	.word	0x00010002

08008a6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af02      	add	r7, sp, #8
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	4608      	mov	r0, r1
 8008a76:	4611      	mov	r1, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	817b      	strh	r3, [r7, #10]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	813b      	strh	r3, [r7, #8]
 8008a82:	4613      	mov	r3, r2
 8008a84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008a94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008aa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 f8c2 	bl	8008c3c <I2C_WaitOnFlagUntilTimeout>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00d      	beq.n	8008ada <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008acc:	d103      	bne.n	8008ad6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ad4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e0aa      	b.n	8008c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008ada:	897b      	ldrh	r3, [r7, #10]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	461a      	mov	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008ae8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	6a3a      	ldr	r2, [r7, #32]
 8008aee:	4952      	ldr	r1, [pc, #328]	@ (8008c38 <I2C_RequestMemoryRead+0x1cc>)
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 f8fa 	bl	8008cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e097      	b.n	8008c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b18:	6a39      	ldr	r1, [r7, #32]
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f964 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00d      	beq.n	8008b42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d107      	bne.n	8008b3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e076      	b.n	8008c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b42:	88fb      	ldrh	r3, [r7, #6]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d105      	bne.n	8008b54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b48:	893b      	ldrh	r3, [r7, #8]
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	611a      	str	r2, [r3, #16]
 8008b52:	e021      	b.n	8008b98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b54:	893b      	ldrh	r3, [r7, #8]
 8008b56:	0a1b      	lsrs	r3, r3, #8
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b64:	6a39      	ldr	r1, [r7, #32]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 f93e 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00d      	beq.n	8008b8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d107      	bne.n	8008b8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e050      	b.n	8008c30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b8e:	893b      	ldrh	r3, [r7, #8]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b9a:	6a39      	ldr	r1, [r7, #32]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f923 	bl	8008de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00d      	beq.n	8008bc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	d107      	bne.n	8008bc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e035      	b.n	8008c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f82b 	bl	8008c3c <I2C_WaitOnFlagUntilTimeout>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00d      	beq.n	8008c08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bfa:	d103      	bne.n	8008c04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e013      	b.n	8008c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c08:	897b      	ldrh	r3, [r7, #10]
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	f043 0301 	orr.w	r3, r3, #1
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	6a3a      	ldr	r2, [r7, #32]
 8008c1c:	4906      	ldr	r1, [pc, #24]	@ (8008c38 <I2C_RequestMemoryRead+0x1cc>)
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 f863 	bl	8008cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	00010002 	.word	0x00010002

08008c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c4c:	e025      	b.n	8008c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c54:	d021      	beq.n	8008c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c56:	f7fe f907 	bl	8006e68 <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d302      	bcc.n	8008c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d116      	bne.n	8008c9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c86:	f043 0220 	orr.w	r2, r3, #32
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e023      	b.n	8008ce2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	0c1b      	lsrs	r3, r3, #16
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d10d      	bne.n	8008cc0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	43da      	mvns	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	bf0c      	ite	eq
 8008cb6:	2301      	moveq	r3, #1
 8008cb8:	2300      	movne	r3, #0
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	e00c      	b.n	8008cda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	43da      	mvns	r2, r3
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bf0c      	ite	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	2300      	movne	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d0b6      	beq.n	8008c4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	607a      	str	r2, [r7, #4]
 8008cf6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cf8:	e051      	b.n	8008d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d08:	d123      	bne.n	8008d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3e:	f043 0204 	orr.w	r2, r3, #4
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e046      	b.n	8008de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d021      	beq.n	8008d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d5a:	f7fe f885 	bl	8006e68 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d302      	bcc.n	8008d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d116      	bne.n	8008d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8a:	f043 0220 	orr.w	r2, r3, #32
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e020      	b.n	8008de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	0c1b      	lsrs	r3, r3, #16
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d10c      	bne.n	8008dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	43da      	mvns	r2, r3
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4013      	ands	r3, r2
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bf14      	ite	ne
 8008dba:	2301      	movne	r3, #1
 8008dbc:	2300      	moveq	r3, #0
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	e00b      	b.n	8008dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	43da      	mvns	r2, r3
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	4013      	ands	r3, r2
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	bf14      	ite	ne
 8008dd4:	2301      	movne	r3, #1
 8008dd6:	2300      	moveq	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d18d      	bne.n	8008cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008df4:	e02d      	b.n	8008e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 f8ce 	bl	8008f98 <I2C_IsAcknowledgeFailed>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e02d      	b.n	8008e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d021      	beq.n	8008e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e0e:	f7fe f82b 	bl	8006e68 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d302      	bcc.n	8008e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d116      	bne.n	8008e52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3e:	f043 0220 	orr.w	r2, r3, #32
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e007      	b.n	8008e62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e5c:	2b80      	cmp	r3, #128	@ 0x80
 8008e5e:	d1ca      	bne.n	8008df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	60f8      	str	r0, [r7, #12]
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e76:	e02d      	b.n	8008ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f88d 	bl	8008f98 <I2C_IsAcknowledgeFailed>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e02d      	b.n	8008ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8e:	d021      	beq.n	8008ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e90:	f7fd ffea 	bl	8006e68 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d302      	bcc.n	8008ea6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d116      	bne.n	8008ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec0:	f043 0220 	orr.w	r2, r3, #32
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e007      	b.n	8008ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	f003 0304 	and.w	r3, r3, #4
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d1ca      	bne.n	8008e78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ef8:	e042      	b.n	8008f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b10      	cmp	r3, #16
 8008f06:	d119      	bne.n	8008f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f06f 0210 	mvn.w	r2, #16
 8008f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e029      	b.n	8008f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f3c:	f7fd ff94 	bl	8006e68 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d302      	bcc.n	8008f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d116      	bne.n	8008f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6c:	f043 0220 	orr.w	r2, r3, #32
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e007      	b.n	8008f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8a:	2b40      	cmp	r3, #64	@ 0x40
 8008f8c:	d1b5      	bne.n	8008efa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fae:	d11b      	bne.n	8008fe8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008fb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd4:	f043 0204 	orr.w	r2, r3, #4
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e000      	b.n	8008fea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
	...

08008ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e267      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d075      	beq.n	8009102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009016:	4b88      	ldr	r3, [pc, #544]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f003 030c 	and.w	r3, r3, #12
 800901e:	2b04      	cmp	r3, #4
 8009020:	d00c      	beq.n	800903c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009022:	4b85      	ldr	r3, [pc, #532]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800902a:	2b08      	cmp	r3, #8
 800902c:	d112      	bne.n	8009054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800902e:	4b82      	ldr	r3, [pc, #520]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800903a:	d10b      	bne.n	8009054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800903c:	4b7e      	ldr	r3, [pc, #504]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d05b      	beq.n	8009100 <HAL_RCC_OscConfig+0x108>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d157      	bne.n	8009100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e242      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800905c:	d106      	bne.n	800906c <HAL_RCC_OscConfig+0x74>
 800905e:	4b76      	ldr	r3, [pc, #472]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a75      	ldr	r2, [pc, #468]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	e01d      	b.n	80090a8 <HAL_RCC_OscConfig+0xb0>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009074:	d10c      	bne.n	8009090 <HAL_RCC_OscConfig+0x98>
 8009076:	4b70      	ldr	r3, [pc, #448]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a6f      	ldr	r2, [pc, #444]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 800907c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	4b6d      	ldr	r3, [pc, #436]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a6c      	ldr	r2, [pc, #432]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	e00b      	b.n	80090a8 <HAL_RCC_OscConfig+0xb0>
 8009090:	4b69      	ldr	r3, [pc, #420]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a68      	ldr	r2, [pc, #416]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	4b66      	ldr	r3, [pc, #408]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a65      	ldr	r2, [pc, #404]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 80090a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d013      	beq.n	80090d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b0:	f7fd feda 	bl	8006e68 <HAL_GetTick>
 80090b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090b6:	e008      	b.n	80090ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090b8:	f7fd fed6 	bl	8006e68 <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	2b64      	cmp	r3, #100	@ 0x64
 80090c4:	d901      	bls.n	80090ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e207      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ca:	4b5b      	ldr	r3, [pc, #364]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0f0      	beq.n	80090b8 <HAL_RCC_OscConfig+0xc0>
 80090d6:	e014      	b.n	8009102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090d8:	f7fd fec6 	bl	8006e68 <HAL_GetTick>
 80090dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090e0:	f7fd fec2 	bl	8006e68 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b64      	cmp	r3, #100	@ 0x64
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e1f3      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090f2:	4b51      	ldr	r3, [pc, #324]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1f0      	bne.n	80090e0 <HAL_RCC_OscConfig+0xe8>
 80090fe:	e000      	b.n	8009102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d063      	beq.n	80091d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800910e:	4b4a      	ldr	r3, [pc, #296]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 030c 	and.w	r3, r3, #12
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00b      	beq.n	8009132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800911a:	4b47      	ldr	r3, [pc, #284]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009122:	2b08      	cmp	r3, #8
 8009124:	d11c      	bne.n	8009160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009126:	4b44      	ldr	r3, [pc, #272]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d116      	bne.n	8009160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009132:	4b41      	ldr	r3, [pc, #260]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_RCC_OscConfig+0x152>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d001      	beq.n	800914a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e1c7      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800914a:	4b3b      	ldr	r3, [pc, #236]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	4937      	ldr	r1, [pc, #220]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 800915a:	4313      	orrs	r3, r2
 800915c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800915e:	e03a      	b.n	80091d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d020      	beq.n	80091aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009168:	4b34      	ldr	r3, [pc, #208]	@ (800923c <HAL_RCC_OscConfig+0x244>)
 800916a:	2201      	movs	r2, #1
 800916c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800916e:	f7fd fe7b 	bl	8006e68 <HAL_GetTick>
 8009172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009174:	e008      	b.n	8009188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009176:	f7fd fe77 	bl	8006e68 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e1a8      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009188:	4b2b      	ldr	r3, [pc, #172]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0f0      	beq.n	8009176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009194:	4b28      	ldr	r3, [pc, #160]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	4925      	ldr	r1, [pc, #148]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	600b      	str	r3, [r1, #0]
 80091a8:	e015      	b.n	80091d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091aa:	4b24      	ldr	r3, [pc, #144]	@ (800923c <HAL_RCC_OscConfig+0x244>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b0:	f7fd fe5a 	bl	8006e68 <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091b8:	f7fd fe56 	bl	8006e68 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e187      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1f0      	bne.n	80091b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0308 	and.w	r3, r3, #8
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d036      	beq.n	8009250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d016      	beq.n	8009218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091ea:	4b15      	ldr	r3, [pc, #84]	@ (8009240 <HAL_RCC_OscConfig+0x248>)
 80091ec:	2201      	movs	r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091f0:	f7fd fe3a 	bl	8006e68 <HAL_GetTick>
 80091f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091f6:	e008      	b.n	800920a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091f8:	f7fd fe36 	bl	8006e68 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	2b02      	cmp	r3, #2
 8009204:	d901      	bls.n	800920a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e167      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800920a:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <HAL_RCC_OscConfig+0x240>)
 800920c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0f0      	beq.n	80091f8 <HAL_RCC_OscConfig+0x200>
 8009216:	e01b      	b.n	8009250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009218:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <HAL_RCC_OscConfig+0x248>)
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800921e:	f7fd fe23 	bl	8006e68 <HAL_GetTick>
 8009222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009224:	e00e      	b.n	8009244 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009226:	f7fd fe1f 	bl	8006e68 <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b02      	cmp	r3, #2
 8009232:	d907      	bls.n	8009244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e150      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
 8009238:	40023800 	.word	0x40023800
 800923c:	42470000 	.word	0x42470000
 8009240:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009244:	4b88      	ldr	r3, [pc, #544]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1ea      	bne.n	8009226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 8097 	beq.w	800938c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800925e:	2300      	movs	r3, #0
 8009260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009262:	4b81      	ldr	r3, [pc, #516]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10f      	bne.n	800928e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]
 8009272:	4b7d      	ldr	r3, [pc, #500]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009276:	4a7c      	ldr	r2, [pc, #496]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800927c:	6413      	str	r3, [r2, #64]	@ 0x40
 800927e:	4b7a      	ldr	r3, [pc, #488]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009286:	60bb      	str	r3, [r7, #8]
 8009288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800928a:	2301      	movs	r3, #1
 800928c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800928e:	4b77      	ldr	r3, [pc, #476]	@ (800946c <HAL_RCC_OscConfig+0x474>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009296:	2b00      	cmp	r3, #0
 8009298:	d118      	bne.n	80092cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800929a:	4b74      	ldr	r3, [pc, #464]	@ (800946c <HAL_RCC_OscConfig+0x474>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a73      	ldr	r2, [pc, #460]	@ (800946c <HAL_RCC_OscConfig+0x474>)
 80092a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092a6:	f7fd fddf 	bl	8006e68 <HAL_GetTick>
 80092aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092ac:	e008      	b.n	80092c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092ae:	f7fd fddb 	bl	8006e68 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d901      	bls.n	80092c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e10c      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092c0:	4b6a      	ldr	r3, [pc, #424]	@ (800946c <HAL_RCC_OscConfig+0x474>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d0f0      	beq.n	80092ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d106      	bne.n	80092e2 <HAL_RCC_OscConfig+0x2ea>
 80092d4:	4b64      	ldr	r3, [pc, #400]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d8:	4a63      	ldr	r2, [pc, #396]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 80092da:	f043 0301 	orr.w	r3, r3, #1
 80092de:	6713      	str	r3, [r2, #112]	@ 0x70
 80092e0:	e01c      	b.n	800931c <HAL_RCC_OscConfig+0x324>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	2b05      	cmp	r3, #5
 80092e8:	d10c      	bne.n	8009304 <HAL_RCC_OscConfig+0x30c>
 80092ea:	4b5f      	ldr	r3, [pc, #380]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 80092ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ee:	4a5e      	ldr	r2, [pc, #376]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 80092f0:	f043 0304 	orr.w	r3, r3, #4
 80092f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80092f6:	4b5c      	ldr	r3, [pc, #368]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 80092f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092fa:	4a5b      	ldr	r2, [pc, #364]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 80092fc:	f043 0301 	orr.w	r3, r3, #1
 8009300:	6713      	str	r3, [r2, #112]	@ 0x70
 8009302:	e00b      	b.n	800931c <HAL_RCC_OscConfig+0x324>
 8009304:	4b58      	ldr	r3, [pc, #352]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009308:	4a57      	ldr	r2, [pc, #348]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 800930a:	f023 0301 	bic.w	r3, r3, #1
 800930e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009310:	4b55      	ldr	r3, [pc, #340]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009314:	4a54      	ldr	r2, [pc, #336]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009316:	f023 0304 	bic.w	r3, r3, #4
 800931a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d015      	beq.n	8009350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009324:	f7fd fda0 	bl	8006e68 <HAL_GetTick>
 8009328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800932a:	e00a      	b.n	8009342 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800932c:	f7fd fd9c 	bl	8006e68 <HAL_GetTick>
 8009330:	4602      	mov	r2, r0
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800933a:	4293      	cmp	r3, r2
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e0cb      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009342:	4b49      	ldr	r3, [pc, #292]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0ee      	beq.n	800932c <HAL_RCC_OscConfig+0x334>
 800934e:	e014      	b.n	800937a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009350:	f7fd fd8a 	bl	8006e68 <HAL_GetTick>
 8009354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009356:	e00a      	b.n	800936e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009358:	f7fd fd86 	bl	8006e68 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009366:	4293      	cmp	r3, r2
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e0b5      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800936e:	4b3e      	ldr	r3, [pc, #248]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1ee      	bne.n	8009358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d105      	bne.n	800938c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009380:	4b39      	ldr	r3, [pc, #228]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009384:	4a38      	ldr	r2, [pc, #224]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800938a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 80a1 	beq.w	80094d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009396:	4b34      	ldr	r3, [pc, #208]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f003 030c 	and.w	r3, r3, #12
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d05c      	beq.n	800945c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d141      	bne.n	800942e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093aa:	4b31      	ldr	r3, [pc, #196]	@ (8009470 <HAL_RCC_OscConfig+0x478>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b0:	f7fd fd5a 	bl	8006e68 <HAL_GetTick>
 80093b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093b6:	e008      	b.n	80093ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093b8:	f7fd fd56 	bl	8006e68 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e087      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ca:	4b27      	ldr	r3, [pc, #156]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1f0      	bne.n	80093b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	69da      	ldr	r2, [r3, #28]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	431a      	orrs	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e4:	019b      	lsls	r3, r3, #6
 80093e6:	431a      	orrs	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ec:	085b      	lsrs	r3, r3, #1
 80093ee:	3b01      	subs	r3, #1
 80093f0:	041b      	lsls	r3, r3, #16
 80093f2:	431a      	orrs	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f8:	061b      	lsls	r3, r3, #24
 80093fa:	491b      	ldr	r1, [pc, #108]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009400:	4b1b      	ldr	r3, [pc, #108]	@ (8009470 <HAL_RCC_OscConfig+0x478>)
 8009402:	2201      	movs	r2, #1
 8009404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009406:	f7fd fd2f 	bl	8006e68 <HAL_GetTick>
 800940a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800940c:	e008      	b.n	8009420 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800940e:	f7fd fd2b 	bl	8006e68 <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	2b02      	cmp	r3, #2
 800941a:	d901      	bls.n	8009420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e05c      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009420:	4b11      	ldr	r3, [pc, #68]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d0f0      	beq.n	800940e <HAL_RCC_OscConfig+0x416>
 800942c:	e054      	b.n	80094d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800942e:	4b10      	ldr	r3, [pc, #64]	@ (8009470 <HAL_RCC_OscConfig+0x478>)
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009434:	f7fd fd18 	bl	8006e68 <HAL_GetTick>
 8009438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800943a:	e008      	b.n	800944e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800943c:	f7fd fd14 	bl	8006e68 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b02      	cmp	r3, #2
 8009448:	d901      	bls.n	800944e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e045      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800944e:	4b06      	ldr	r3, [pc, #24]	@ (8009468 <HAL_RCC_OscConfig+0x470>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1f0      	bne.n	800943c <HAL_RCC_OscConfig+0x444>
 800945a:	e03d      	b.n	80094d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d107      	bne.n	8009474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e038      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
 8009468:	40023800 	.word	0x40023800
 800946c:	40007000 	.word	0x40007000
 8009470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009474:	4b1b      	ldr	r3, [pc, #108]	@ (80094e4 <HAL_RCC_OscConfig+0x4ec>)
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d028      	beq.n	80094d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800948c:	429a      	cmp	r2, r3
 800948e:	d121      	bne.n	80094d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800949a:	429a      	cmp	r2, r3
 800949c:	d11a      	bne.n	80094d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80094a4:	4013      	ands	r3, r2
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80094aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d111      	bne.n	80094d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	3b01      	subs	r3, #1
 80094be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d107      	bne.n	80094d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d001      	beq.n	80094d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	e000      	b.n	80094da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	40023800 	.word	0x40023800

080094e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0cc      	b.n	8009696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094fc:	4b68      	ldr	r3, [pc, #416]	@ (80096a0 <HAL_RCC_ClockConfig+0x1b8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d90c      	bls.n	8009524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800950a:	4b65      	ldr	r3, [pc, #404]	@ (80096a0 <HAL_RCC_ClockConfig+0x1b8>)
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009512:	4b63      	ldr	r3, [pc, #396]	@ (80096a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	429a      	cmp	r2, r3
 800951e:	d001      	beq.n	8009524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e0b8      	b.n	8009696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d020      	beq.n	8009572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d005      	beq.n	8009548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800953c:	4b59      	ldr	r3, [pc, #356]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	4a58      	ldr	r2, [pc, #352]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0308 	and.w	r3, r3, #8
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009554:	4b53      	ldr	r3, [pc, #332]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	4a52      	ldr	r2, [pc, #328]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 800955a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800955e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009560:	4b50      	ldr	r3, [pc, #320]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	494d      	ldr	r1, [pc, #308]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 800956e:	4313      	orrs	r3, r2
 8009570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d044      	beq.n	8009608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d107      	bne.n	8009596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009586:	4b47      	ldr	r3, [pc, #284]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d119      	bne.n	80095c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e07f      	b.n	8009696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	2b02      	cmp	r3, #2
 800959c:	d003      	beq.n	80095a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d107      	bne.n	80095b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095a6:	4b3f      	ldr	r3, [pc, #252]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d109      	bne.n	80095c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e06f      	b.n	8009696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095b6:	4b3b      	ldr	r3, [pc, #236]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e067      	b.n	8009696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095c6:	4b37      	ldr	r3, [pc, #220]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f023 0203 	bic.w	r2, r3, #3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	4934      	ldr	r1, [pc, #208]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80095d8:	f7fd fc46 	bl	8006e68 <HAL_GetTick>
 80095dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095de:	e00a      	b.n	80095f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095e0:	f7fd fc42 	bl	8006e68 <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d901      	bls.n	80095f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e04f      	b.n	8009696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095f6:	4b2b      	ldr	r3, [pc, #172]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f003 020c 	and.w	r2, r3, #12
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	429a      	cmp	r2, r3
 8009606:	d1eb      	bne.n	80095e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009608:	4b25      	ldr	r3, [pc, #148]	@ (80096a0 <HAL_RCC_ClockConfig+0x1b8>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d20c      	bcs.n	8009630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009616:	4b22      	ldr	r3, [pc, #136]	@ (80096a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	b2d2      	uxtb	r2, r2
 800961c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800961e:	4b20      	ldr	r3, [pc, #128]	@ (80096a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d001      	beq.n	8009630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e032      	b.n	8009696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d008      	beq.n	800964e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800963c:	4b19      	ldr	r3, [pc, #100]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4916      	ldr	r1, [pc, #88]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 800964a:	4313      	orrs	r3, r2
 800964c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0308 	and.w	r3, r3, #8
 8009656:	2b00      	cmp	r3, #0
 8009658:	d009      	beq.n	800966e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800965a:	4b12      	ldr	r3, [pc, #72]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	490e      	ldr	r1, [pc, #56]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 800966a:	4313      	orrs	r3, r2
 800966c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800966e:	f000 f821 	bl	80096b4 <HAL_RCC_GetSysClockFreq>
 8009672:	4602      	mov	r2, r0
 8009674:	4b0b      	ldr	r3, [pc, #44]	@ (80096a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	091b      	lsrs	r3, r3, #4
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	490a      	ldr	r1, [pc, #40]	@ (80096a8 <HAL_RCC_ClockConfig+0x1c0>)
 8009680:	5ccb      	ldrb	r3, [r1, r3]
 8009682:	fa22 f303 	lsr.w	r3, r2, r3
 8009686:	4a09      	ldr	r2, [pc, #36]	@ (80096ac <HAL_RCC_ClockConfig+0x1c4>)
 8009688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800968a:	4b09      	ldr	r3, [pc, #36]	@ (80096b0 <HAL_RCC_ClockConfig+0x1c8>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f7fd fba6 	bl	8006de0 <HAL_InitTick>

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	40023c00 	.word	0x40023c00
 80096a4:	40023800 	.word	0x40023800
 80096a8:	08010f74 	.word	0x08010f74
 80096ac:	20000010 	.word	0x20000010
 80096b0:	2000004c 	.word	0x2000004c

080096b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096b8:	b094      	sub	sp, #80	@ 0x50
 80096ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	647b      	str	r3, [r7, #68]	@ 0x44
 80096c0:	2300      	movs	r3, #0
 80096c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096c4:	2300      	movs	r3, #0
 80096c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80096c8:	2300      	movs	r3, #0
 80096ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096cc:	4b79      	ldr	r3, [pc, #484]	@ (80098b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f003 030c 	and.w	r3, r3, #12
 80096d4:	2b08      	cmp	r3, #8
 80096d6:	d00d      	beq.n	80096f4 <HAL_RCC_GetSysClockFreq+0x40>
 80096d8:	2b08      	cmp	r3, #8
 80096da:	f200 80e1 	bhi.w	80098a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_RCC_GetSysClockFreq+0x34>
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d003      	beq.n	80096ee <HAL_RCC_GetSysClockFreq+0x3a>
 80096e6:	e0db      	b.n	80098a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80096e8:	4b73      	ldr	r3, [pc, #460]	@ (80098b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80096ea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80096ec:	e0db      	b.n	80098a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80096ee:	4b73      	ldr	r3, [pc, #460]	@ (80098bc <HAL_RCC_GetSysClockFreq+0x208>)
 80096f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80096f2:	e0d8      	b.n	80098a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80096f4:	4b6f      	ldr	r3, [pc, #444]	@ (80098b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096fe:	4b6d      	ldr	r3, [pc, #436]	@ (80098b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d063      	beq.n	80097d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800970a:	4b6a      	ldr	r3, [pc, #424]	@ (80098b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	099b      	lsrs	r3, r3, #6
 8009710:	2200      	movs	r2, #0
 8009712:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009714:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971c:	633b      	str	r3, [r7, #48]	@ 0x30
 800971e:	2300      	movs	r3, #0
 8009720:	637b      	str	r3, [r7, #52]	@ 0x34
 8009722:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009726:	4622      	mov	r2, r4
 8009728:	462b      	mov	r3, r5
 800972a:	f04f 0000 	mov.w	r0, #0
 800972e:	f04f 0100 	mov.w	r1, #0
 8009732:	0159      	lsls	r1, r3, #5
 8009734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009738:	0150      	lsls	r0, r2, #5
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4621      	mov	r1, r4
 8009740:	1a51      	subs	r1, r2, r1
 8009742:	6139      	str	r1, [r7, #16]
 8009744:	4629      	mov	r1, r5
 8009746:	eb63 0301 	sbc.w	r3, r3, r1
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	f04f 0200 	mov.w	r2, #0
 8009750:	f04f 0300 	mov.w	r3, #0
 8009754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009758:	4659      	mov	r1, fp
 800975a:	018b      	lsls	r3, r1, #6
 800975c:	4651      	mov	r1, sl
 800975e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009762:	4651      	mov	r1, sl
 8009764:	018a      	lsls	r2, r1, #6
 8009766:	4651      	mov	r1, sl
 8009768:	ebb2 0801 	subs.w	r8, r2, r1
 800976c:	4659      	mov	r1, fp
 800976e:	eb63 0901 	sbc.w	r9, r3, r1
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	f04f 0300 	mov.w	r3, #0
 800977a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800977e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009786:	4690      	mov	r8, r2
 8009788:	4699      	mov	r9, r3
 800978a:	4623      	mov	r3, r4
 800978c:	eb18 0303 	adds.w	r3, r8, r3
 8009790:	60bb      	str	r3, [r7, #8]
 8009792:	462b      	mov	r3, r5
 8009794:	eb49 0303 	adc.w	r3, r9, r3
 8009798:	60fb      	str	r3, [r7, #12]
 800979a:	f04f 0200 	mov.w	r2, #0
 800979e:	f04f 0300 	mov.w	r3, #0
 80097a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80097a6:	4629      	mov	r1, r5
 80097a8:	024b      	lsls	r3, r1, #9
 80097aa:	4621      	mov	r1, r4
 80097ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80097b0:	4621      	mov	r1, r4
 80097b2:	024a      	lsls	r2, r1, #9
 80097b4:	4610      	mov	r0, r2
 80097b6:	4619      	mov	r1, r3
 80097b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ba:	2200      	movs	r2, #0
 80097bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80097c4:	f7f7 f98c 	bl	8000ae0 <__aeabi_uldivmod>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4613      	mov	r3, r2
 80097ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097d0:	e058      	b.n	8009884 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097d2:	4b38      	ldr	r3, [pc, #224]	@ (80098b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	099b      	lsrs	r3, r3, #6
 80097d8:	2200      	movs	r2, #0
 80097da:	4618      	mov	r0, r3
 80097dc:	4611      	mov	r1, r2
 80097de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80097e2:	623b      	str	r3, [r7, #32]
 80097e4:	2300      	movs	r3, #0
 80097e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80097e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80097ec:	4642      	mov	r2, r8
 80097ee:	464b      	mov	r3, r9
 80097f0:	f04f 0000 	mov.w	r0, #0
 80097f4:	f04f 0100 	mov.w	r1, #0
 80097f8:	0159      	lsls	r1, r3, #5
 80097fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097fe:	0150      	lsls	r0, r2, #5
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4641      	mov	r1, r8
 8009806:	ebb2 0a01 	subs.w	sl, r2, r1
 800980a:	4649      	mov	r1, r9
 800980c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009810:	f04f 0200 	mov.w	r2, #0
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800981c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009820:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009824:	ebb2 040a 	subs.w	r4, r2, sl
 8009828:	eb63 050b 	sbc.w	r5, r3, fp
 800982c:	f04f 0200 	mov.w	r2, #0
 8009830:	f04f 0300 	mov.w	r3, #0
 8009834:	00eb      	lsls	r3, r5, #3
 8009836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800983a:	00e2      	lsls	r2, r4, #3
 800983c:	4614      	mov	r4, r2
 800983e:	461d      	mov	r5, r3
 8009840:	4643      	mov	r3, r8
 8009842:	18e3      	adds	r3, r4, r3
 8009844:	603b      	str	r3, [r7, #0]
 8009846:	464b      	mov	r3, r9
 8009848:	eb45 0303 	adc.w	r3, r5, r3
 800984c:	607b      	str	r3, [r7, #4]
 800984e:	f04f 0200 	mov.w	r2, #0
 8009852:	f04f 0300 	mov.w	r3, #0
 8009856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800985a:	4629      	mov	r1, r5
 800985c:	028b      	lsls	r3, r1, #10
 800985e:	4621      	mov	r1, r4
 8009860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009864:	4621      	mov	r1, r4
 8009866:	028a      	lsls	r2, r1, #10
 8009868:	4610      	mov	r0, r2
 800986a:	4619      	mov	r1, r3
 800986c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800986e:	2200      	movs	r2, #0
 8009870:	61bb      	str	r3, [r7, #24]
 8009872:	61fa      	str	r2, [r7, #28]
 8009874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009878:	f7f7 f932 	bl	8000ae0 <__aeabi_uldivmod>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4613      	mov	r3, r2
 8009882:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009884:	4b0b      	ldr	r3, [pc, #44]	@ (80098b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	0c1b      	lsrs	r3, r3, #16
 800988a:	f003 0303 	and.w	r3, r3, #3
 800988e:	3301      	adds	r3, #1
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009898:	fbb2 f3f3 	udiv	r3, r2, r3
 800989c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800989e:	e002      	b.n	80098a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80098a0:	4b05      	ldr	r3, [pc, #20]	@ (80098b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80098a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80098a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80098a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3750      	adds	r7, #80	@ 0x50
 80098ac:	46bd      	mov	sp, r7
 80098ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098b2:	bf00      	nop
 80098b4:	40023800 	.word	0x40023800
 80098b8:	00f42400 	.word	0x00f42400
 80098bc:	007a1200 	.word	0x007a1200

080098c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098c0:	b480      	push	{r7}
 80098c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098c4:	4b03      	ldr	r3, [pc, #12]	@ (80098d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80098c6:	681b      	ldr	r3, [r3, #0]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000010 	.word	0x20000010

080098d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80098dc:	f7ff fff0 	bl	80098c0 <HAL_RCC_GetHCLKFreq>
 80098e0:	4602      	mov	r2, r0
 80098e2:	4b05      	ldr	r3, [pc, #20]	@ (80098f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	0a9b      	lsrs	r3, r3, #10
 80098e8:	f003 0307 	and.w	r3, r3, #7
 80098ec:	4903      	ldr	r1, [pc, #12]	@ (80098fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80098ee:	5ccb      	ldrb	r3, [r1, r3]
 80098f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	40023800 	.word	0x40023800
 80098fc:	08010f84 	.word	0x08010f84

08009900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009904:	f7ff ffdc 	bl	80098c0 <HAL_RCC_GetHCLKFreq>
 8009908:	4602      	mov	r2, r0
 800990a:	4b05      	ldr	r3, [pc, #20]	@ (8009920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	0b5b      	lsrs	r3, r3, #13
 8009910:	f003 0307 	and.w	r3, r3, #7
 8009914:	4903      	ldr	r1, [pc, #12]	@ (8009924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009916:	5ccb      	ldrb	r3, [r1, r3]
 8009918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800991c:	4618      	mov	r0, r3
 800991e:	bd80      	pop	{r7, pc}
 8009920:	40023800 	.word	0x40023800
 8009924:	08010f84 	.word	0x08010f84

08009928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e07b      	b.n	8009a32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993e:	2b00      	cmp	r3, #0
 8009940:	d108      	bne.n	8009954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800994a:	d009      	beq.n	8009960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	61da      	str	r2, [r3, #28]
 8009952:	e005      	b.n	8009960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7fb f908 	bl	8004b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009996:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80099a8:	431a      	orrs	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099b2:	431a      	orrs	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	431a      	orrs	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099d0:	431a      	orrs	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a1b      	ldr	r3, [r3, #32]
 80099e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099e4:	ea42 0103 	orr.w	r1, r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	430a      	orrs	r2, r1
 80099f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	0c1b      	lsrs	r3, r3, #16
 80099fe:	f003 0104 	and.w	r1, r3, #4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a06:	f003 0210 	and.w	r2, r3, #16
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69da      	ldr	r2, [r3, #28]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b088      	sub	sp, #32
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	603b      	str	r3, [r7, #0]
 8009a46:	4613      	mov	r3, r2
 8009a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d101      	bne.n	8009a5c <HAL_SPI_Transmit+0x22>
 8009a58:	2302      	movs	r3, #2
 8009a5a:	e126      	b.n	8009caa <HAL_SPI_Transmit+0x270>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a64:	f7fd fa00 	bl	8006e68 <HAL_GetTick>
 8009a68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009a6a:	88fb      	ldrh	r3, [r7, #6]
 8009a6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d002      	beq.n	8009a80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a7e:	e10b      	b.n	8009c98 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <HAL_SPI_Transmit+0x52>
 8009a86:	88fb      	ldrh	r3, [r7, #6]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d102      	bne.n	8009a92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a90:	e102      	b.n	8009c98 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2203      	movs	r2, #3
 8009a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	88fa      	ldrh	r2, [r7, #6]
 8009aaa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	88fa      	ldrh	r2, [r7, #6]
 8009ab0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ad8:	d10f      	bne.n	8009afa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ae8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009af8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b04:	2b40      	cmp	r3, #64	@ 0x40
 8009b06:	d007      	beq.n	8009b18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b20:	d14b      	bne.n	8009bba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <HAL_SPI_Transmit+0xf6>
 8009b2a:	8afb      	ldrh	r3, [r7, #22]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d13e      	bne.n	8009bae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b34:	881a      	ldrh	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b40:	1c9a      	adds	r2, r3, #2
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009b54:	e02b      	b.n	8009bae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f003 0302 	and.w	r3, r3, #2
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d112      	bne.n	8009b8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b68:	881a      	ldrh	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b74:	1c9a      	adds	r2, r3, #2
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	3b01      	subs	r3, #1
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009b88:	e011      	b.n	8009bae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b8a:	f7fd f96d 	bl	8006e68 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d803      	bhi.n	8009ba2 <HAL_SPI_Transmit+0x168>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba0:	d102      	bne.n	8009ba8 <HAL_SPI_Transmit+0x16e>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d102      	bne.n	8009bae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009bac:	e074      	b.n	8009c98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1ce      	bne.n	8009b56 <HAL_SPI_Transmit+0x11c>
 8009bb8:	e04c      	b.n	8009c54 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d002      	beq.n	8009bc8 <HAL_SPI_Transmit+0x18e>
 8009bc2:	8afb      	ldrh	r3, [r7, #22]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d140      	bne.n	8009c4a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	330c      	adds	r3, #12
 8009bd2:	7812      	ldrb	r2, [r2, #0]
 8009bd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bda:	1c5a      	adds	r2, r3, #1
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	3b01      	subs	r3, #1
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009bee:	e02c      	b.n	8009c4a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d113      	bne.n	8009c26 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	330c      	adds	r3, #12
 8009c08:	7812      	ldrb	r2, [r2, #0]
 8009c0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009c24:	e011      	b.n	8009c4a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c26:	f7fd f91f 	bl	8006e68 <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d803      	bhi.n	8009c3e <HAL_SPI_Transmit+0x204>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3c:	d102      	bne.n	8009c44 <HAL_SPI_Transmit+0x20a>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d102      	bne.n	8009c4a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c48:	e026      	b.n	8009c98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1cd      	bne.n	8009bf0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	6839      	ldr	r1, [r7, #0]
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 fbcb 	bl	800a3f4 <SPI_EndRxTxTransaction>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2220      	movs	r2, #32
 8009c68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10a      	bne.n	8009c88 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c72:	2300      	movs	r3, #0
 8009c74:	613b      	str	r3, [r7, #16]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	613b      	str	r3, [r7, #16]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	613b      	str	r3, [r7, #16]
 8009c86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	77fb      	strb	r3, [r7, #31]
 8009c94:	e000      	b.n	8009c98 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009c96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b088      	sub	sp, #32
 8009cb6:	af02      	add	r7, sp, #8
 8009cb8:	60f8      	str	r0, [r7, #12]
 8009cba:	60b9      	str	r1, [r7, #8]
 8009cbc:	603b      	str	r3, [r7, #0]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cce:	d112      	bne.n	8009cf6 <HAL_SPI_Receive+0x44>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10e      	bne.n	8009cf6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2204      	movs	r2, #4
 8009cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009ce0:	88fa      	ldrh	r2, [r7, #6]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f8f1 	bl	8009ed4 <HAL_SPI_TransmitReceive>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	e0ea      	b.n	8009ecc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d101      	bne.n	8009d04 <HAL_SPI_Receive+0x52>
 8009d00:	2302      	movs	r3, #2
 8009d02:	e0e3      	b.n	8009ecc <HAL_SPI_Receive+0x21a>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d0c:	f7fd f8ac 	bl	8006e68 <HAL_GetTick>
 8009d10:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d002      	beq.n	8009d24 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009d1e:	2302      	movs	r3, #2
 8009d20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d22:	e0ca      	b.n	8009eba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <HAL_SPI_Receive+0x7e>
 8009d2a:	88fb      	ldrh	r3, [r7, #6]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d102      	bne.n	8009d36 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d34:	e0c1      	b.n	8009eba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2204      	movs	r2, #4
 8009d3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	88fa      	ldrh	r2, [r7, #6]
 8009d4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	88fa      	ldrh	r2, [r7, #6]
 8009d54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d7c:	d10f      	bne.n	8009d9e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009d9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da8:	2b40      	cmp	r3, #64	@ 0x40
 8009daa:	d007      	beq.n	8009dbc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d162      	bne.n	8009e8a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009dc4:	e02e      	b.n	8009e24 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d115      	bne.n	8009e00 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f103 020c 	add.w	r2, r3, #12
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de0:	7812      	ldrb	r2, [r2, #0]
 8009de2:	b2d2      	uxtb	r2, r2
 8009de4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009dfe:	e011      	b.n	8009e24 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e00:	f7fd f832 	bl	8006e68 <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	683a      	ldr	r2, [r7, #0]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d803      	bhi.n	8009e18 <HAL_SPI_Receive+0x166>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e16:	d102      	bne.n	8009e1e <HAL_SPI_Receive+0x16c>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009e22:	e04a      	b.n	8009eba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1cb      	bne.n	8009dc6 <HAL_SPI_Receive+0x114>
 8009e2e:	e031      	b.n	8009e94 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d113      	bne.n	8009e66 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e48:	b292      	uxth	r2, r2
 8009e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e50:	1c9a      	adds	r2, r3, #2
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e64:	e011      	b.n	8009e8a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e66:	f7fc ffff 	bl	8006e68 <HAL_GetTick>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d803      	bhi.n	8009e7e <HAL_SPI_Receive+0x1cc>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7c:	d102      	bne.n	8009e84 <HAL_SPI_Receive+0x1d2>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d102      	bne.n	8009e8a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009e88:	e017      	b.n	8009eba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1cd      	bne.n	8009e30 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fa45 	bl	800a328 <SPI_EndRxTransaction>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	75fb      	strb	r3, [r7, #23]
 8009eb6:	e000      	b.n	8009eba <HAL_SPI_Receive+0x208>
  }

error :
 8009eb8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b08c      	sub	sp, #48	@ 0x30
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_SPI_TransmitReceive+0x26>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e18a      	b.n	800a210 <HAL_SPI_TransmitReceive+0x33c>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f02:	f7fc ffb1 	bl	8006e68 <HAL_GetTick>
 8009f06:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009f18:	887b      	ldrh	r3, [r7, #2]
 8009f1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d00f      	beq.n	8009f44 <HAL_SPI_TransmitReceive+0x70>
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f2a:	d107      	bne.n	8009f3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d103      	bne.n	8009f3c <HAL_SPI_TransmitReceive+0x68>
 8009f34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	d003      	beq.n	8009f44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009f42:	e15b      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <HAL_SPI_TransmitReceive+0x82>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <HAL_SPI_TransmitReceive+0x82>
 8009f50:	887b      	ldrh	r3, [r7, #2]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d103      	bne.n	8009f5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009f5c:	e14e      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b04      	cmp	r3, #4
 8009f68:	d003      	beq.n	8009f72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2205      	movs	r2, #5
 8009f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	887a      	ldrh	r2, [r7, #2]
 8009f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	887a      	ldrh	r2, [r7, #2]
 8009f88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	887a      	ldrh	r2, [r7, #2]
 8009f94:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	887a      	ldrh	r2, [r7, #2]
 8009f9a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb2:	2b40      	cmp	r3, #64	@ 0x40
 8009fb4:	d007      	beq.n	8009fc6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fce:	d178      	bne.n	800a0c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <HAL_SPI_TransmitReceive+0x10a>
 8009fd8:	8b7b      	ldrh	r3, [r7, #26]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d166      	bne.n	800a0ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe2:	881a      	ldrh	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fee:	1c9a      	adds	r2, r3, #2
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a002:	e053      	b.n	800a0ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f003 0302 	and.w	r3, r3, #2
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d11b      	bne.n	800a04a <HAL_SPI_TransmitReceive+0x176>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a016:	b29b      	uxth	r3, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d016      	beq.n	800a04a <HAL_SPI_TransmitReceive+0x176>
 800a01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d113      	bne.n	800a04a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a026:	881a      	ldrh	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a032:	1c9a      	adds	r2, r3, #2
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	3b01      	subs	r3, #1
 800a040:	b29a      	uxth	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b01      	cmp	r3, #1
 800a056:	d119      	bne.n	800a08c <HAL_SPI_TransmitReceive+0x1b8>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d014      	beq.n	800a08c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68da      	ldr	r2, [r3, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06c:	b292      	uxth	r2, r2
 800a06e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a074:	1c9a      	adds	r2, r3, #2
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a07e:	b29b      	uxth	r3, r3
 800a080:	3b01      	subs	r3, #1
 800a082:	b29a      	uxth	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a088:	2301      	movs	r3, #1
 800a08a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a08c:	f7fc feec 	bl	8006e68 <HAL_GetTick>
 800a090:	4602      	mov	r2, r0
 800a092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a098:	429a      	cmp	r2, r3
 800a09a:	d807      	bhi.n	800a0ac <HAL_SPI_TransmitReceive+0x1d8>
 800a09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a2:	d003      	beq.n	800a0ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a0aa:	e0a7      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1a6      	bne.n	800a004 <HAL_SPI_TransmitReceive+0x130>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1a1      	bne.n	800a004 <HAL_SPI_TransmitReceive+0x130>
 800a0c0:	e07c      	b.n	800a1bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <HAL_SPI_TransmitReceive+0x1fc>
 800a0ca:	8b7b      	ldrh	r3, [r7, #26]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d16b      	bne.n	800a1a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	330c      	adds	r3, #12
 800a0da:	7812      	ldrb	r2, [r2, #0]
 800a0dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0f6:	e057      	b.n	800a1a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f003 0302 	and.w	r3, r3, #2
 800a102:	2b02      	cmp	r3, #2
 800a104:	d11c      	bne.n	800a140 <HAL_SPI_TransmitReceive+0x26c>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d017      	beq.n	800a140 <HAL_SPI_TransmitReceive+0x26c>
 800a110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a112:	2b01      	cmp	r3, #1
 800a114:	d114      	bne.n	800a140 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	330c      	adds	r3, #12
 800a120:	7812      	ldrb	r2, [r2, #0]
 800a122:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a132:	b29b      	uxth	r3, r3
 800a134:	3b01      	subs	r3, #1
 800a136:	b29a      	uxth	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d119      	bne.n	800a182 <HAL_SPI_TransmitReceive+0x2ae>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a152:	b29b      	uxth	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d014      	beq.n	800a182 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a162:	b2d2      	uxtb	r2, r2
 800a164:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a174:	b29b      	uxth	r3, r3
 800a176:	3b01      	subs	r3, #1
 800a178:	b29a      	uxth	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a17e:	2301      	movs	r3, #1
 800a180:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a182:	f7fc fe71 	bl	8006e68 <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a18e:	429a      	cmp	r2, r3
 800a190:	d803      	bhi.n	800a19a <HAL_SPI_TransmitReceive+0x2c6>
 800a192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a198:	d102      	bne.n	800a1a0 <HAL_SPI_TransmitReceive+0x2cc>
 800a19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d103      	bne.n	800a1a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a1a6:	e029      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1a2      	bne.n	800a0f8 <HAL_SPI_TransmitReceive+0x224>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d19d      	bne.n	800a0f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 f917 	bl	800a3f4 <SPI_EndRxTxTransaction>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d006      	beq.n	800a1da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a1d8:	e010      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10b      	bne.n	800a1fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	617b      	str	r3, [r7, #20]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	617b      	str	r3, [r7, #20]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	e000      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a1fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a20c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a210:	4618      	mov	r0, r3
 800a212:	3730      	adds	r7, #48	@ 0x30
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	603b      	str	r3, [r7, #0]
 800a224:	4613      	mov	r3, r2
 800a226:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a228:	f7fc fe1e 	bl	8006e68 <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	4413      	add	r3, r2
 800a236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a238:	f7fc fe16 	bl	8006e68 <HAL_GetTick>
 800a23c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a23e:	4b39      	ldr	r3, [pc, #228]	@ (800a324 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	015b      	lsls	r3, r3, #5
 800a244:	0d1b      	lsrs	r3, r3, #20
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	fb02 f303 	mul.w	r3, r2, r3
 800a24c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a24e:	e054      	b.n	800a2fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a256:	d050      	beq.n	800a2fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a258:	f7fc fe06 	bl	8006e68 <HAL_GetTick>
 800a25c:	4602      	mov	r2, r0
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	429a      	cmp	r2, r3
 800a266:	d902      	bls.n	800a26e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d13d      	bne.n	800a2ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a27c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a286:	d111      	bne.n	800a2ac <SPI_WaitFlagStateUntilTimeout+0x94>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a290:	d004      	beq.n	800a29c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a29a:	d107      	bne.n	800a2ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b4:	d10f      	bne.n	800a2d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a2c4:	601a      	str	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a2d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e017      	b.n	800a31a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4013      	ands	r3, r2
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	429a      	cmp	r2, r3
 800a308:	bf0c      	ite	eq
 800a30a:	2301      	moveq	r3, #1
 800a30c:	2300      	movne	r3, #0
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	461a      	mov	r2, r3
 800a312:	79fb      	ldrb	r3, [r7, #7]
 800a314:	429a      	cmp	r2, r3
 800a316:	d19b      	bne.n	800a250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3720      	adds	r7, #32
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20000010 	.word	0x20000010

0800a328 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af02      	add	r7, sp, #8
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a33c:	d111      	bne.n	800a362 <SPI_EndRxTransaction+0x3a>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a346:	d004      	beq.n	800a352 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a350:	d107      	bne.n	800a362 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a360:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a36a:	d12a      	bne.n	800a3c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a374:	d012      	beq.n	800a39c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2200      	movs	r2, #0
 800a37e:	2180      	movs	r1, #128	@ 0x80
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f7ff ff49 	bl	800a218 <SPI_WaitFlagStateUntilTimeout>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d02d      	beq.n	800a3e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a390:	f043 0220 	orr.w	r2, r3, #32
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e026      	b.n	800a3ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f7ff ff36 	bl	800a218 <SPI_WaitFlagStateUntilTimeout>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01a      	beq.n	800a3e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b6:	f043 0220 	orr.w	r2, r3, #32
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e013      	b.n	800a3ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f7ff ff23 	bl	800a218 <SPI_WaitFlagStateUntilTimeout>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d007      	beq.n	800a3e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3dc:	f043 0220 	orr.w	r2, r3, #32
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e000      	b.n	800a3ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a400:	4b1b      	ldr	r3, [pc, #108]	@ (800a470 <SPI_EndRxTxTransaction+0x7c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a1b      	ldr	r2, [pc, #108]	@ (800a474 <SPI_EndRxTxTransaction+0x80>)
 800a406:	fba2 2303 	umull	r2, r3, r2, r3
 800a40a:	0d5b      	lsrs	r3, r3, #21
 800a40c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a410:	fb02 f303 	mul.w	r3, r2, r3
 800a414:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a41e:	d112      	bne.n	800a446 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2200      	movs	r2, #0
 800a428:	2180      	movs	r1, #128	@ 0x80
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff fef4 	bl	800a218 <SPI_WaitFlagStateUntilTimeout>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d016      	beq.n	800a464 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a43a:	f043 0220 	orr.w	r2, r3, #32
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e00f      	b.n	800a466 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00a      	beq.n	800a462 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	3b01      	subs	r3, #1
 800a450:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a45c:	2b80      	cmp	r3, #128	@ 0x80
 800a45e:	d0f2      	beq.n	800a446 <SPI_EndRxTxTransaction+0x52>
 800a460:	e000      	b.n	800a464 <SPI_EndRxTxTransaction+0x70>
        break;
 800a462:	bf00      	nop
  }

  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20000010 	.word	0x20000010
 800a474:	165e9f81 	.word	0x165e9f81

0800a478 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d101      	bne.n	800a48e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e034      	b.n	800a4f8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7f8 fa00 	bl	80028a8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4610      	mov	r0, r2
 800a4b4:	f002 f93c 	bl	800c730 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	f002 f986 	bl	800c7d4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6858      	ldr	r0, [r3, #4]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	f002 f9bb 	bl	800c850 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	6892      	ldr	r2, [r2, #8]
 800a4e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	6892      	ldr	r2, [r2, #8]
 800a4ee:	f041 0101 	orr.w	r1, r1, #1
 800a4f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e041      	b.n	800a596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d106      	bne.n	800a52c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7fa fcf6 	bl	8004f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4619      	mov	r1, r3
 800a53e:	4610      	mov	r0, r2
 800a540:	f000 fce2 	bl	800af08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
	...

0800a5a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d001      	beq.n	800a5b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e046      	b.n	800a646 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a23      	ldr	r2, [pc, #140]	@ (800a654 <HAL_TIM_Base_Start+0xb4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d022      	beq.n	800a610 <HAL_TIM_Base_Start+0x70>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5d2:	d01d      	beq.n	800a610 <HAL_TIM_Base_Start+0x70>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a1f      	ldr	r2, [pc, #124]	@ (800a658 <HAL_TIM_Base_Start+0xb8>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d018      	beq.n	800a610 <HAL_TIM_Base_Start+0x70>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a1e      	ldr	r2, [pc, #120]	@ (800a65c <HAL_TIM_Base_Start+0xbc>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d013      	beq.n	800a610 <HAL_TIM_Base_Start+0x70>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a660 <HAL_TIM_Base_Start+0xc0>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d00e      	beq.n	800a610 <HAL_TIM_Base_Start+0x70>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a1b      	ldr	r2, [pc, #108]	@ (800a664 <HAL_TIM_Base_Start+0xc4>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d009      	beq.n	800a610 <HAL_TIM_Base_Start+0x70>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a19      	ldr	r2, [pc, #100]	@ (800a668 <HAL_TIM_Base_Start+0xc8>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d004      	beq.n	800a610 <HAL_TIM_Base_Start+0x70>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a18      	ldr	r2, [pc, #96]	@ (800a66c <HAL_TIM_Base_Start+0xcc>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d111      	bne.n	800a634 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f003 0307 	and.w	r3, r3, #7
 800a61a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b06      	cmp	r3, #6
 800a620:	d010      	beq.n	800a644 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f042 0201 	orr.w	r2, r2, #1
 800a630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a632:	e007      	b.n	800a644 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0201 	orr.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	40010000 	.word	0x40010000
 800a658:	40000400 	.word	0x40000400
 800a65c:	40000800 	.word	0x40000800
 800a660:	40000c00 	.word	0x40000c00
 800a664:	40010400 	.word	0x40010400
 800a668:	40014000 	.word	0x40014000
 800a66c:	40001800 	.word	0x40001800

0800a670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b01      	cmp	r3, #1
 800a682:	d001      	beq.n	800a688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e04e      	b.n	800a726 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0201 	orr.w	r2, r2, #1
 800a69e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a23      	ldr	r2, [pc, #140]	@ (800a734 <HAL_TIM_Base_Start_IT+0xc4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d022      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b2:	d01d      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a1f      	ldr	r2, [pc, #124]	@ (800a738 <HAL_TIM_Base_Start_IT+0xc8>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d018      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a73c <HAL_TIM_Base_Start_IT+0xcc>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d013      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a1c      	ldr	r2, [pc, #112]	@ (800a740 <HAL_TIM_Base_Start_IT+0xd0>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d00e      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a1b      	ldr	r2, [pc, #108]	@ (800a744 <HAL_TIM_Base_Start_IT+0xd4>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d009      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a19      	ldr	r2, [pc, #100]	@ (800a748 <HAL_TIM_Base_Start_IT+0xd8>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <HAL_TIM_Base_Start_IT+0x80>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a18      	ldr	r2, [pc, #96]	@ (800a74c <HAL_TIM_Base_Start_IT+0xdc>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d111      	bne.n	800a714 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b06      	cmp	r3, #6
 800a700:	d010      	beq.n	800a724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f042 0201 	orr.w	r2, r2, #1
 800a710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a712:	e007      	b.n	800a724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0201 	orr.w	r2, r2, #1
 800a722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	40010000 	.word	0x40010000
 800a738:	40000400 	.word	0x40000400
 800a73c:	40000800 	.word	0x40000800
 800a740:	40000c00 	.word	0x40000c00
 800a744:	40010400 	.word	0x40010400
 800a748:	40014000 	.word	0x40014000
 800a74c:	40001800 	.word	0x40001800

0800a750 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e041      	b.n	800a7e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f839 	bl	800a7ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4619      	mov	r1, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	f000 fbba 	bl	800af08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
	...

0800a804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d109      	bne.n	800a828 <HAL_TIM_PWM_Start+0x24>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	bf14      	ite	ne
 800a820:	2301      	movne	r3, #1
 800a822:	2300      	moveq	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	e022      	b.n	800a86e <HAL_TIM_PWM_Start+0x6a>
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d109      	bne.n	800a842 <HAL_TIM_PWM_Start+0x3e>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b01      	cmp	r3, #1
 800a838:	bf14      	ite	ne
 800a83a:	2301      	movne	r3, #1
 800a83c:	2300      	moveq	r3, #0
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	e015      	b.n	800a86e <HAL_TIM_PWM_Start+0x6a>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b08      	cmp	r3, #8
 800a846:	d109      	bne.n	800a85c <HAL_TIM_PWM_Start+0x58>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b01      	cmp	r3, #1
 800a852:	bf14      	ite	ne
 800a854:	2301      	movne	r3, #1
 800a856:	2300      	moveq	r3, #0
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	e008      	b.n	800a86e <HAL_TIM_PWM_Start+0x6a>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b01      	cmp	r3, #1
 800a866:	bf14      	ite	ne
 800a868:	2301      	movne	r3, #1
 800a86a:	2300      	moveq	r3, #0
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	e07c      	b.n	800a970 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <HAL_TIM_PWM_Start+0x82>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a884:	e013      	b.n	800a8ae <HAL_TIM_PWM_Start+0xaa>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d104      	bne.n	800a896 <HAL_TIM_PWM_Start+0x92>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a894:	e00b      	b.n	800a8ae <HAL_TIM_PWM_Start+0xaa>
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d104      	bne.n	800a8a6 <HAL_TIM_PWM_Start+0xa2>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8a4:	e003      	b.n	800a8ae <HAL_TIM_PWM_Start+0xaa>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	6839      	ldr	r1, [r7, #0]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fe10 	bl	800b4dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a2d      	ldr	r2, [pc, #180]	@ (800a978 <HAL_TIM_PWM_Start+0x174>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d004      	beq.n	800a8d0 <HAL_TIM_PWM_Start+0xcc>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a2c      	ldr	r2, [pc, #176]	@ (800a97c <HAL_TIM_PWM_Start+0x178>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d101      	bne.n	800a8d4 <HAL_TIM_PWM_Start+0xd0>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e000      	b.n	800a8d6 <HAL_TIM_PWM_Start+0xd2>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d007      	beq.n	800a8ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a8e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a22      	ldr	r2, [pc, #136]	@ (800a978 <HAL_TIM_PWM_Start+0x174>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d022      	beq.n	800a93a <HAL_TIM_PWM_Start+0x136>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8fc:	d01d      	beq.n	800a93a <HAL_TIM_PWM_Start+0x136>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a1f      	ldr	r2, [pc, #124]	@ (800a980 <HAL_TIM_PWM_Start+0x17c>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d018      	beq.n	800a93a <HAL_TIM_PWM_Start+0x136>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a1d      	ldr	r2, [pc, #116]	@ (800a984 <HAL_TIM_PWM_Start+0x180>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d013      	beq.n	800a93a <HAL_TIM_PWM_Start+0x136>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a1c      	ldr	r2, [pc, #112]	@ (800a988 <HAL_TIM_PWM_Start+0x184>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d00e      	beq.n	800a93a <HAL_TIM_PWM_Start+0x136>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a16      	ldr	r2, [pc, #88]	@ (800a97c <HAL_TIM_PWM_Start+0x178>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d009      	beq.n	800a93a <HAL_TIM_PWM_Start+0x136>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a18      	ldr	r2, [pc, #96]	@ (800a98c <HAL_TIM_PWM_Start+0x188>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d004      	beq.n	800a93a <HAL_TIM_PWM_Start+0x136>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a16      	ldr	r2, [pc, #88]	@ (800a990 <HAL_TIM_PWM_Start+0x18c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d111      	bne.n	800a95e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2b06      	cmp	r3, #6
 800a94a:	d010      	beq.n	800a96e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0201 	orr.w	r2, r2, #1
 800a95a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95c:	e007      	b.n	800a96e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f042 0201 	orr.w	r2, r2, #1
 800a96c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	40010000 	.word	0x40010000
 800a97c:	40010400 	.word	0x40010400
 800a980:	40000400 	.word	0x40000400
 800a984:	40000800 	.word	0x40000800
 800a988:	40000c00 	.word	0x40000c00
 800a98c:	40014000 	.word	0x40014000
 800a990:	40001800 	.word	0x40001800

0800a994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d122      	bne.n	800a9f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d11b      	bne.n	800a9f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f06f 0202 	mvn.w	r2, #2
 800a9c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d003      	beq.n	800a9de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa77 	bl	800aeca <HAL_TIM_IC_CaptureCallback>
 800a9dc:	e005      	b.n	800a9ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fa69 	bl	800aeb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fa7a 	bl	800aede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	f003 0304 	and.w	r3, r3, #4
 800a9fa:	2b04      	cmp	r3, #4
 800a9fc:	d122      	bne.n	800aa44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	d11b      	bne.n	800aa44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f06f 0204 	mvn.w	r2, #4
 800aa14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2202      	movs	r2, #2
 800aa1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fa4d 	bl	800aeca <HAL_TIM_IC_CaptureCallback>
 800aa30:	e005      	b.n	800aa3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa3f 	bl	800aeb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fa50 	bl	800aede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	f003 0308 	and.w	r3, r3, #8
 800aa4e:	2b08      	cmp	r3, #8
 800aa50:	d122      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	f003 0308 	and.w	r3, r3, #8
 800aa5c:	2b08      	cmp	r3, #8
 800aa5e:	d11b      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f06f 0208 	mvn.w	r2, #8
 800aa68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2204      	movs	r2, #4
 800aa6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	f003 0303 	and.w	r3, r3, #3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d003      	beq.n	800aa86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fa23 	bl	800aeca <HAL_TIM_IC_CaptureCallback>
 800aa84:	e005      	b.n	800aa92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fa15 	bl	800aeb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fa26 	bl	800aede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 0310 	and.w	r3, r3, #16
 800aaa2:	2b10      	cmp	r3, #16
 800aaa4:	d122      	bne.n	800aaec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f003 0310 	and.w	r3, r3, #16
 800aab0:	2b10      	cmp	r3, #16
 800aab2:	d11b      	bne.n	800aaec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0210 	mvn.w	r2, #16
 800aabc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2208      	movs	r2, #8
 800aac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f9f9 	bl	800aeca <HAL_TIM_IC_CaptureCallback>
 800aad8:	e005      	b.n	800aae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f9eb 	bl	800aeb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f9fc 	bl	800aede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d10e      	bne.n	800ab18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d107      	bne.n	800ab18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f06f 0201 	mvn.w	r2, #1
 800ab10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7f9 ffa6 	bl	8004a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab22:	2b80      	cmp	r3, #128	@ 0x80
 800ab24:	d10e      	bne.n	800ab44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab30:	2b80      	cmp	r3, #128	@ 0x80
 800ab32:	d107      	bne.n	800ab44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ab3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fd78 	bl	800b634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab4e:	2b40      	cmp	r3, #64	@ 0x40
 800ab50:	d10e      	bne.n	800ab70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab5c:	2b40      	cmp	r3, #64	@ 0x40
 800ab5e:	d107      	bne.n	800ab70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ab68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f9c1 	bl	800aef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	f003 0320 	and.w	r3, r3, #32
 800ab7a:	2b20      	cmp	r3, #32
 800ab7c:	d10e      	bne.n	800ab9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f003 0320 	and.w	r3, r3, #32
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	d107      	bne.n	800ab9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f06f 0220 	mvn.w	r2, #32
 800ab94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fd42 	bl	800b620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d101      	bne.n	800abc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abbe:	2302      	movs	r3, #2
 800abc0:	e0ae      	b.n	800ad20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b0c      	cmp	r3, #12
 800abce:	f200 809f 	bhi.w	800ad10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800abd2:	a201      	add	r2, pc, #4	@ (adr r2, 800abd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd8:	0800ac0d 	.word	0x0800ac0d
 800abdc:	0800ad11 	.word	0x0800ad11
 800abe0:	0800ad11 	.word	0x0800ad11
 800abe4:	0800ad11 	.word	0x0800ad11
 800abe8:	0800ac4d 	.word	0x0800ac4d
 800abec:	0800ad11 	.word	0x0800ad11
 800abf0:	0800ad11 	.word	0x0800ad11
 800abf4:	0800ad11 	.word	0x0800ad11
 800abf8:	0800ac8f 	.word	0x0800ac8f
 800abfc:	0800ad11 	.word	0x0800ad11
 800ac00:	0800ad11 	.word	0x0800ad11
 800ac04:	0800ad11 	.word	0x0800ad11
 800ac08:	0800accf 	.word	0x0800accf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68b9      	ldr	r1, [r7, #8]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 fa18 	bl	800b048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	699a      	ldr	r2, [r3, #24]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f042 0208 	orr.w	r2, r2, #8
 800ac26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	699a      	ldr	r2, [r3, #24]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f022 0204 	bic.w	r2, r2, #4
 800ac36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6999      	ldr	r1, [r3, #24]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	691a      	ldr	r2, [r3, #16]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	430a      	orrs	r2, r1
 800ac48:	619a      	str	r2, [r3, #24]
      break;
 800ac4a:	e064      	b.n	800ad16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68b9      	ldr	r1, [r7, #8]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 fa68 	bl	800b128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	699a      	ldr	r2, [r3, #24]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699a      	ldr	r2, [r3, #24]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6999      	ldr	r1, [r3, #24]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	021a      	lsls	r2, r3, #8
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	430a      	orrs	r2, r1
 800ac8a:	619a      	str	r2, [r3, #24]
      break;
 800ac8c:	e043      	b.n	800ad16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68b9      	ldr	r1, [r7, #8]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 fabd 	bl	800b214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69da      	ldr	r2, [r3, #28]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f042 0208 	orr.w	r2, r2, #8
 800aca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	69da      	ldr	r2, [r3, #28]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f022 0204 	bic.w	r2, r2, #4
 800acb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	69d9      	ldr	r1, [r3, #28]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	691a      	ldr	r2, [r3, #16]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	61da      	str	r2, [r3, #28]
      break;
 800accc:	e023      	b.n	800ad16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68b9      	ldr	r1, [r7, #8]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f000 fb11 	bl	800b2fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	69da      	ldr	r2, [r3, #28]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ace8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69da      	ldr	r2, [r3, #28]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800acf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	69d9      	ldr	r1, [r3, #28]
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	021a      	lsls	r2, r3, #8
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	61da      	str	r2, [r3, #28]
      break;
 800ad0e:	e002      	b.n	800ad16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	75fb      	strb	r3, [r7, #23]
      break;
 800ad14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d101      	bne.n	800ad44 <HAL_TIM_ConfigClockSource+0x1c>
 800ad40:	2302      	movs	r3, #2
 800ad42:	e0b4      	b.n	800aeae <HAL_TIM_ConfigClockSource+0x186>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ad62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad7c:	d03e      	beq.n	800adfc <HAL_TIM_ConfigClockSource+0xd4>
 800ad7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad82:	f200 8087 	bhi.w	800ae94 <HAL_TIM_ConfigClockSource+0x16c>
 800ad86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad8a:	f000 8086 	beq.w	800ae9a <HAL_TIM_ConfigClockSource+0x172>
 800ad8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad92:	d87f      	bhi.n	800ae94 <HAL_TIM_ConfigClockSource+0x16c>
 800ad94:	2b70      	cmp	r3, #112	@ 0x70
 800ad96:	d01a      	beq.n	800adce <HAL_TIM_ConfigClockSource+0xa6>
 800ad98:	2b70      	cmp	r3, #112	@ 0x70
 800ad9a:	d87b      	bhi.n	800ae94 <HAL_TIM_ConfigClockSource+0x16c>
 800ad9c:	2b60      	cmp	r3, #96	@ 0x60
 800ad9e:	d050      	beq.n	800ae42 <HAL_TIM_ConfigClockSource+0x11a>
 800ada0:	2b60      	cmp	r3, #96	@ 0x60
 800ada2:	d877      	bhi.n	800ae94 <HAL_TIM_ConfigClockSource+0x16c>
 800ada4:	2b50      	cmp	r3, #80	@ 0x50
 800ada6:	d03c      	beq.n	800ae22 <HAL_TIM_ConfigClockSource+0xfa>
 800ada8:	2b50      	cmp	r3, #80	@ 0x50
 800adaa:	d873      	bhi.n	800ae94 <HAL_TIM_ConfigClockSource+0x16c>
 800adac:	2b40      	cmp	r3, #64	@ 0x40
 800adae:	d058      	beq.n	800ae62 <HAL_TIM_ConfigClockSource+0x13a>
 800adb0:	2b40      	cmp	r3, #64	@ 0x40
 800adb2:	d86f      	bhi.n	800ae94 <HAL_TIM_ConfigClockSource+0x16c>
 800adb4:	2b30      	cmp	r3, #48	@ 0x30
 800adb6:	d064      	beq.n	800ae82 <HAL_TIM_ConfigClockSource+0x15a>
 800adb8:	2b30      	cmp	r3, #48	@ 0x30
 800adba:	d86b      	bhi.n	800ae94 <HAL_TIM_ConfigClockSource+0x16c>
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	d060      	beq.n	800ae82 <HAL_TIM_ConfigClockSource+0x15a>
 800adc0:	2b20      	cmp	r3, #32
 800adc2:	d867      	bhi.n	800ae94 <HAL_TIM_ConfigClockSource+0x16c>
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d05c      	beq.n	800ae82 <HAL_TIM_ConfigClockSource+0x15a>
 800adc8:	2b10      	cmp	r3, #16
 800adca:	d05a      	beq.n	800ae82 <HAL_TIM_ConfigClockSource+0x15a>
 800adcc:	e062      	b.n	800ae94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	6899      	ldr	r1, [r3, #8]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	f000 fb5d 	bl	800b49c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800adf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	609a      	str	r2, [r3, #8]
      break;
 800adfa:	e04f      	b.n	800ae9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6818      	ldr	r0, [r3, #0]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	6899      	ldr	r1, [r3, #8]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	f000 fb46 	bl	800b49c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	689a      	ldr	r2, [r3, #8]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae1e:	609a      	str	r2, [r3, #8]
      break;
 800ae20:	e03c      	b.n	800ae9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6818      	ldr	r0, [r3, #0]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	6859      	ldr	r1, [r3, #4]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f000 faba 	bl	800b3a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2150      	movs	r1, #80	@ 0x50
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 fb13 	bl	800b466 <TIM_ITRx_SetConfig>
      break;
 800ae40:	e02c      	b.n	800ae9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	6859      	ldr	r1, [r3, #4]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	f000 fad9 	bl	800b406 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2160      	movs	r1, #96	@ 0x60
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fb03 	bl	800b466 <TIM_ITRx_SetConfig>
      break;
 800ae60:	e01c      	b.n	800ae9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6818      	ldr	r0, [r3, #0]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	6859      	ldr	r1, [r3, #4]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	f000 fa9a 	bl	800b3a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2140      	movs	r1, #64	@ 0x40
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 faf3 	bl	800b466 <TIM_ITRx_SetConfig>
      break;
 800ae80:	e00c      	b.n	800ae9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f000 faea 	bl	800b466 <TIM_ITRx_SetConfig>
      break;
 800ae92:	e003      	b.n	800ae9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	73fb      	strb	r3, [r7, #15]
      break;
 800ae98:	e000      	b.n	800ae9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b083      	sub	sp, #12
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aebe:	bf00      	nop
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aee6:	bf00      	nop
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b083      	sub	sp, #12
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aefa:	bf00      	nop
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
	...

0800af08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a40      	ldr	r2, [pc, #256]	@ (800b01c <TIM_Base_SetConfig+0x114>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d013      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af26:	d00f      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a3d      	ldr	r2, [pc, #244]	@ (800b020 <TIM_Base_SetConfig+0x118>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00b      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a3c      	ldr	r2, [pc, #240]	@ (800b024 <TIM_Base_SetConfig+0x11c>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d007      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a3b      	ldr	r2, [pc, #236]	@ (800b028 <TIM_Base_SetConfig+0x120>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d003      	beq.n	800af48 <TIM_Base_SetConfig+0x40>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a3a      	ldr	r2, [pc, #232]	@ (800b02c <TIM_Base_SetConfig+0x124>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d108      	bne.n	800af5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a2f      	ldr	r2, [pc, #188]	@ (800b01c <TIM_Base_SetConfig+0x114>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d02b      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af68:	d027      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a2c      	ldr	r2, [pc, #176]	@ (800b020 <TIM_Base_SetConfig+0x118>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d023      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a2b      	ldr	r2, [pc, #172]	@ (800b024 <TIM_Base_SetConfig+0x11c>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d01f      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a2a      	ldr	r2, [pc, #168]	@ (800b028 <TIM_Base_SetConfig+0x120>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d01b      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a29      	ldr	r2, [pc, #164]	@ (800b02c <TIM_Base_SetConfig+0x124>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d017      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a28      	ldr	r2, [pc, #160]	@ (800b030 <TIM_Base_SetConfig+0x128>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d013      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a27      	ldr	r2, [pc, #156]	@ (800b034 <TIM_Base_SetConfig+0x12c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d00f      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a26      	ldr	r2, [pc, #152]	@ (800b038 <TIM_Base_SetConfig+0x130>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d00b      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a25      	ldr	r2, [pc, #148]	@ (800b03c <TIM_Base_SetConfig+0x134>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d007      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a24      	ldr	r2, [pc, #144]	@ (800b040 <TIM_Base_SetConfig+0x138>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d003      	beq.n	800afba <TIM_Base_SetConfig+0xb2>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a23      	ldr	r2, [pc, #140]	@ (800b044 <TIM_Base_SetConfig+0x13c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d108      	bne.n	800afcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	695b      	ldr	r3, [r3, #20]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	689a      	ldr	r2, [r3, #8]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a0a      	ldr	r2, [pc, #40]	@ (800b01c <TIM_Base_SetConfig+0x114>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d003      	beq.n	800b000 <TIM_Base_SetConfig+0xf8>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a0c      	ldr	r2, [pc, #48]	@ (800b02c <TIM_Base_SetConfig+0x124>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d103      	bne.n	800b008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	691a      	ldr	r2, [r3, #16]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	615a      	str	r2, [r3, #20]
}
 800b00e:	bf00      	nop
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	40010000 	.word	0x40010000
 800b020:	40000400 	.word	0x40000400
 800b024:	40000800 	.word	0x40000800
 800b028:	40000c00 	.word	0x40000c00
 800b02c:	40010400 	.word	0x40010400
 800b030:	40014000 	.word	0x40014000
 800b034:	40014400 	.word	0x40014400
 800b038:	40014800 	.word	0x40014800
 800b03c:	40001800 	.word	0x40001800
 800b040:	40001c00 	.word	0x40001c00
 800b044:	40002000 	.word	0x40002000

0800b048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b048:	b480      	push	{r7}
 800b04a:	b087      	sub	sp, #28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a1b      	ldr	r3, [r3, #32]
 800b056:	f023 0201 	bic.w	r2, r3, #1
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 0303 	bic.w	r3, r3, #3
 800b07e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	4313      	orrs	r3, r2
 800b088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f023 0302 	bic.w	r3, r3, #2
 800b090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	4313      	orrs	r3, r2
 800b09a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a20      	ldr	r2, [pc, #128]	@ (800b120 <TIM_OC1_SetConfig+0xd8>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d003      	beq.n	800b0ac <TIM_OC1_SetConfig+0x64>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a1f      	ldr	r2, [pc, #124]	@ (800b124 <TIM_OC1_SetConfig+0xdc>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d10c      	bne.n	800b0c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f023 0308 	bic.w	r3, r3, #8
 800b0b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f023 0304 	bic.w	r3, r3, #4
 800b0c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a15      	ldr	r2, [pc, #84]	@ (800b120 <TIM_OC1_SetConfig+0xd8>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d003      	beq.n	800b0d6 <TIM_OC1_SetConfig+0x8e>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a14      	ldr	r2, [pc, #80]	@ (800b124 <TIM_OC1_SetConfig+0xdc>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d111      	bne.n	800b0fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b0e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68fa      	ldr	r2, [r7, #12]
 800b104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	685a      	ldr	r2, [r3, #4]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	697a      	ldr	r2, [r7, #20]
 800b112:	621a      	str	r2, [r3, #32]
}
 800b114:	bf00      	nop
 800b116:	371c      	adds	r7, #28
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	40010000 	.word	0x40010000
 800b124:	40010400 	.word	0x40010400

0800b128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b128:	b480      	push	{r7}
 800b12a:	b087      	sub	sp, #28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	f023 0210 	bic.w	r2, r3, #16
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b15e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	021b      	lsls	r3, r3, #8
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4313      	orrs	r3, r2
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f023 0320 	bic.w	r3, r3, #32
 800b172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	011b      	lsls	r3, r3, #4
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4a22      	ldr	r2, [pc, #136]	@ (800b20c <TIM_OC2_SetConfig+0xe4>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d003      	beq.n	800b190 <TIM_OC2_SetConfig+0x68>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a21      	ldr	r2, [pc, #132]	@ (800b210 <TIM_OC2_SetConfig+0xe8>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d10d      	bne.n	800b1ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	011b      	lsls	r3, r3, #4
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a17      	ldr	r2, [pc, #92]	@ (800b20c <TIM_OC2_SetConfig+0xe4>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d003      	beq.n	800b1bc <TIM_OC2_SetConfig+0x94>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a16      	ldr	r2, [pc, #88]	@ (800b210 <TIM_OC2_SetConfig+0xe8>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d113      	bne.n	800b1e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	621a      	str	r2, [r3, #32]
}
 800b1fe:	bf00      	nop
 800b200:	371c      	adds	r7, #28
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	40010000 	.word	0x40010000
 800b210:	40010400 	.word	0x40010400

0800b214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b214:	b480      	push	{r7}
 800b216:	b087      	sub	sp, #28
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 0303 	bic.w	r3, r3, #3
 800b24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b25c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	021b      	lsls	r3, r3, #8
 800b264:	697a      	ldr	r2, [r7, #20]
 800b266:	4313      	orrs	r3, r2
 800b268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a21      	ldr	r2, [pc, #132]	@ (800b2f4 <TIM_OC3_SetConfig+0xe0>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d003      	beq.n	800b27a <TIM_OC3_SetConfig+0x66>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a20      	ldr	r2, [pc, #128]	@ (800b2f8 <TIM_OC3_SetConfig+0xe4>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d10d      	bne.n	800b296 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	021b      	lsls	r3, r3, #8
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a16      	ldr	r2, [pc, #88]	@ (800b2f4 <TIM_OC3_SetConfig+0xe0>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d003      	beq.n	800b2a6 <TIM_OC3_SetConfig+0x92>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a15      	ldr	r2, [pc, #84]	@ (800b2f8 <TIM_OC3_SetConfig+0xe4>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d113      	bne.n	800b2ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b2b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	011b      	lsls	r3, r3, #4
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	011b      	lsls	r3, r3, #4
 800b2c8:	693a      	ldr	r2, [r7, #16]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	621a      	str	r2, [r3, #32]
}
 800b2e8:	bf00      	nop
 800b2ea:	371c      	adds	r7, #28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	40010000 	.word	0x40010000
 800b2f8:	40010400 	.word	0x40010400

0800b2fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b087      	sub	sp, #28
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b32a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	021b      	lsls	r3, r3, #8
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	031b      	lsls	r3, r3, #12
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a12      	ldr	r2, [pc, #72]	@ (800b3a0 <TIM_OC4_SetConfig+0xa4>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d003      	beq.n	800b364 <TIM_OC4_SetConfig+0x68>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a11      	ldr	r2, [pc, #68]	@ (800b3a4 <TIM_OC4_SetConfig+0xa8>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d109      	bne.n	800b378 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b36a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	019b      	lsls	r3, r3, #6
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	4313      	orrs	r3, r2
 800b376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	697a      	ldr	r2, [r7, #20]
 800b37c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	685a      	ldr	r2, [r3, #4]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	621a      	str	r2, [r3, #32]
}
 800b392:	bf00      	nop
 800b394:	371c      	adds	r7, #28
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	40010000 	.word	0x40010000
 800b3a4:	40010400 	.word	0x40010400

0800b3a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	f023 0201 	bic.w	r2, r3, #1
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b3d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	011b      	lsls	r3, r3, #4
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f023 030a 	bic.w	r3, r3, #10
 800b3e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	621a      	str	r2, [r3, #32]
}
 800b3fa:	bf00      	nop
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b406:	b480      	push	{r7}
 800b408:	b087      	sub	sp, #28
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	60b9      	str	r1, [r7, #8]
 800b410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	f023 0210 	bic.w	r2, r3, #16
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6a1b      	ldr	r3, [r3, #32]
 800b428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	031b      	lsls	r3, r3, #12
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	4313      	orrs	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	011b      	lsls	r3, r3, #4
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	693a      	ldr	r2, [r7, #16]
 800b458:	621a      	str	r2, [r3, #32]
}
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b466:	b480      	push	{r7}
 800b468:	b085      	sub	sp, #20
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b47c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4313      	orrs	r3, r2
 800b484:	f043 0307 	orr.w	r3, r3, #7
 800b488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	609a      	str	r2, [r3, #8]
}
 800b490:	bf00      	nop
 800b492:	3714      	adds	r7, #20
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b087      	sub	sp, #28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b4b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	021a      	lsls	r2, r3, #8
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	431a      	orrs	r2, r3
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	609a      	str	r2, [r3, #8]
}
 800b4d0:	bf00      	nop
 800b4d2:	371c      	adds	r7, #28
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	f003 031f 	and.w	r3, r3, #31
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6a1a      	ldr	r2, [r3, #32]
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	43db      	mvns	r3, r3
 800b4fe:	401a      	ands	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6a1a      	ldr	r2, [r3, #32]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f003 031f 	and.w	r3, r3, #31
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	fa01 f303 	lsl.w	r3, r1, r3
 800b514:	431a      	orrs	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	621a      	str	r2, [r3, #32]
}
 800b51a:	bf00      	nop
 800b51c:	371c      	adds	r7, #28
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
	...

0800b528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d101      	bne.n	800b540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b53c:	2302      	movs	r3, #2
 800b53e:	e05a      	b.n	800b5f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2202      	movs	r2, #2
 800b54c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a21      	ldr	r2, [pc, #132]	@ (800b604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d022      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b58c:	d01d      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a1d      	ldr	r2, [pc, #116]	@ (800b608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d018      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a1b      	ldr	r2, [pc, #108]	@ (800b60c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d013      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a1a      	ldr	r2, [pc, #104]	@ (800b610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d00e      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a18      	ldr	r2, [pc, #96]	@ (800b614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d009      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a17      	ldr	r2, [pc, #92]	@ (800b618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d004      	beq.n	800b5ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a15      	ldr	r2, [pc, #84]	@ (800b61c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d10c      	bne.n	800b5e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	40010000 	.word	0x40010000
 800b608:	40000400 	.word	0x40000400
 800b60c:	40000800 	.word	0x40000800
 800b610:	40000c00 	.word	0x40000c00
 800b614:	40010400 	.word	0x40010400
 800b618:	40014000 	.word	0x40014000
 800b61c:	40001800 	.word	0x40001800

0800b620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e03f      	b.n	800b6da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d106      	bne.n	800b674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7fb faa0 	bl	8006bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2224      	movs	r2, #36	@ 0x24
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68da      	ldr	r2, [r3, #12]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b68a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fddb 	bl	800c248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	691a      	ldr	r2, [r3, #16]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b6a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	695a      	ldr	r2, [r3, #20]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b6b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68da      	ldr	r2, [r3, #12]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b6c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2220      	movs	r2, #32
 800b6d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b08a      	sub	sp, #40	@ 0x28
 800b6e6:	af02      	add	r7, sp, #8
 800b6e8:	60f8      	str	r0, [r7, #12]
 800b6ea:	60b9      	str	r1, [r7, #8]
 800b6ec:	603b      	str	r3, [r7, #0]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	2b20      	cmp	r3, #32
 800b700:	d17c      	bne.n	800b7fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d002      	beq.n	800b70e <HAL_UART_Transmit+0x2c>
 800b708:	88fb      	ldrh	r3, [r7, #6]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	e075      	b.n	800b7fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d101      	bne.n	800b720 <HAL_UART_Transmit+0x3e>
 800b71c:	2302      	movs	r3, #2
 800b71e:	e06e      	b.n	800b7fe <HAL_UART_Transmit+0x11c>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2221      	movs	r2, #33	@ 0x21
 800b732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b736:	f7fb fb97 	bl	8006e68 <HAL_GetTick>
 800b73a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	88fa      	ldrh	r2, [r7, #6]
 800b740:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	88fa      	ldrh	r2, [r7, #6]
 800b746:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b750:	d108      	bne.n	800b764 <HAL_UART_Transmit+0x82>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d104      	bne.n	800b764 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	61bb      	str	r3, [r7, #24]
 800b762:	e003      	b.n	800b76c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800b774:	e02a      	b.n	800b7cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	2200      	movs	r2, #0
 800b77e:	2180      	movs	r1, #128	@ 0x80
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f000 fb1f 	bl	800bdc4 <UART_WaitOnFlagUntilTimeout>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e036      	b.n	800b7fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10b      	bne.n	800b7ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	881b      	ldrh	r3, [r3, #0]
 800b79a:	461a      	mov	r2, r3
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b7a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	3302      	adds	r3, #2
 800b7aa:	61bb      	str	r3, [r7, #24]
 800b7ac:	e007      	b.n	800b7be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	781a      	ldrb	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1cf      	bne.n	800b776 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2140      	movs	r1, #64	@ 0x40
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 faef 	bl	800bdc4 <UART_WaitOnFlagUntilTimeout>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e006      	b.n	800b7fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	e000      	b.n	800b7fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b7fc:	2302      	movs	r3, #2
  }
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3720      	adds	r7, #32
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	60f8      	str	r0, [r7, #12]
 800b80e:	60b9      	str	r1, [r7, #8]
 800b810:	4613      	mov	r3, r2
 800b812:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b20      	cmp	r3, #32
 800b81e:	d11d      	bne.n	800b85c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <HAL_UART_Receive_IT+0x26>
 800b826:	88fb      	ldrh	r3, [r7, #6]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e016      	b.n	800b85e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b836:	2b01      	cmp	r3, #1
 800b838:	d101      	bne.n	800b83e <HAL_UART_Receive_IT+0x38>
 800b83a:	2302      	movs	r3, #2
 800b83c:	e00f      	b.n	800b85e <HAL_UART_Receive_IT+0x58>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b84c:	88fb      	ldrh	r3, [r7, #6]
 800b84e:	461a      	mov	r2, r3
 800b850:	68b9      	ldr	r1, [r7, #8]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f000 fb24 	bl	800bea0 <UART_Start_Receive_IT>
 800b858:	4603      	mov	r3, r0
 800b85a:	e000      	b.n	800b85e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b85c:	2302      	movs	r3, #2
  }
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
	...

0800b868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b0ba      	sub	sp, #232	@ 0xe8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b88e:	2300      	movs	r3, #0
 800b890:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b894:	2300      	movs	r3, #0
 800b896:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b89a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b89e:	f003 030f 	and.w	r3, r3, #15
 800b8a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b8a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d10f      	bne.n	800b8ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8b2:	f003 0320 	and.w	r3, r3, #32
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d009      	beq.n	800b8ce <HAL_UART_IRQHandler+0x66>
 800b8ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8be:	f003 0320 	and.w	r3, r3, #32
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fc03 	bl	800c0d2 <UART_Receive_IT>
      return;
 800b8cc:	e256      	b.n	800bd7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b8ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 80de 	beq.w	800ba94 <HAL_UART_IRQHandler+0x22c>
 800b8d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d106      	bne.n	800b8f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b8e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f000 80d1 	beq.w	800ba94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b8f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00b      	beq.n	800b916 <HAL_UART_IRQHandler+0xae>
 800b8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b90e:	f043 0201 	orr.w	r2, r3, #1
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b91a:	f003 0304 	and.w	r3, r3, #4
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00b      	beq.n	800b93a <HAL_UART_IRQHandler+0xd2>
 800b922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b932:	f043 0202 	orr.w	r2, r3, #2
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b93a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b93e:	f003 0302 	and.w	r3, r3, #2
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00b      	beq.n	800b95e <HAL_UART_IRQHandler+0xf6>
 800b946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d005      	beq.n	800b95e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b956:	f043 0204 	orr.w	r2, r3, #4
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b962:	f003 0308 	and.w	r3, r3, #8
 800b966:	2b00      	cmp	r3, #0
 800b968:	d011      	beq.n	800b98e <HAL_UART_IRQHandler+0x126>
 800b96a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b96e:	f003 0320 	and.w	r3, r3, #32
 800b972:	2b00      	cmp	r3, #0
 800b974:	d105      	bne.n	800b982 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d005      	beq.n	800b98e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b986:	f043 0208 	orr.w	r2, r3, #8
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b992:	2b00      	cmp	r3, #0
 800b994:	f000 81ed 	beq.w	800bd72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b99c:	f003 0320 	and.w	r3, r3, #32
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d008      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x14e>
 800b9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9a8:	f003 0320 	and.w	r3, r3, #32
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fb8e 	bl	800c0d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9c0:	2b40      	cmp	r3, #64	@ 0x40
 800b9c2:	bf0c      	ite	eq
 800b9c4:	2301      	moveq	r3, #1
 800b9c6:	2300      	movne	r3, #0
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d2:	f003 0308 	and.w	r3, r3, #8
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d103      	bne.n	800b9e2 <HAL_UART_IRQHandler+0x17a>
 800b9da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d04f      	beq.n	800ba82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fa96 	bl	800bf14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f2:	2b40      	cmp	r3, #64	@ 0x40
 800b9f4:	d141      	bne.n	800ba7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3314      	adds	r3, #20
 800b9fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba04:	e853 3f00 	ldrex	r3, [r3]
 800ba08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ba0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3314      	adds	r3, #20
 800ba1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ba22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ba26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ba2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ba32:	e841 2300 	strex	r3, r2, [r1]
 800ba36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ba3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1d9      	bne.n	800b9f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d013      	beq.n	800ba72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba4e:	4a7d      	ldr	r2, [pc, #500]	@ (800bc44 <HAL_UART_IRQHandler+0x3dc>)
 800ba50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fb fec8 	bl	80077ec <HAL_DMA_Abort_IT>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d016      	beq.n	800ba90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba70:	e00e      	b.n	800ba90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f990 	bl	800bd98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba78:	e00a      	b.n	800ba90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f98c 	bl	800bd98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba80:	e006      	b.n	800ba90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f988 	bl	800bd98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800ba8e:	e170      	b.n	800bd72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba90:	bf00      	nop
    return;
 800ba92:	e16e      	b.n	800bd72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	f040 814a 	bne.w	800bd32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ba9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baa2:	f003 0310 	and.w	r3, r3, #16
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 8143 	beq.w	800bd32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800baac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bab0:	f003 0310 	and.w	r3, r3, #16
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 813c 	beq.w	800bd32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800baba:	2300      	movs	r3, #0
 800babc:	60bb      	str	r3, [r7, #8]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	60bb      	str	r3, [r7, #8]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	60bb      	str	r3, [r7, #8]
 800bace:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bada:	2b40      	cmp	r3, #64	@ 0x40
 800badc:	f040 80b4 	bne.w	800bc48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800baec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 8140 	beq.w	800bd76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bafa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bafe:	429a      	cmp	r2, r3
 800bb00:	f080 8139 	bcs.w	800bd76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb10:	69db      	ldr	r3, [r3, #28]
 800bb12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb16:	f000 8088 	beq.w	800bc2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	330c      	adds	r3, #12
 800bb20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bb28:	e853 3f00 	ldrex	r3, [r3]
 800bb2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bb30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	330c      	adds	r3, #12
 800bb42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bb46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bb4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bb52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bb56:	e841 2300 	strex	r3, r2, [r1]
 800bb5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bb5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1d9      	bne.n	800bb1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3314      	adds	r3, #20
 800bb6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb70:	e853 3f00 	ldrex	r3, [r3]
 800bb74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bb76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb78:	f023 0301 	bic.w	r3, r3, #1
 800bb7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3314      	adds	r3, #20
 800bb86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bb8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bb8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bb92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bb96:	e841 2300 	strex	r3, r2, [r1]
 800bb9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bb9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1e1      	bne.n	800bb66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3314      	adds	r3, #20
 800bba8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bbac:	e853 3f00 	ldrex	r3, [r3]
 800bbb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bbb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3314      	adds	r3, #20
 800bbc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bbc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bbc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bbcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bbce:	e841 2300 	strex	r3, r2, [r1]
 800bbd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bbd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1e3      	bne.n	800bba2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	330c      	adds	r3, #12
 800bbee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbf2:	e853 3f00 	ldrex	r3, [r3]
 800bbf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bbf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbfa:	f023 0310 	bic.w	r3, r3, #16
 800bbfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	330c      	adds	r3, #12
 800bc08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bc0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bc0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc14:	e841 2300 	strex	r3, r2, [r1]
 800bc18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bc1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1e3      	bne.n	800bbe8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fb fd71 	bl	800770c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f8b6 	bl	800bdac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc40:	e099      	b.n	800bd76 <HAL_UART_IRQHandler+0x50e>
 800bc42:	bf00      	nop
 800bc44:	0800bfdb 	.word	0x0800bfdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f000 808b 	beq.w	800bd7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bc64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 8086 	beq.w	800bd7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	330c      	adds	r3, #12
 800bc74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc78:	e853 3f00 	ldrex	r3, [r3]
 800bc7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	330c      	adds	r3, #12
 800bc8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800bc92:	647a      	str	r2, [r7, #68]	@ 0x44
 800bc94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc9a:	e841 2300 	strex	r3, r2, [r1]
 800bc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1e3      	bne.n	800bc6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3314      	adds	r3, #20
 800bcac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb0:	e853 3f00 	ldrex	r3, [r3]
 800bcb4:	623b      	str	r3, [r7, #32]
   return(result);
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	f023 0301 	bic.w	r3, r3, #1
 800bcbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bcca:	633a      	str	r2, [r7, #48]	@ 0x30
 800bccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcd2:	e841 2300 	strex	r3, r2, [r1]
 800bcd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1e3      	bne.n	800bca6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2220      	movs	r2, #32
 800bce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	330c      	adds	r3, #12
 800bcf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	e853 3f00 	ldrex	r3, [r3]
 800bcfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f023 0310 	bic.w	r3, r3, #16
 800bd02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	330c      	adds	r3, #12
 800bd0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800bd10:	61fa      	str	r2, [r7, #28]
 800bd12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd14:	69b9      	ldr	r1, [r7, #24]
 800bd16:	69fa      	ldr	r2, [r7, #28]
 800bd18:	e841 2300 	strex	r3, r2, [r1]
 800bd1c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1e3      	bne.n	800bcec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f83e 	bl	800bdac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd30:	e023      	b.n	800bd7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bd32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d009      	beq.n	800bd52 <HAL_UART_IRQHandler+0x4ea>
 800bd3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d003      	beq.n	800bd52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f959 	bl	800c002 <UART_Transmit_IT>
    return;
 800bd50:	e014      	b.n	800bd7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00e      	beq.n	800bd7c <HAL_UART_IRQHandler+0x514>
 800bd5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d008      	beq.n	800bd7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f999 	bl	800c0a2 <UART_EndTransmit_IT>
    return;
 800bd70:	e004      	b.n	800bd7c <HAL_UART_IRQHandler+0x514>
    return;
 800bd72:	bf00      	nop
 800bd74:	e002      	b.n	800bd7c <HAL_UART_IRQHandler+0x514>
      return;
 800bd76:	bf00      	nop
 800bd78:	e000      	b.n	800bd7c <HAL_UART_IRQHandler+0x514>
      return;
 800bd7a:	bf00      	nop
  }
}
 800bd7c:	37e8      	adds	r7, #232	@ 0xe8
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop

0800bd84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b090      	sub	sp, #64	@ 0x40
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdd4:	e050      	b.n	800be78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bddc:	d04c      	beq.n	800be78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bdde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d007      	beq.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bde4:	f7fb f840 	bl	8006e68 <HAL_GetTick>
 800bde8:	4602      	mov	r2, r0
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d241      	bcs.n	800be78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	330c      	adds	r3, #12
 800bdfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdfe:	e853 3f00 	ldrex	r3, [r3]
 800be02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be06:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800be0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	330c      	adds	r3, #12
 800be12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800be14:	637a      	str	r2, [r7, #52]	@ 0x34
 800be16:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be1c:	e841 2300 	strex	r3, r2, [r1]
 800be20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e5      	bne.n	800bdf4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3314      	adds	r3, #20
 800be2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	e853 3f00 	ldrex	r3, [r3]
 800be36:	613b      	str	r3, [r7, #16]
   return(result);
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	f023 0301 	bic.w	r3, r3, #1
 800be3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3314      	adds	r3, #20
 800be46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be48:	623a      	str	r2, [r7, #32]
 800be4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4c:	69f9      	ldr	r1, [r7, #28]
 800be4e:	6a3a      	ldr	r2, [r7, #32]
 800be50:	e841 2300 	strex	r3, r2, [r1]
 800be54:	61bb      	str	r3, [r7, #24]
   return(result);
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1e5      	bne.n	800be28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2220      	movs	r2, #32
 800be60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2220      	movs	r2, #32
 800be68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800be74:	2303      	movs	r3, #3
 800be76:	e00f      	b.n	800be98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	4013      	ands	r3, r2
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	429a      	cmp	r2, r3
 800be86:	bf0c      	ite	eq
 800be88:	2301      	moveq	r3, #1
 800be8a:	2300      	movne	r3, #0
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	461a      	mov	r2, r3
 800be90:	79fb      	ldrb	r3, [r7, #7]
 800be92:	429a      	cmp	r2, r3
 800be94:	d09f      	beq.n	800bdd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3740      	adds	r7, #64	@ 0x40
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	4613      	mov	r3, r2
 800beac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	88fa      	ldrh	r2, [r7, #6]
 800beb8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	88fa      	ldrh	r2, [r7, #6]
 800bebe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2222      	movs	r2, #34	@ 0x22
 800beca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68da      	ldr	r2, [r3, #12]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bee4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	695a      	ldr	r2, [r3, #20]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f042 0201 	orr.w	r2, r2, #1
 800bef4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68da      	ldr	r2, [r3, #12]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f042 0220 	orr.w	r2, r2, #32
 800bf04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3714      	adds	r7, #20
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b095      	sub	sp, #84	@ 0x54
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	330c      	adds	r3, #12
 800bf22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf26:	e853 3f00 	ldrex	r3, [r3]
 800bf2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	330c      	adds	r3, #12
 800bf3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bf3c:	643a      	str	r2, [r7, #64]	@ 0x40
 800bf3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf44:	e841 2300 	strex	r3, r2, [r1]
 800bf48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e5      	bne.n	800bf1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3314      	adds	r3, #20
 800bf56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	e853 3f00 	ldrex	r3, [r3]
 800bf5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	f023 0301 	bic.w	r3, r3, #1
 800bf66:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3314      	adds	r3, #20
 800bf6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf78:	e841 2300 	strex	r3, r2, [r1]
 800bf7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1e5      	bne.n	800bf50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d119      	bne.n	800bfc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	330c      	adds	r3, #12
 800bf92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	f023 0310 	bic.w	r3, r3, #16
 800bfa2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	330c      	adds	r3, #12
 800bfaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfac:	61ba      	str	r2, [r7, #24]
 800bfae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb0:	6979      	ldr	r1, [r7, #20]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	e841 2300 	strex	r3, r2, [r1]
 800bfb8:	613b      	str	r3, [r7, #16]
   return(result);
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1e5      	bne.n	800bf8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2220      	movs	r2, #32
 800bfc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bfce:	bf00      	nop
 800bfd0:	3754      	adds	r7, #84	@ 0x54
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b084      	sub	sp, #16
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f7ff fecf 	bl	800bd98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c002:	b480      	push	{r7}
 800c004:	b085      	sub	sp, #20
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b21      	cmp	r3, #33	@ 0x21
 800c014:	d13e      	bne.n	800c094 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c01e:	d114      	bne.n	800c04a <UART_Transmit_IT+0x48>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d110      	bne.n	800c04a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a1b      	ldr	r3, [r3, #32]
 800c02c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c03c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a1b      	ldr	r3, [r3, #32]
 800c042:	1c9a      	adds	r2, r3, #2
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	621a      	str	r2, [r3, #32]
 800c048:	e008      	b.n	800c05c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	1c59      	adds	r1, r3, #1
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	6211      	str	r1, [r2, #32]
 800c054:	781a      	ldrb	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c060:	b29b      	uxth	r3, r3
 800c062:	3b01      	subs	r3, #1
 800c064:	b29b      	uxth	r3, r3
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	4619      	mov	r1, r3
 800c06a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10f      	bne.n	800c090 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c07e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68da      	ldr	r2, [r3, #12]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c08e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	e000      	b.n	800c096 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c094:	2302      	movs	r3, #2
  }
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	68da      	ldr	r2, [r3, #12]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c0b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2220      	movs	r2, #32
 800c0be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7ff fe5e 	bl	800bd84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b08c      	sub	sp, #48	@ 0x30
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b22      	cmp	r3, #34	@ 0x22
 800c0e4:	f040 80ab 	bne.w	800c23e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0f0:	d117      	bne.n	800c122 <UART_Receive_IT+0x50>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	691b      	ldr	r3, [r3, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d113      	bne.n	800c122 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c102:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c110:	b29a      	uxth	r2, r3
 800c112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c114:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c11a:	1c9a      	adds	r2, r3, #2
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c120:	e026      	b.n	800c170 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c126:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c128:	2300      	movs	r3, #0
 800c12a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c134:	d007      	beq.n	800c146 <UART_Receive_IT+0x74>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d10a      	bne.n	800c154 <UART_Receive_IT+0x82>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d106      	bne.n	800c154 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c150:	701a      	strb	r2, [r3, #0]
 800c152:	e008      	b.n	800c166 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c160:	b2da      	uxtb	r2, r3
 800c162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c164:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16a:	1c5a      	adds	r2, r3, #1
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c174:	b29b      	uxth	r3, r3
 800c176:	3b01      	subs	r3, #1
 800c178:	b29b      	uxth	r3, r3
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	4619      	mov	r1, r3
 800c17e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c180:	2b00      	cmp	r3, #0
 800c182:	d15a      	bne.n	800c23a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68da      	ldr	r2, [r3, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f022 0220 	bic.w	r2, r2, #32
 800c192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c1a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	695a      	ldr	r2, [r3, #20]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f022 0201 	bic.w	r2, r2, #1
 800c1b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2220      	movs	r2, #32
 800c1b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d135      	bne.n	800c230 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	330c      	adds	r3, #12
 800c1d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	e853 3f00 	ldrex	r3, [r3]
 800c1d8:	613b      	str	r3, [r7, #16]
   return(result);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	f023 0310 	bic.w	r3, r3, #16
 800c1e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	330c      	adds	r3, #12
 800c1e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1ea:	623a      	str	r2, [r7, #32]
 800c1ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ee:	69f9      	ldr	r1, [r7, #28]
 800c1f0:	6a3a      	ldr	r2, [r7, #32]
 800c1f2:	e841 2300 	strex	r3, r2, [r1]
 800c1f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1e5      	bne.n	800c1ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 0310 	and.w	r3, r3, #16
 800c208:	2b10      	cmp	r3, #16
 800c20a:	d10a      	bne.n	800c222 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c20c:	2300      	movs	r3, #0
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	60fb      	str	r3, [r7, #12]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	60fb      	str	r3, [r7, #12]
 800c220:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff fdbf 	bl	800bdac <HAL_UARTEx_RxEventCallback>
 800c22e:	e002      	b.n	800c236 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7fa fae3 	bl	80067fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	e002      	b.n	800c240 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	e000      	b.n	800c240 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c23e:	2302      	movs	r3, #2
  }
}
 800c240:	4618      	mov	r0, r3
 800c242:	3730      	adds	r7, #48	@ 0x30
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c24c:	b0c0      	sub	sp, #256	@ 0x100
 800c24e:	af00      	add	r7, sp, #0
 800c250:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c264:	68d9      	ldr	r1, [r3, #12]
 800c266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	ea40 0301 	orr.w	r3, r0, r1
 800c270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c276:	689a      	ldr	r2, [r3, #8]
 800c278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	431a      	orrs	r2, r3
 800c280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c284:	695b      	ldr	r3, [r3, #20]
 800c286:	431a      	orrs	r2, r3
 800c288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c28c:	69db      	ldr	r3, [r3, #28]
 800c28e:	4313      	orrs	r3, r2
 800c290:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c2a0:	f021 010c 	bic.w	r1, r1, #12
 800c2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c2ae:	430b      	orrs	r3, r1
 800c2b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2c2:	6999      	ldr	r1, [r3, #24]
 800c2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	ea40 0301 	orr.w	r3, r0, r1
 800c2ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c2d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	4b8f      	ldr	r3, [pc, #572]	@ (800c514 <UART_SetConfig+0x2cc>)
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d005      	beq.n	800c2e8 <UART_SetConfig+0xa0>
 800c2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	4b8d      	ldr	r3, [pc, #564]	@ (800c518 <UART_SetConfig+0x2d0>)
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d104      	bne.n	800c2f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c2e8:	f7fd fb0a 	bl	8009900 <HAL_RCC_GetPCLK2Freq>
 800c2ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c2f0:	e003      	b.n	800c2fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c2f2:	f7fd faf1 	bl	80098d8 <HAL_RCC_GetPCLK1Freq>
 800c2f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2fe:	69db      	ldr	r3, [r3, #28]
 800c300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c304:	f040 810c 	bne.w	800c520 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c30c:	2200      	movs	r2, #0
 800c30e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c312:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c31a:	4622      	mov	r2, r4
 800c31c:	462b      	mov	r3, r5
 800c31e:	1891      	adds	r1, r2, r2
 800c320:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c322:	415b      	adcs	r3, r3
 800c324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c326:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c32a:	4621      	mov	r1, r4
 800c32c:	eb12 0801 	adds.w	r8, r2, r1
 800c330:	4629      	mov	r1, r5
 800c332:	eb43 0901 	adc.w	r9, r3, r1
 800c336:	f04f 0200 	mov.w	r2, #0
 800c33a:	f04f 0300 	mov.w	r3, #0
 800c33e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c34a:	4690      	mov	r8, r2
 800c34c:	4699      	mov	r9, r3
 800c34e:	4623      	mov	r3, r4
 800c350:	eb18 0303 	adds.w	r3, r8, r3
 800c354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c358:	462b      	mov	r3, r5
 800c35a:	eb49 0303 	adc.w	r3, r9, r3
 800c35e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c36e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c372:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c376:	460b      	mov	r3, r1
 800c378:	18db      	adds	r3, r3, r3
 800c37a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c37c:	4613      	mov	r3, r2
 800c37e:	eb42 0303 	adc.w	r3, r2, r3
 800c382:	657b      	str	r3, [r7, #84]	@ 0x54
 800c384:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c388:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c38c:	f7f4 fba8 	bl	8000ae0 <__aeabi_uldivmod>
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	4b61      	ldr	r3, [pc, #388]	@ (800c51c <UART_SetConfig+0x2d4>)
 800c396:	fba3 2302 	umull	r2, r3, r3, r2
 800c39a:	095b      	lsrs	r3, r3, #5
 800c39c:	011c      	lsls	r4, r3, #4
 800c39e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c3a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c3ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	464b      	mov	r3, r9
 800c3b4:	1891      	adds	r1, r2, r2
 800c3b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c3b8:	415b      	adcs	r3, r3
 800c3ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c3c0:	4641      	mov	r1, r8
 800c3c2:	eb12 0a01 	adds.w	sl, r2, r1
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	eb43 0b01 	adc.w	fp, r3, r1
 800c3cc:	f04f 0200 	mov.w	r2, #0
 800c3d0:	f04f 0300 	mov.w	r3, #0
 800c3d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c3d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c3dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3e0:	4692      	mov	sl, r2
 800c3e2:	469b      	mov	fp, r3
 800c3e4:	4643      	mov	r3, r8
 800c3e6:	eb1a 0303 	adds.w	r3, sl, r3
 800c3ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c3ee:	464b      	mov	r3, r9
 800c3f0:	eb4b 0303 	adc.w	r3, fp, r3
 800c3f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c404:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c40c:	460b      	mov	r3, r1
 800c40e:	18db      	adds	r3, r3, r3
 800c410:	643b      	str	r3, [r7, #64]	@ 0x40
 800c412:	4613      	mov	r3, r2
 800c414:	eb42 0303 	adc.w	r3, r2, r3
 800c418:	647b      	str	r3, [r7, #68]	@ 0x44
 800c41a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c41e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c422:	f7f4 fb5d 	bl	8000ae0 <__aeabi_uldivmod>
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4611      	mov	r1, r2
 800c42c:	4b3b      	ldr	r3, [pc, #236]	@ (800c51c <UART_SetConfig+0x2d4>)
 800c42e:	fba3 2301 	umull	r2, r3, r3, r1
 800c432:	095b      	lsrs	r3, r3, #5
 800c434:	2264      	movs	r2, #100	@ 0x64
 800c436:	fb02 f303 	mul.w	r3, r2, r3
 800c43a:	1acb      	subs	r3, r1, r3
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c442:	4b36      	ldr	r3, [pc, #216]	@ (800c51c <UART_SetConfig+0x2d4>)
 800c444:	fba3 2302 	umull	r2, r3, r3, r2
 800c448:	095b      	lsrs	r3, r3, #5
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c450:	441c      	add	r4, r3
 800c452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c456:	2200      	movs	r2, #0
 800c458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c45c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c460:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c464:	4642      	mov	r2, r8
 800c466:	464b      	mov	r3, r9
 800c468:	1891      	adds	r1, r2, r2
 800c46a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c46c:	415b      	adcs	r3, r3
 800c46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c474:	4641      	mov	r1, r8
 800c476:	1851      	adds	r1, r2, r1
 800c478:	6339      	str	r1, [r7, #48]	@ 0x30
 800c47a:	4649      	mov	r1, r9
 800c47c:	414b      	adcs	r3, r1
 800c47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c480:	f04f 0200 	mov.w	r2, #0
 800c484:	f04f 0300 	mov.w	r3, #0
 800c488:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c48c:	4659      	mov	r1, fp
 800c48e:	00cb      	lsls	r3, r1, #3
 800c490:	4651      	mov	r1, sl
 800c492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c496:	4651      	mov	r1, sl
 800c498:	00ca      	lsls	r2, r1, #3
 800c49a:	4610      	mov	r0, r2
 800c49c:	4619      	mov	r1, r3
 800c49e:	4603      	mov	r3, r0
 800c4a0:	4642      	mov	r2, r8
 800c4a2:	189b      	adds	r3, r3, r2
 800c4a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4a8:	464b      	mov	r3, r9
 800c4aa:	460a      	mov	r2, r1
 800c4ac:	eb42 0303 	adc.w	r3, r2, r3
 800c4b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c4c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c4c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	18db      	adds	r3, r3, r3
 800c4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	eb42 0303 	adc.w	r3, r2, r3
 800c4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c4da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c4de:	f7f4 faff 	bl	8000ae0 <__aeabi_uldivmod>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c51c <UART_SetConfig+0x2d4>)
 800c4e8:	fba3 1302 	umull	r1, r3, r3, r2
 800c4ec:	095b      	lsrs	r3, r3, #5
 800c4ee:	2164      	movs	r1, #100	@ 0x64
 800c4f0:	fb01 f303 	mul.w	r3, r1, r3
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	3332      	adds	r3, #50	@ 0x32
 800c4fa:	4a08      	ldr	r2, [pc, #32]	@ (800c51c <UART_SetConfig+0x2d4>)
 800c4fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c500:	095b      	lsrs	r3, r3, #5
 800c502:	f003 0207 	and.w	r2, r3, #7
 800c506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4422      	add	r2, r4
 800c50e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c510:	e106      	b.n	800c720 <UART_SetConfig+0x4d8>
 800c512:	bf00      	nop
 800c514:	40011000 	.word	0x40011000
 800c518:	40011400 	.word	0x40011400
 800c51c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c524:	2200      	movs	r2, #0
 800c526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c52a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c52e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c532:	4642      	mov	r2, r8
 800c534:	464b      	mov	r3, r9
 800c536:	1891      	adds	r1, r2, r2
 800c538:	6239      	str	r1, [r7, #32]
 800c53a:	415b      	adcs	r3, r3
 800c53c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c53e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c542:	4641      	mov	r1, r8
 800c544:	1854      	adds	r4, r2, r1
 800c546:	4649      	mov	r1, r9
 800c548:	eb43 0501 	adc.w	r5, r3, r1
 800c54c:	f04f 0200 	mov.w	r2, #0
 800c550:	f04f 0300 	mov.w	r3, #0
 800c554:	00eb      	lsls	r3, r5, #3
 800c556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c55a:	00e2      	lsls	r2, r4, #3
 800c55c:	4614      	mov	r4, r2
 800c55e:	461d      	mov	r5, r3
 800c560:	4643      	mov	r3, r8
 800c562:	18e3      	adds	r3, r4, r3
 800c564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c568:	464b      	mov	r3, r9
 800c56a:	eb45 0303 	adc.w	r3, r5, r3
 800c56e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c57e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c582:	f04f 0200 	mov.w	r2, #0
 800c586:	f04f 0300 	mov.w	r3, #0
 800c58a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c58e:	4629      	mov	r1, r5
 800c590:	008b      	lsls	r3, r1, #2
 800c592:	4621      	mov	r1, r4
 800c594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c598:	4621      	mov	r1, r4
 800c59a:	008a      	lsls	r2, r1, #2
 800c59c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c5a0:	f7f4 fa9e 	bl	8000ae0 <__aeabi_uldivmod>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	4b60      	ldr	r3, [pc, #384]	@ (800c72c <UART_SetConfig+0x4e4>)
 800c5aa:	fba3 2302 	umull	r2, r3, r3, r2
 800c5ae:	095b      	lsrs	r3, r3, #5
 800c5b0:	011c      	lsls	r4, r3, #4
 800c5b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c5bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c5c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c5c4:	4642      	mov	r2, r8
 800c5c6:	464b      	mov	r3, r9
 800c5c8:	1891      	adds	r1, r2, r2
 800c5ca:	61b9      	str	r1, [r7, #24]
 800c5cc:	415b      	adcs	r3, r3
 800c5ce:	61fb      	str	r3, [r7, #28]
 800c5d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c5d4:	4641      	mov	r1, r8
 800c5d6:	1851      	adds	r1, r2, r1
 800c5d8:	6139      	str	r1, [r7, #16]
 800c5da:	4649      	mov	r1, r9
 800c5dc:	414b      	adcs	r3, r1
 800c5de:	617b      	str	r3, [r7, #20]
 800c5e0:	f04f 0200 	mov.w	r2, #0
 800c5e4:	f04f 0300 	mov.w	r3, #0
 800c5e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c5ec:	4659      	mov	r1, fp
 800c5ee:	00cb      	lsls	r3, r1, #3
 800c5f0:	4651      	mov	r1, sl
 800c5f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5f6:	4651      	mov	r1, sl
 800c5f8:	00ca      	lsls	r2, r1, #3
 800c5fa:	4610      	mov	r0, r2
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	4603      	mov	r3, r0
 800c600:	4642      	mov	r2, r8
 800c602:	189b      	adds	r3, r3, r2
 800c604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c608:	464b      	mov	r3, r9
 800c60a:	460a      	mov	r2, r1
 800c60c:	eb42 0303 	adc.w	r3, r2, r3
 800c610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c61e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c620:	f04f 0200 	mov.w	r2, #0
 800c624:	f04f 0300 	mov.w	r3, #0
 800c628:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c62c:	4649      	mov	r1, r9
 800c62e:	008b      	lsls	r3, r1, #2
 800c630:	4641      	mov	r1, r8
 800c632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c636:	4641      	mov	r1, r8
 800c638:	008a      	lsls	r2, r1, #2
 800c63a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c63e:	f7f4 fa4f 	bl	8000ae0 <__aeabi_uldivmod>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4611      	mov	r1, r2
 800c648:	4b38      	ldr	r3, [pc, #224]	@ (800c72c <UART_SetConfig+0x4e4>)
 800c64a:	fba3 2301 	umull	r2, r3, r3, r1
 800c64e:	095b      	lsrs	r3, r3, #5
 800c650:	2264      	movs	r2, #100	@ 0x64
 800c652:	fb02 f303 	mul.w	r3, r2, r3
 800c656:	1acb      	subs	r3, r1, r3
 800c658:	011b      	lsls	r3, r3, #4
 800c65a:	3332      	adds	r3, #50	@ 0x32
 800c65c:	4a33      	ldr	r2, [pc, #204]	@ (800c72c <UART_SetConfig+0x4e4>)
 800c65e:	fba2 2303 	umull	r2, r3, r2, r3
 800c662:	095b      	lsrs	r3, r3, #5
 800c664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c668:	441c      	add	r4, r3
 800c66a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c66e:	2200      	movs	r2, #0
 800c670:	673b      	str	r3, [r7, #112]	@ 0x70
 800c672:	677a      	str	r2, [r7, #116]	@ 0x74
 800c674:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c678:	4642      	mov	r2, r8
 800c67a:	464b      	mov	r3, r9
 800c67c:	1891      	adds	r1, r2, r2
 800c67e:	60b9      	str	r1, [r7, #8]
 800c680:	415b      	adcs	r3, r3
 800c682:	60fb      	str	r3, [r7, #12]
 800c684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c688:	4641      	mov	r1, r8
 800c68a:	1851      	adds	r1, r2, r1
 800c68c:	6039      	str	r1, [r7, #0]
 800c68e:	4649      	mov	r1, r9
 800c690:	414b      	adcs	r3, r1
 800c692:	607b      	str	r3, [r7, #4]
 800c694:	f04f 0200 	mov.w	r2, #0
 800c698:	f04f 0300 	mov.w	r3, #0
 800c69c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c6a0:	4659      	mov	r1, fp
 800c6a2:	00cb      	lsls	r3, r1, #3
 800c6a4:	4651      	mov	r1, sl
 800c6a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6aa:	4651      	mov	r1, sl
 800c6ac:	00ca      	lsls	r2, r1, #3
 800c6ae:	4610      	mov	r0, r2
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	4642      	mov	r2, r8
 800c6b6:	189b      	adds	r3, r3, r2
 800c6b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6ba:	464b      	mov	r3, r9
 800c6bc:	460a      	mov	r2, r1
 800c6be:	eb42 0303 	adc.w	r3, r2, r3
 800c6c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800c6ce:	667a      	str	r2, [r7, #100]	@ 0x64
 800c6d0:	f04f 0200 	mov.w	r2, #0
 800c6d4:	f04f 0300 	mov.w	r3, #0
 800c6d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c6dc:	4649      	mov	r1, r9
 800c6de:	008b      	lsls	r3, r1, #2
 800c6e0:	4641      	mov	r1, r8
 800c6e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c6e6:	4641      	mov	r1, r8
 800c6e8:	008a      	lsls	r2, r1, #2
 800c6ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c6ee:	f7f4 f9f7 	bl	8000ae0 <__aeabi_uldivmod>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c72c <UART_SetConfig+0x4e4>)
 800c6f8:	fba3 1302 	umull	r1, r3, r3, r2
 800c6fc:	095b      	lsrs	r3, r3, #5
 800c6fe:	2164      	movs	r1, #100	@ 0x64
 800c700:	fb01 f303 	mul.w	r3, r1, r3
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	011b      	lsls	r3, r3, #4
 800c708:	3332      	adds	r3, #50	@ 0x32
 800c70a:	4a08      	ldr	r2, [pc, #32]	@ (800c72c <UART_SetConfig+0x4e4>)
 800c70c:	fba2 2303 	umull	r2, r3, r2, r3
 800c710:	095b      	lsrs	r3, r3, #5
 800c712:	f003 020f 	and.w	r2, r3, #15
 800c716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4422      	add	r2, r4
 800c71e:	609a      	str	r2, [r3, #8]
}
 800c720:	bf00      	nop
 800c722:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c726:	46bd      	mov	sp, r7
 800c728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c72c:	51eb851f 	.word	0x51eb851f

0800c730 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800c73a:	2300      	movs	r3, #0
 800c73c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c748:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4b20      	ldr	r3, [pc, #128]	@ (800c7d0 <FSMC_NORSRAM_Init+0xa0>)
 800c74e:	4013      	ands	r3, r2
 800c750:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c75a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800c760:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800c766:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800c76c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800c772:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800c778:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800c77e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 800c784:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 800c78a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 800c790:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800c796:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 800c79c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c79e:	68fa      	ldr	r2, [r7, #12]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	2b08      	cmp	r3, #8
 800c7aa:	d103      	bne.n	800c7b4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7b2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68f9      	ldr	r1, [r7, #12]
 800c7bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	fff00080 	.word	0xfff00080

0800c7d4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b087      	sub	sp, #28
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	1c5a      	adds	r2, r3, #1
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ee:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c7f6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c802:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c80a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800c812:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	3b01      	subs	r3, #1
 800c81a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c81c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	3b02      	subs	r3, #2
 800c824:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c826:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c82c:	4313      	orrs	r3, r2
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	4313      	orrs	r3, r2
 800c832:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	1c5a      	adds	r2, r3, #1
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6979      	ldr	r1, [r7, #20]
 800c83c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	371c      	adds	r7, #28
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
	...

0800c850 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c850:	b480      	push	{r7}
 800c852:	b087      	sub	sp, #28
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800c85e:	2300      	movs	r3, #0
 800c860:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c868:	d122      	bne.n	800c8b0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c872:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	4b15      	ldr	r3, [pc, #84]	@ (800c8cc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800c878:	4013      	ands	r3, r2
 800c87a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c886:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c88e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800c896:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c89c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	6979      	ldr	r1, [r7, #20]
 800c8aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c8ae:	e005      	b.n	800c8bc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800c8b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	371c      	adds	r7, #28
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	cff00000 	.word	0xcff00000

0800c8d0 <memset>:
 800c8d0:	4402      	add	r2, r0
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d100      	bne.n	800c8da <memset+0xa>
 800c8d8:	4770      	bx	lr
 800c8da:	f803 1b01 	strb.w	r1, [r3], #1
 800c8de:	e7f9      	b.n	800c8d4 <memset+0x4>

0800c8e0 <__errno>:
 800c8e0:	4b01      	ldr	r3, [pc, #4]	@ (800c8e8 <__errno+0x8>)
 800c8e2:	6818      	ldr	r0, [r3, #0]
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	20000054 	.word	0x20000054

0800c8ec <__libc_init_array>:
 800c8ec:	b570      	push	{r4, r5, r6, lr}
 800c8ee:	4d0d      	ldr	r5, [pc, #52]	@ (800c924 <__libc_init_array+0x38>)
 800c8f0:	4c0d      	ldr	r4, [pc, #52]	@ (800c928 <__libc_init_array+0x3c>)
 800c8f2:	1b64      	subs	r4, r4, r5
 800c8f4:	10a4      	asrs	r4, r4, #2
 800c8f6:	2600      	movs	r6, #0
 800c8f8:	42a6      	cmp	r6, r4
 800c8fa:	d109      	bne.n	800c910 <__libc_init_array+0x24>
 800c8fc:	4d0b      	ldr	r5, [pc, #44]	@ (800c92c <__libc_init_array+0x40>)
 800c8fe:	4c0c      	ldr	r4, [pc, #48]	@ (800c930 <__libc_init_array+0x44>)
 800c900:	f000 f91e 	bl	800cb40 <_init>
 800c904:	1b64      	subs	r4, r4, r5
 800c906:	10a4      	asrs	r4, r4, #2
 800c908:	2600      	movs	r6, #0
 800c90a:	42a6      	cmp	r6, r4
 800c90c:	d105      	bne.n	800c91a <__libc_init_array+0x2e>
 800c90e:	bd70      	pop	{r4, r5, r6, pc}
 800c910:	f855 3b04 	ldr.w	r3, [r5], #4
 800c914:	4798      	blx	r3
 800c916:	3601      	adds	r6, #1
 800c918:	e7ee      	b.n	800c8f8 <__libc_init_array+0xc>
 800c91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c91e:	4798      	blx	r3
 800c920:	3601      	adds	r6, #1
 800c922:	e7f2      	b.n	800c90a <__libc_init_array+0x1e>
 800c924:	08010f9c 	.word	0x08010f9c
 800c928:	08010f9c 	.word	0x08010f9c
 800c92c:	08010f9c 	.word	0x08010f9c
 800c930:	08010fa0 	.word	0x08010fa0

0800c934 <sqrt>:
 800c934:	b538      	push	{r3, r4, r5, lr}
 800c936:	ed2d 8b02 	vpush	{d8}
 800c93a:	ec55 4b10 	vmov	r4, r5, d0
 800c93e:	f000 f825 	bl	800c98c <__ieee754_sqrt>
 800c942:	4622      	mov	r2, r4
 800c944:	462b      	mov	r3, r5
 800c946:	4620      	mov	r0, r4
 800c948:	4629      	mov	r1, r5
 800c94a:	eeb0 8a40 	vmov.f32	s16, s0
 800c94e:	eef0 8a60 	vmov.f32	s17, s1
 800c952:	f7f4 f88f 	bl	8000a74 <__aeabi_dcmpun>
 800c956:	b990      	cbnz	r0, 800c97e <sqrt+0x4a>
 800c958:	2200      	movs	r2, #0
 800c95a:	2300      	movs	r3, #0
 800c95c:	4620      	mov	r0, r4
 800c95e:	4629      	mov	r1, r5
 800c960:	f7f4 f860 	bl	8000a24 <__aeabi_dcmplt>
 800c964:	b158      	cbz	r0, 800c97e <sqrt+0x4a>
 800c966:	f7ff ffbb 	bl	800c8e0 <__errno>
 800c96a:	2321      	movs	r3, #33	@ 0x21
 800c96c:	6003      	str	r3, [r0, #0]
 800c96e:	2200      	movs	r2, #0
 800c970:	2300      	movs	r3, #0
 800c972:	4610      	mov	r0, r2
 800c974:	4619      	mov	r1, r3
 800c976:	f7f3 ff0d 	bl	8000794 <__aeabi_ddiv>
 800c97a:	ec41 0b18 	vmov	d8, r0, r1
 800c97e:	eeb0 0a48 	vmov.f32	s0, s16
 800c982:	eef0 0a68 	vmov.f32	s1, s17
 800c986:	ecbd 8b02 	vpop	{d8}
 800c98a:	bd38      	pop	{r3, r4, r5, pc}

0800c98c <__ieee754_sqrt>:
 800c98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c990:	4a68      	ldr	r2, [pc, #416]	@ (800cb34 <__ieee754_sqrt+0x1a8>)
 800c992:	ec55 4b10 	vmov	r4, r5, d0
 800c996:	43aa      	bics	r2, r5
 800c998:	462b      	mov	r3, r5
 800c99a:	4621      	mov	r1, r4
 800c99c:	d110      	bne.n	800c9c0 <__ieee754_sqrt+0x34>
 800c99e:	4622      	mov	r2, r4
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	f7f3 fdcc 	bl	8000540 <__aeabi_dmul>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	f7f3 fc10 	bl	80001d4 <__adddf3>
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	460d      	mov	r5, r1
 800c9b8:	ec45 4b10 	vmov	d0, r4, r5
 800c9bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c0:	2d00      	cmp	r5, #0
 800c9c2:	dc0e      	bgt.n	800c9e2 <__ieee754_sqrt+0x56>
 800c9c4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c9c8:	4322      	orrs	r2, r4
 800c9ca:	d0f5      	beq.n	800c9b8 <__ieee754_sqrt+0x2c>
 800c9cc:	b19d      	cbz	r5, 800c9f6 <__ieee754_sqrt+0x6a>
 800c9ce:	4622      	mov	r2, r4
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	f7f3 fbfc 	bl	80001d0 <__aeabi_dsub>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	f7f3 feda 	bl	8000794 <__aeabi_ddiv>
 800c9e0:	e7e8      	b.n	800c9b4 <__ieee754_sqrt+0x28>
 800c9e2:	152a      	asrs	r2, r5, #20
 800c9e4:	d115      	bne.n	800ca12 <__ieee754_sqrt+0x86>
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	e009      	b.n	800c9fe <__ieee754_sqrt+0x72>
 800c9ea:	0acb      	lsrs	r3, r1, #11
 800c9ec:	3a15      	subs	r2, #21
 800c9ee:	0549      	lsls	r1, r1, #21
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d0fa      	beq.n	800c9ea <__ieee754_sqrt+0x5e>
 800c9f4:	e7f7      	b.n	800c9e6 <__ieee754_sqrt+0x5a>
 800c9f6:	462a      	mov	r2, r5
 800c9f8:	e7fa      	b.n	800c9f0 <__ieee754_sqrt+0x64>
 800c9fa:	005b      	lsls	r3, r3, #1
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	02dc      	lsls	r4, r3, #11
 800ca00:	d5fb      	bpl.n	800c9fa <__ieee754_sqrt+0x6e>
 800ca02:	1e44      	subs	r4, r0, #1
 800ca04:	1b12      	subs	r2, r2, r4
 800ca06:	f1c0 0420 	rsb	r4, r0, #32
 800ca0a:	fa21 f404 	lsr.w	r4, r1, r4
 800ca0e:	4323      	orrs	r3, r4
 800ca10:	4081      	lsls	r1, r0
 800ca12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca16:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ca1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca1e:	07d2      	lsls	r2, r2, #31
 800ca20:	bf5c      	itt	pl
 800ca22:	005b      	lslpl	r3, r3, #1
 800ca24:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ca28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca2c:	bf58      	it	pl
 800ca2e:	0049      	lslpl	r1, r1, #1
 800ca30:	2600      	movs	r6, #0
 800ca32:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ca36:	106d      	asrs	r5, r5, #1
 800ca38:	0049      	lsls	r1, r1, #1
 800ca3a:	2016      	movs	r0, #22
 800ca3c:	4632      	mov	r2, r6
 800ca3e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ca42:	1917      	adds	r7, r2, r4
 800ca44:	429f      	cmp	r7, r3
 800ca46:	bfde      	ittt	le
 800ca48:	193a      	addle	r2, r7, r4
 800ca4a:	1bdb      	suble	r3, r3, r7
 800ca4c:	1936      	addle	r6, r6, r4
 800ca4e:	0fcf      	lsrs	r7, r1, #31
 800ca50:	3801      	subs	r0, #1
 800ca52:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ca56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ca5a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ca5e:	d1f0      	bne.n	800ca42 <__ieee754_sqrt+0xb6>
 800ca60:	4604      	mov	r4, r0
 800ca62:	2720      	movs	r7, #32
 800ca64:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	eb00 0e0c 	add.w	lr, r0, ip
 800ca6e:	db02      	blt.n	800ca76 <__ieee754_sqrt+0xea>
 800ca70:	d113      	bne.n	800ca9a <__ieee754_sqrt+0x10e>
 800ca72:	458e      	cmp	lr, r1
 800ca74:	d811      	bhi.n	800ca9a <__ieee754_sqrt+0x10e>
 800ca76:	f1be 0f00 	cmp.w	lr, #0
 800ca7a:	eb0e 000c 	add.w	r0, lr, ip
 800ca7e:	da42      	bge.n	800cb06 <__ieee754_sqrt+0x17a>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	db40      	blt.n	800cb06 <__ieee754_sqrt+0x17a>
 800ca84:	f102 0801 	add.w	r8, r2, #1
 800ca88:	1a9b      	subs	r3, r3, r2
 800ca8a:	458e      	cmp	lr, r1
 800ca8c:	bf88      	it	hi
 800ca8e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ca92:	eba1 010e 	sub.w	r1, r1, lr
 800ca96:	4464      	add	r4, ip
 800ca98:	4642      	mov	r2, r8
 800ca9a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ca9e:	3f01      	subs	r7, #1
 800caa0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800caa4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800caa8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800caac:	d1dc      	bne.n	800ca68 <__ieee754_sqrt+0xdc>
 800caae:	4319      	orrs	r1, r3
 800cab0:	d01b      	beq.n	800caea <__ieee754_sqrt+0x15e>
 800cab2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cb38 <__ieee754_sqrt+0x1ac>
 800cab6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cb3c <__ieee754_sqrt+0x1b0>
 800caba:	e9da 0100 	ldrd	r0, r1, [sl]
 800cabe:	e9db 2300 	ldrd	r2, r3, [fp]
 800cac2:	f7f3 fb85 	bl	80001d0 <__aeabi_dsub>
 800cac6:	e9da 8900 	ldrd	r8, r9, [sl]
 800caca:	4602      	mov	r2, r0
 800cacc:	460b      	mov	r3, r1
 800cace:	4640      	mov	r0, r8
 800cad0:	4649      	mov	r1, r9
 800cad2:	f7f3 ffb1 	bl	8000a38 <__aeabi_dcmple>
 800cad6:	b140      	cbz	r0, 800caea <__ieee754_sqrt+0x15e>
 800cad8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cadc:	e9da 0100 	ldrd	r0, r1, [sl]
 800cae0:	e9db 2300 	ldrd	r2, r3, [fp]
 800cae4:	d111      	bne.n	800cb0a <__ieee754_sqrt+0x17e>
 800cae6:	3601      	adds	r6, #1
 800cae8:	463c      	mov	r4, r7
 800caea:	1072      	asrs	r2, r6, #1
 800caec:	0863      	lsrs	r3, r4, #1
 800caee:	07f1      	lsls	r1, r6, #31
 800caf0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800caf4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800caf8:	bf48      	it	mi
 800cafa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cafe:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cb02:	4618      	mov	r0, r3
 800cb04:	e756      	b.n	800c9b4 <__ieee754_sqrt+0x28>
 800cb06:	4690      	mov	r8, r2
 800cb08:	e7be      	b.n	800ca88 <__ieee754_sqrt+0xfc>
 800cb0a:	f7f3 fb63 	bl	80001d4 <__adddf3>
 800cb0e:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	4640      	mov	r0, r8
 800cb18:	4649      	mov	r1, r9
 800cb1a:	f7f3 ff83 	bl	8000a24 <__aeabi_dcmplt>
 800cb1e:	b120      	cbz	r0, 800cb2a <__ieee754_sqrt+0x19e>
 800cb20:	1ca0      	adds	r0, r4, #2
 800cb22:	bf08      	it	eq
 800cb24:	3601      	addeq	r6, #1
 800cb26:	3402      	adds	r4, #2
 800cb28:	e7df      	b.n	800caea <__ieee754_sqrt+0x15e>
 800cb2a:	1c63      	adds	r3, r4, #1
 800cb2c:	f023 0401 	bic.w	r4, r3, #1
 800cb30:	e7db      	b.n	800caea <__ieee754_sqrt+0x15e>
 800cb32:	bf00      	nop
 800cb34:	7ff00000 	.word	0x7ff00000
 800cb38:	200000b0 	.word	0x200000b0
 800cb3c:	200000a8 	.word	0x200000a8

0800cb40 <_init>:
 800cb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb42:	bf00      	nop
 800cb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb46:	bc08      	pop	{r3}
 800cb48:	469e      	mov	lr, r3
 800cb4a:	4770      	bx	lr

0800cb4c <_fini>:
 800cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4e:	bf00      	nop
 800cb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb52:	bc08      	pop	{r3}
 800cb54:	469e      	mov	lr, r3
 800cb56:	4770      	bx	lr
